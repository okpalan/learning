{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3","program":"C:\\Users\\Researchers\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","byteorder","C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=9f24cd2030bd26ad","-C","extra-filename=-9f24cd2030bd26ad","--out-dir","c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Researchers\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps\\libbyteorder-9f24cd2030bd26ad.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[10110587357892928542,0]},"crate_root":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src","external_crates":[{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}}],"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":0,"byte_end":98798,"line_start":1,"line_end":3160,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":2476,"byte_end":2488,"line_start":77,"line_end":77,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":2490,"byte_end":2503,"line_start":77,"line_end":77,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":0,"byte_end":98798,"line_start":1,"line_end":3160,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":237}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":0,"byte_end":2169,"line_start":1,"line_end":62,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99679,"byte_end":99691,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":98862,"byte_end":98933,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":98934,"byte_end":98937,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":98938,"byte_end":99016,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99017,"byte_end":99095,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99096,"byte_end":99166,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99167,"byte_end":99170,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99171,"byte_end":99185,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99186,"byte_end":99189,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99190,"byte_end":99251,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99252,"byte_end":99255,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99256,"byte_end":99267,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99268,"byte_end":99292,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99293,"byte_end":99338,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99339,"byte_end":99342,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99343,"byte_end":99391,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99392,"byte_end":99450,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99451,"byte_end":99509,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99510,"byte_end":99517,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99518,"byte_end":99521,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99522,"byte_end":99560,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99561,"byte_end":99605,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99606,"byte_end":99668,"line_start":27,"line_end":27,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100486,"byte_end":100493,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99708,"byte_end":99771,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99776,"byte_end":99779,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99784,"byte_end":99855,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99860,"byte_end":99906,"line_start":32,"line_end":32,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99911,"byte_end":99914,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99919,"byte_end":99931,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99936,"byte_end":99939,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99944,"byte_end":100008,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100013,"byte_end":100016,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100021,"byte_end":100113,"line_start":38,"line_end":38,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100118,"byte_end":100121,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100126,"byte_end":100140,"line_start":40,"line_end":40,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100145,"byte_end":100148,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100153,"byte_end":100200,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100205,"byte_end":100208,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100213,"byte_end":100224,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100229,"byte_end":100253,"line_start":45,"line_end":45,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100258,"byte_end":100303,"line_start":46,"line_end":46,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100308,"byte_end":100311,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100316,"byte_end":100358,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100363,"byte_end":100405,"line_start":49,"line_end":49,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100410,"byte_end":100452,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100457,"byte_end":100464,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100469,"byte_end":100478,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101404,"byte_end":101411,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100622,"byte_end":100682,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100687,"byte_end":100690,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100695,"byte_end":100766,"line_start":61,"line_end":61,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100771,"byte_end":100817,"line_start":62,"line_end":62,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100822,"byte_end":100825,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100830,"byte_end":100842,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100847,"byte_end":100850,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100855,"byte_end":100919,"line_start":66,"line_end":66,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100924,"byte_end":100927,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":100932,"byte_end":101024,"line_start":68,"line_end":68,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101029,"byte_end":101032,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101037,"byte_end":101051,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101056,"byte_end":101059,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101064,"byte_end":101111,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101116,"byte_end":101119,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101124,"byte_end":101135,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101140,"byte_end":101164,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101169,"byte_end":101214,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101219,"byte_end":101222,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101227,"byte_end":101275,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101280,"byte_end":101322,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101327,"byte_end":101370,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101375,"byte_end":101382,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101387,"byte_end":101396,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102240,"byte_end":102248,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101546,"byte_end":101610,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101615,"byte_end":101618,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101623,"byte_end":101635,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101640,"byte_end":101643,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101648,"byte_end":101712,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101717,"byte_end":101720,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101725,"byte_end":101817,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101822,"byte_end":101825,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101830,"byte_end":101844,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101849,"byte_end":101852,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101857,"byte_end":101916,"line_start":99,"line_end":99,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101921,"byte_end":101924,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101929,"byte_end":101940,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101945,"byte_end":101969,"line_start":102,"line_end":102,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":101974,"byte_end":102019,"line_start":103,"line_end":103,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102024,"byte_end":102027,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102032,"byte_end":102080,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102085,"byte_end":102143,"line_start":106,"line_end":106,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102148,"byte_end":102206,"line_start":107,"line_end":107,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102211,"byte_end":102218,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102223,"byte_end":102232,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103105,"byte_end":103113,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102403,"byte_end":102464,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102469,"byte_end":102472,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102477,"byte_end":102489,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102494,"byte_end":102497,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102502,"byte_end":102566,"line_start":120,"line_end":120,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102571,"byte_end":102574,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102579,"byte_end":102671,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102676,"byte_end":102679,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102684,"byte_end":102698,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102703,"byte_end":102706,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102711,"byte_end":102768,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102773,"byte_end":102776,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102781,"byte_end":102792,"line_start":128,"line_end":128,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102797,"byte_end":102821,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102826,"byte_end":102871,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102876,"byte_end":102879,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102884,"byte_end":102944,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":102949,"byte_end":103007,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103012,"byte_end":103071,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103076,"byte_end":103083,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103088,"byte_end":103097,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103905,"byte_end":103913,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103268,"byte_end":103332,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103337,"byte_end":103340,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103345,"byte_end":103357,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103362,"byte_end":103365,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103370,"byte_end":103434,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103439,"byte_end":103442,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103447,"byte_end":103539,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103544,"byte_end":103547,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103552,"byte_end":103566,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103571,"byte_end":103574,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103579,"byte_end":103638,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103643,"byte_end":103646,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103651,"byte_end":103662,"line_start":155,"line_end":155,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103667,"byte_end":103691,"line_start":156,"line_end":156,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103696,"byte_end":103741,"line_start":157,"line_end":157,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103746,"byte_end":103749,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103754,"byte_end":103808,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103813,"byte_end":103871,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103876,"byte_end":103883,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":103888,"byte_end":103897,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104703,"byte_end":104711,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104068,"byte_end":104129,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104134,"byte_end":104137,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104142,"byte_end":104154,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104159,"byte_end":104162,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104167,"byte_end":104231,"line_start":173,"line_end":173,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104236,"byte_end":104239,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104244,"byte_end":104336,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104341,"byte_end":104344,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104349,"byte_end":104363,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104368,"byte_end":104371,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104376,"byte_end":104433,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104438,"byte_end":104441,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104446,"byte_end":104457,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104462,"byte_end":104486,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104491,"byte_end":104536,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104541,"byte_end":104544,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104549,"byte_end":104603,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104608,"byte_end":104669,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104674,"byte_end":104681,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104686,"byte_end":104695,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105509,"byte_end":105517,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104866,"byte_end":104930,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104935,"byte_end":104938,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104943,"byte_end":104955,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104960,"byte_end":104963,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":104968,"byte_end":105032,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105037,"byte_end":105040,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105045,"byte_end":105137,"line_start":201,"line_end":201,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105142,"byte_end":105145,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105150,"byte_end":105164,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105169,"byte_end":105172,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105177,"byte_end":105236,"line_start":205,"line_end":205,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105241,"byte_end":105244,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105249,"byte_end":105260,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105265,"byte_end":105289,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105294,"byte_end":105339,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105344,"byte_end":105347,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105352,"byte_end":105412,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105417,"byte_end":105475,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105480,"byte_end":105487,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105492,"byte_end":105501,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106313,"byte_end":106321,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105672,"byte_end":105733,"line_start":221,"line_end":221,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105738,"byte_end":105741,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105746,"byte_end":105758,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105763,"byte_end":105766,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105771,"byte_end":105835,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105840,"byte_end":105843,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105848,"byte_end":105940,"line_start":227,"line_end":227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105945,"byte_end":105948,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105953,"byte_end":105967,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105972,"byte_end":105975,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":105980,"byte_end":106037,"line_start":231,"line_end":231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106042,"byte_end":106045,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106050,"byte_end":106061,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106066,"byte_end":106090,"line_start":234,"line_end":234,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106095,"byte_end":106140,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106145,"byte_end":106148,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106153,"byte_end":106213,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106218,"byte_end":106279,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106284,"byte_end":106291,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106296,"byte_end":106305,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107157,"byte_end":107165,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106476,"byte_end":106540,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106545,"byte_end":106548,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106553,"byte_end":106565,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106570,"byte_end":106573,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106578,"byte_end":106642,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106647,"byte_end":106650,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106655,"byte_end":106747,"line_start":253,"line_end":253,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106752,"byte_end":106755,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106760,"byte_end":106774,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106779,"byte_end":106782,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106787,"byte_end":106848,"line_start":257,"line_end":257,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106853,"byte_end":106856,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106861,"byte_end":106872,"line_start":259,"line_end":259,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106877,"byte_end":106901,"line_start":260,"line_end":260,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106906,"byte_end":106951,"line_start":261,"line_end":261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106956,"byte_end":106959,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":106964,"byte_end":107048,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107053,"byte_end":107123,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107128,"byte_end":107135,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107140,"byte_end":107149,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107975,"byte_end":107983,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107320,"byte_end":107381,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107386,"byte_end":107389,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107394,"byte_end":107406,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107411,"byte_end":107414,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107419,"byte_end":107483,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107488,"byte_end":107491,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107496,"byte_end":107588,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107593,"byte_end":107596,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107601,"byte_end":107615,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107620,"byte_end":107623,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107628,"byte_end":107686,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107691,"byte_end":107694,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107699,"byte_end":107710,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107715,"byte_end":107739,"line_start":286,"line_end":286,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107744,"byte_end":107789,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107794,"byte_end":107797,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107802,"byte_end":107865,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107870,"byte_end":107941,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107946,"byte_end":107953,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":107958,"byte_end":107967,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110664,"byte_end":110673,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110030,"byte_end":110095,"line_start":357,"line_end":357,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110100,"byte_end":110103,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110108,"byte_end":110120,"line_start":359,"line_end":359,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110125,"byte_end":110128,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110133,"byte_end":110197,"line_start":361,"line_end":361,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110202,"byte_end":110205,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110210,"byte_end":110302,"line_start":363,"line_end":363,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110307,"byte_end":110310,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110315,"byte_end":110329,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110334,"byte_end":110337,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110342,"byte_end":110403,"line_start":367,"line_end":367,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110408,"byte_end":110411,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110416,"byte_end":110427,"line_start":369,"line_end":369,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110432,"byte_end":110456,"line_start":370,"line_end":370,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110461,"byte_end":110506,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110511,"byte_end":110514,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110519,"byte_end":110573,"line_start":373,"line_end":373,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110578,"byte_end":110642,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110647,"byte_end":110656,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111503,"byte_end":111511,"line_start":401,"line_end":401,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110872,"byte_end":110934,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110939,"byte_end":110942,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110947,"byte_end":110959,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110964,"byte_end":110967,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":110972,"byte_end":111036,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111041,"byte_end":111044,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111049,"byte_end":111141,"line_start":388,"line_end":388,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111146,"byte_end":111149,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111154,"byte_end":111168,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111173,"byte_end":111176,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111181,"byte_end":111242,"line_start":392,"line_end":392,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111247,"byte_end":111250,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111255,"byte_end":111266,"line_start":394,"line_end":394,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111271,"byte_end":111295,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111300,"byte_end":111345,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111350,"byte_end":111353,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111358,"byte_end":111412,"line_start":398,"line_end":398,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111417,"byte_end":111481,"line_start":399,"line_end":399,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":111486,"byte_end":111495,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113132,"byte_end":113140,"line_start":450,"line_end":450,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112368,"byte_end":112441,"line_start":425,"line_end":425,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112446,"byte_end":112472,"line_start":426,"line_end":426,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112477,"byte_end":112480,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112485,"byte_end":112497,"line_start":428,"line_end":428,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112502,"byte_end":112505,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112510,"byte_end":112574,"line_start":430,"line_end":430,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112579,"byte_end":112582,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112587,"byte_end":112679,"line_start":432,"line_end":432,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112684,"byte_end":112687,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112692,"byte_end":112706,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112711,"byte_end":112714,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian single-precision floating point number from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112719,"byte_end":112794,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112799,"byte_end":112802,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112807,"byte_end":112818,"line_start":438,"line_end":438,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112823,"byte_end":112840,"line_start":439,"line_end":439,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112845,"byte_end":112869,"line_start":440,"line_end":440,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112874,"byte_end":112877,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112882,"byte_end":112927,"line_start":442,"line_end":442,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112932,"byte_end":112935,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112940,"byte_end":112975,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":112980,"byte_end":113011,"line_start":445,"line_end":445,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113016,"byte_end":113023,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113028,"byte_end":113098,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113103,"byte_end":113110,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113115,"byte_end":113124,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114083,"byte_end":114091,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113295,"byte_end":113368,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113373,"byte_end":113399,"line_start":457,"line_end":457,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113404,"byte_end":113407,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113412,"byte_end":113424,"line_start":459,"line_end":459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113429,"byte_end":113432,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113437,"byte_end":113501,"line_start":461,"line_end":461,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113506,"byte_end":113509,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113514,"byte_end":113606,"line_start":463,"line_end":463,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113611,"byte_end":113614,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113619,"byte_end":113633,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113638,"byte_end":113641,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian double-precision floating point number from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113646,"byte_end":113721,"line_start":467,"line_end":467,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113726,"byte_end":113729,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113734,"byte_end":113745,"line_start":469,"line_end":469,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113750,"byte_end":113767,"line_start":470,"line_end":470,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113772,"byte_end":113796,"line_start":471,"line_end":471,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113801,"byte_end":113804,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113809,"byte_end":113854,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113859,"byte_end":113862,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113867,"byte_end":113902,"line_start":475,"line_end":475,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113907,"byte_end":113962,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113967,"byte_end":113974,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":113979,"byte_end":114049,"line_start":478,"line_end":478,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114054,"byte_end":114061,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114066,"byte_end":114075,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115132,"byte_end":115145,"line_start":513,"line_end":513,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"pub fn read_u16_into<T: ByteOrder>(&mut Self, &mut [u16]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 16 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114246,"byte_end":114314,"line_start":487,"line_end":487,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114319,"byte_end":114330,"line_start":488,"line_end":488,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114335,"byte_end":114338,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114343,"byte_end":114416,"line_start":490,"line_end":490,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114421,"byte_end":114488,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114493,"byte_end":114496,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114501,"byte_end":114513,"line_start":493,"line_end":493,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114518,"byte_end":114521,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114526,"byte_end":114590,"line_start":495,"line_end":495,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114595,"byte_end":114598,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114603,"byte_end":114695,"line_start":497,"line_end":497,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114700,"byte_end":114703,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114708,"byte_end":114722,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114727,"byte_end":114730,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114735,"byte_end":114808,"line_start":501,"line_end":501,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114813,"byte_end":114816,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114821,"byte_end":114832,"line_start":503,"line_end":503,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114837,"byte_end":114861,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114866,"byte_end":114911,"line_start":505,"line_end":505,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114916,"byte_end":114919,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114924,"byte_end":114972,"line_start":507,"line_end":507,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":114977,"byte_end":115002,"line_start":508,"line_end":508,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115007,"byte_end":115061,"line_start":509,"line_end":509,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115066,"byte_end":115098,"line_start":510,"line_end":510,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115103,"byte_end":115110,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115115,"byte_end":115124,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116275,"byte_end":116288,"line_start":548,"line_end":548,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"pub fn read_u32_into<T: ByteOrder>(&mut Self, &mut [u32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 32 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115377,"byte_end":115445,"line_start":522,"line_end":522,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115450,"byte_end":115461,"line_start":523,"line_end":523,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115466,"byte_end":115469,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115474,"byte_end":115547,"line_start":525,"line_end":525,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115552,"byte_end":115619,"line_start":526,"line_end":526,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115624,"byte_end":115627,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115632,"byte_end":115644,"line_start":528,"line_end":528,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115649,"byte_end":115652,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115657,"byte_end":115721,"line_start":530,"line_end":530,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115726,"byte_end":115729,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115734,"byte_end":115826,"line_start":532,"line_end":532,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115831,"byte_end":115834,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115839,"byte_end":115853,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115858,"byte_end":115861,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115866,"byte_end":115939,"line_start":536,"line_end":536,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115944,"byte_end":115947,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115952,"byte_end":115963,"line_start":538,"line_end":538,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115968,"byte_end":115992,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":115997,"byte_end":116042,"line_start":540,"line_end":540,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116047,"byte_end":116050,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116055,"byte_end":116115,"line_start":542,"line_end":542,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116120,"byte_end":116145,"line_start":543,"line_end":543,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116150,"byte_end":116204,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116209,"byte_end":116241,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116246,"byte_end":116253,"line_start":546,"line_end":546,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116258,"byte_end":116267,"line_start":547,"line_end":547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117477,"byte_end":117490,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"pub fn read_u64_into<T: ByteOrder>(&mut Self, &mut [u64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 64 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116520,"byte_end":116588,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116593,"byte_end":116604,"line_start":558,"line_end":558,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116609,"byte_end":116612,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116617,"byte_end":116690,"line_start":560,"line_end":560,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116695,"byte_end":116762,"line_start":561,"line_end":561,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116767,"byte_end":116770,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116775,"byte_end":116787,"line_start":563,"line_end":563,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116792,"byte_end":116795,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116800,"byte_end":116864,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116869,"byte_end":116872,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116877,"byte_end":116969,"line_start":567,"line_end":567,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116974,"byte_end":116977,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":116982,"byte_end":116996,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117001,"byte_end":117004,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 64 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117009,"byte_end":117082,"line_start":571,"line_end":571,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117087,"byte_end":117090,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117095,"byte_end":117106,"line_start":573,"line_end":573,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117111,"byte_end":117135,"line_start":574,"line_end":574,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117140,"byte_end":117185,"line_start":575,"line_end":575,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117190,"byte_end":117193,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117198,"byte_end":117233,"line_start":577,"line_end":577,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117238,"byte_end":117269,"line_start":578,"line_end":578,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117274,"byte_end":117305,"line_start":579,"line_end":579,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117310,"byte_end":117317,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117322,"byte_end":117347,"line_start":581,"line_end":581,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117352,"byte_end":117406,"line_start":582,"line_end":582,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117411,"byte_end":117443,"line_start":583,"line_end":583,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117448,"byte_end":117455,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":117460,"byte_end":117469,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119912,"byte_end":119925,"line_start":663,"line_end":663,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"pub fn read_i16_into<T: ByteOrder>(&mut Self, &mut [i16]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 16 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119030,"byte_end":119096,"line_start":637,"line_end":637,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119101,"byte_end":119112,"line_start":638,"line_end":638,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119117,"byte_end":119120,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119125,"byte_end":119198,"line_start":640,"line_end":640,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119203,"byte_end":119270,"line_start":641,"line_end":641,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119275,"byte_end":119278,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119283,"byte_end":119295,"line_start":643,"line_end":643,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119300,"byte_end":119303,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119308,"byte_end":119372,"line_start":645,"line_end":645,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119377,"byte_end":119380,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119385,"byte_end":119477,"line_start":647,"line_end":647,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119482,"byte_end":119485,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119490,"byte_end":119504,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119509,"byte_end":119512,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119517,"byte_end":119588,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119593,"byte_end":119596,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119601,"byte_end":119612,"line_start":653,"line_end":653,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119617,"byte_end":119641,"line_start":654,"line_end":654,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119646,"byte_end":119691,"line_start":655,"line_end":655,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119696,"byte_end":119699,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119704,"byte_end":119752,"line_start":657,"line_end":657,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119757,"byte_end":119782,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119787,"byte_end":119841,"line_start":659,"line_end":659,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119846,"byte_end":119878,"line_start":660,"line_end":660,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119883,"byte_end":119890,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":119895,"byte_end":119904,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121051,"byte_end":121064,"line_start":698,"line_end":698,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"pub fn read_i32_into<T: ByteOrder>(&mut Self, &mut [i32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 32 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120157,"byte_end":120223,"line_start":672,"line_end":672,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120228,"byte_end":120239,"line_start":673,"line_end":673,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120244,"byte_end":120247,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120252,"byte_end":120325,"line_start":675,"line_end":675,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120330,"byte_end":120397,"line_start":676,"line_end":676,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120402,"byte_end":120405,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120410,"byte_end":120422,"line_start":678,"line_end":678,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120427,"byte_end":120430,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120435,"byte_end":120499,"line_start":680,"line_end":680,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120504,"byte_end":120507,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120512,"byte_end":120604,"line_start":682,"line_end":682,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120609,"byte_end":120612,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120617,"byte_end":120631,"line_start":684,"line_end":684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120636,"byte_end":120639,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120644,"byte_end":120715,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120720,"byte_end":120723,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120728,"byte_end":120739,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120744,"byte_end":120768,"line_start":689,"line_end":689,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120773,"byte_end":120818,"line_start":690,"line_end":690,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120823,"byte_end":120826,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120831,"byte_end":120891,"line_start":692,"line_end":692,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120896,"byte_end":120921,"line_start":693,"line_end":693,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120926,"byte_end":120980,"line_start":694,"line_end":694,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":120985,"byte_end":121017,"line_start":695,"line_end":695,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121022,"byte_end":121029,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121034,"byte_end":121043,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122249,"byte_end":122262,"line_start":736,"line_end":736,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"pub fn read_i64_into<T: ByteOrder>(&mut Self, &mut [i64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 64 bit integers from the underlying","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121296,"byte_end":121362,"line_start":707,"line_end":707,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121367,"byte_end":121378,"line_start":708,"line_end":708,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121383,"byte_end":121386,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121391,"byte_end":121464,"line_start":710,"line_end":710,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121469,"byte_end":121536,"line_start":711,"line_end":711,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121541,"byte_end":121544,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121549,"byte_end":121561,"line_start":713,"line_end":713,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121566,"byte_end":121569,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121574,"byte_end":121638,"line_start":715,"line_end":715,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121643,"byte_end":121646,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121651,"byte_end":121743,"line_start":717,"line_end":717,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121748,"byte_end":121751,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121756,"byte_end":121770,"line_start":719,"line_end":719,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121775,"byte_end":121778,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 64 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121783,"byte_end":121854,"line_start":721,"line_end":721,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121859,"byte_end":121862,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121867,"byte_end":121878,"line_start":723,"line_end":723,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121883,"byte_end":121907,"line_start":724,"line_end":724,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121912,"byte_end":121957,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121962,"byte_end":121965,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":121970,"byte_end":122005,"line_start":727,"line_end":727,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122010,"byte_end":122041,"line_start":728,"line_end":728,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122046,"byte_end":122077,"line_start":729,"line_end":729,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122082,"byte_end":122089,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122094,"byte_end":122119,"line_start":731,"line_end":731,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122124,"byte_end":122178,"line_start":732,"line_end":732,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122183,"byte_end":122215,"line_start":733,"line_end":733,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122220,"byte_end":122227,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":122232,"byte_end":122241,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124854,"byte_end":124867,"line_start":819,"line_end":819,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"pub fn read_f32_into<T: ByteOrder>(&mut Self, &mut [f32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":123798,"byte_end":123865,"line_start":787,"line_end":787,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":123870,"byte_end":123915,"line_start":788,"line_end":788,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":123920,"byte_end":123923,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":123928,"byte_end":124001,"line_start":790,"line_end":790,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124006,"byte_end":124073,"line_start":791,"line_end":791,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124078,"byte_end":124081,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124086,"byte_end":124098,"line_start":793,"line_end":793,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124103,"byte_end":124106,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124111,"byte_end":124175,"line_start":795,"line_end":795,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124180,"byte_end":124183,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124188,"byte_end":124280,"line_start":797,"line_end":797,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124285,"byte_end":124288,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124293,"byte_end":124307,"line_start":799,"line_end":799,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124312,"byte_end":124315,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124320,"byte_end":124392,"line_start":801,"line_end":801,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124397,"byte_end":124415,"line_start":802,"line_end":802,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124420,"byte_end":124423,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124428,"byte_end":124439,"line_start":804,"line_end":804,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124444,"byte_end":124461,"line_start":805,"line_end":805,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124466,"byte_end":124490,"line_start":806,"line_end":806,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124495,"byte_end":124498,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124503,"byte_end":124548,"line_start":808,"line_end":808,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124553,"byte_end":124556,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124561,"byte_end":124596,"line_start":810,"line_end":810,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124601,"byte_end":124632,"line_start":811,"line_end":811,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124637,"byte_end":124668,"line_start":812,"line_end":812,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124673,"byte_end":124680,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124685,"byte_end":124712,"line_start":814,"line_end":814,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124717,"byte_end":124771,"line_start":815,"line_end":815,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124776,"byte_end":124820,"line_start":816,"line_end":816,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124825,"byte_end":124832,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":124837,"byte_end":124846,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126368,"byte_end":126391,"line_start":868,"line_end":868,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked<T: ByteOrder>(&mut Self, &mut [f32])\n-> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125122,"byte_end":125141,"line_start":831,"line_end":831,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125146,"byte_end":125149,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125154,"byte_end":125213,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125218,"byte_end":125221,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125226,"byte_end":125293,"line_start":835,"line_end":835,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125298,"byte_end":125343,"line_start":836,"line_end":836,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125348,"byte_end":125351,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125356,"byte_end":125429,"line_start":838,"line_end":838,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125434,"byte_end":125501,"line_start":839,"line_end":839,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125506,"byte_end":125509,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125514,"byte_end":125526,"line_start":841,"line_end":841,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125531,"byte_end":125534,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125539,"byte_end":125603,"line_start":843,"line_end":843,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125608,"byte_end":125611,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125616,"byte_end":125708,"line_start":845,"line_end":845,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125713,"byte_end":125716,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125721,"byte_end":125735,"line_start":847,"line_end":847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125740,"byte_end":125743,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125748,"byte_end":125820,"line_start":849,"line_end":849,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125825,"byte_end":125843,"line_start":850,"line_end":850,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125848,"byte_end":125851,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125856,"byte_end":125867,"line_start":852,"line_end":852,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125872,"byte_end":125889,"line_start":853,"line_end":853,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125894,"byte_end":125918,"line_start":854,"line_end":854,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125923,"byte_end":125926,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125931,"byte_end":125976,"line_start":856,"line_end":856,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125981,"byte_end":125984,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":125989,"byte_end":126024,"line_start":858,"line_end":858,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126029,"byte_end":126060,"line_start":859,"line_end":859,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126065,"byte_end":126096,"line_start":860,"line_end":860,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126101,"byte_end":126108,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126113,"byte_end":126140,"line_start":862,"line_end":862,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126145,"byte_end":126209,"line_start":863,"line_end":863,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126214,"byte_end":126258,"line_start":864,"line_end":864,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126263,"byte_end":126270,"line_start":865,"line_end":865,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126275,"byte_end":126284,"line_start":866,"line_end":866,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126289,"byte_end":126360,"line_start":867,"line_end":867,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127625,"byte_end":127638,"line_start":907,"line_end":907,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"pub fn read_f64_into<T: ByteOrder>(&mut Self, &mut [f64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126521,"byte_end":126588,"line_start":875,"line_end":875,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126593,"byte_end":126638,"line_start":876,"line_end":876,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126643,"byte_end":126646,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126651,"byte_end":126724,"line_start":878,"line_end":878,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126729,"byte_end":126796,"line_start":879,"line_end":879,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126801,"byte_end":126804,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126809,"byte_end":126821,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126826,"byte_end":126829,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126834,"byte_end":126898,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126903,"byte_end":126906,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":126911,"byte_end":127003,"line_start":885,"line_end":885,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127008,"byte_end":127011,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127016,"byte_end":127030,"line_start":887,"line_end":887,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127035,"byte_end":127038,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127043,"byte_end":127115,"line_start":889,"line_end":889,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127120,"byte_end":127138,"line_start":890,"line_end":890,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127143,"byte_end":127146,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127151,"byte_end":127162,"line_start":892,"line_end":892,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127167,"byte_end":127184,"line_start":893,"line_end":893,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127189,"byte_end":127213,"line_start":894,"line_end":894,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127218,"byte_end":127221,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127226,"byte_end":127271,"line_start":896,"line_end":896,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127276,"byte_end":127279,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127284,"byte_end":127319,"line_start":898,"line_end":898,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127324,"byte_end":127379,"line_start":899,"line_end":899,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127384,"byte_end":127439,"line_start":900,"line_end":900,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127444,"byte_end":127451,"line_start":901,"line_end":901,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127456,"byte_end":127483,"line_start":902,"line_end":902,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127488,"byte_end":127542,"line_start":903,"line_end":903,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127547,"byte_end":127591,"line_start":904,"line_end":904,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127596,"byte_end":127603,"line_start":905,"line_end":905,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127608,"byte_end":127617,"line_start":906,"line_end":906,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129438,"byte_end":129461,"line_start":962,"line_end":962,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked<T: ByteOrder>(&mut Self, &mut [f64])\n-> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127893,"byte_end":127912,"line_start":919,"line_end":919,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127917,"byte_end":127920,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127925,"byte_end":127984,"line_start":921,"line_end":921,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127989,"byte_end":127992,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":127997,"byte_end":128064,"line_start":923,"line_end":923,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128069,"byte_end":128114,"line_start":924,"line_end":924,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128119,"byte_end":128122,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128127,"byte_end":128200,"line_start":926,"line_end":926,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128205,"byte_end":128272,"line_start":927,"line_end":927,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128277,"byte_end":128280,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128285,"byte_end":128297,"line_start":929,"line_end":929,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128302,"byte_end":128305,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because there are no guarantees made about the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128310,"byte_end":128382,"line_start":931,"line_end":931,"column_start":5,"column_end":77}},{"value":"/ floating point values. In particular, this method does not check for","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128387,"byte_end":128459,"line_start":932,"line_end":932,"column_start":5,"column_end":77}},{"value":"/ signaling NaNs, which may result in undefined behavior.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128464,"byte_end":128523,"line_start":933,"line_end":933,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128528,"byte_end":128531,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128536,"byte_end":128548,"line_start":935,"line_end":935,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128553,"byte_end":128556,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128561,"byte_end":128625,"line_start":937,"line_end":937,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128630,"byte_end":128633,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128638,"byte_end":128730,"line_start":939,"line_end":939,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128735,"byte_end":128738,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128743,"byte_end":128757,"line_start":941,"line_end":941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128762,"byte_end":128765,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128770,"byte_end":128842,"line_start":943,"line_end":943,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128847,"byte_end":128865,"line_start":944,"line_end":944,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128870,"byte_end":128873,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128878,"byte_end":128889,"line_start":946,"line_end":946,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128894,"byte_end":128911,"line_start":947,"line_end":947,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128916,"byte_end":128940,"line_start":948,"line_end":948,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128945,"byte_end":128948,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":128953,"byte_end":128998,"line_start":950,"line_end":950,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129003,"byte_end":129006,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129011,"byte_end":129046,"line_start":952,"line_end":952,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129051,"byte_end":129106,"line_start":953,"line_end":953,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129111,"byte_end":129166,"line_start":954,"line_end":954,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129171,"byte_end":129178,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129183,"byte_end":129210,"line_start":956,"line_end":956,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129215,"byte_end":129279,"line_start":957,"line_end":957,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129284,"byte_end":129328,"line_start":958,"line_end":958,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129333,"byte_end":129340,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129345,"byte_end":129354,"line_start":960,"line_end":960,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129359,"byte_end":129430,"line_start":961,"line_end":961,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130513,"byte_end":130526,"line_start":996,"line_end":996,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Write`] with methods for writing numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129727,"byte_end":129799,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129800,"byte_end":129803,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129804,"byte_end":129882,"line_start":976,"line_end":976,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129883,"byte_end":129961,"line_start":977,"line_end":977,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129962,"byte_end":130032,"line_start":978,"line_end":978,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130033,"byte_end":130036,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130037,"byte_end":130051,"line_start":980,"line_end":980,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130052,"byte_end":130055,"line_start":981,"line_end":981,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130056,"byte_end":130117,"line_start":982,"line_end":982,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130118,"byte_end":130121,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130122,"byte_end":130133,"line_start":984,"line_end":984,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130134,"byte_end":130180,"line_start":985,"line_end":985,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130181,"byte_end":130184,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130185,"byte_end":130210,"line_start":987,"line_end":987,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130211,"byte_end":130256,"line_start":988,"line_end":988,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130257,"byte_end":130302,"line_start":989,"line_end":989,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130303,"byte_end":130341,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130342,"byte_end":130349,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130350,"byte_end":130353,"line_start":992,"line_end":992,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130354,"byte_end":130392,"line_start":993,"line_end":993,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130393,"byte_end":130437,"line_start":994,"line_end":994,"column_start":1,"column_end":45}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130438,"byte_end":130502,"line_start":995,"line_end":995,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130971,"byte_end":130979,"line_start":1008,"line_end":1008,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130544,"byte_end":130606,"line_start":997,"line_end":997,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130611,"byte_end":130614,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130619,"byte_end":130691,"line_start":999,"line_end":999,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130696,"byte_end":130742,"line_start":1000,"line_end":1000,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130747,"byte_end":130750,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130755,"byte_end":130767,"line_start":1002,"line_end":1002,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130772,"byte_end":130775,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130780,"byte_end":130844,"line_start":1004,"line_end":1004,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130849,"byte_end":130852,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130857,"byte_end":130949,"line_start":1006,"line_end":1006,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130954,"byte_end":130963,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131478,"byte_end":131486,"line_start":1023,"line_end":1023,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131054,"byte_end":131113,"line_start":1012,"line_end":1012,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131118,"byte_end":131121,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131126,"byte_end":131198,"line_start":1014,"line_end":1014,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131203,"byte_end":131249,"line_start":1015,"line_end":1015,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131254,"byte_end":131257,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131262,"byte_end":131274,"line_start":1017,"line_end":1017,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131279,"byte_end":131282,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131287,"byte_end":131351,"line_start":1019,"line_end":1019,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131356,"byte_end":131359,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131364,"byte_end":131456,"line_start":1021,"line_end":1021,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131461,"byte_end":131470,"line_start":1022,"line_end":1022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131859,"byte_end":131868,"line_start":1035,"line_end":1035,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131567,"byte_end":131630,"line_start":1027,"line_end":1027,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131635,"byte_end":131638,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131643,"byte_end":131655,"line_start":1029,"line_end":1029,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131660,"byte_end":131663,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131668,"byte_end":131732,"line_start":1031,"line_end":1031,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131737,"byte_end":131740,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131745,"byte_end":131837,"line_start":1033,"line_end":1033,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":131842,"byte_end":131851,"line_start":1034,"line_end":1034,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132312,"byte_end":132321,"line_start":1049,"line_end":1049,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132023,"byte_end":132083,"line_start":1041,"line_end":1041,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132088,"byte_end":132091,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132096,"byte_end":132108,"line_start":1043,"line_end":1043,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132113,"byte_end":132116,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132121,"byte_end":132185,"line_start":1045,"line_end":1045,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132190,"byte_end":132193,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132198,"byte_end":132290,"line_start":1047,"line_end":1047,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132295,"byte_end":132304,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132768,"byte_end":132777,"line_start":1063,"line_end":1063,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"pub fn write_u24<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132476,"byte_end":132539,"line_start":1055,"line_end":1055,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132544,"byte_end":132547,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132552,"byte_end":132564,"line_start":1057,"line_end":1057,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132569,"byte_end":132572,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132577,"byte_end":132641,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132646,"byte_end":132649,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132654,"byte_end":132746,"line_start":1061,"line_end":1061,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132751,"byte_end":132760,"line_start":1062,"line_end":1062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133221,"byte_end":133230,"line_start":1077,"line_end":1077,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"pub fn write_i24<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132932,"byte_end":132992,"line_start":1069,"line_end":1069,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":132997,"byte_end":133000,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133005,"byte_end":133017,"line_start":1071,"line_end":1071,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133022,"byte_end":133025,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133030,"byte_end":133094,"line_start":1073,"line_end":1073,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133099,"byte_end":133102,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133107,"byte_end":133199,"line_start":1075,"line_end":1075,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133204,"byte_end":133213,"line_start":1076,"line_end":1076,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133677,"byte_end":133686,"line_start":1091,"line_end":1091,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133385,"byte_end":133448,"line_start":1083,"line_end":1083,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133453,"byte_end":133456,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133461,"byte_end":133473,"line_start":1085,"line_end":1085,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133478,"byte_end":133481,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133486,"byte_end":133550,"line_start":1087,"line_end":1087,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133555,"byte_end":133558,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133563,"byte_end":133655,"line_start":1089,"line_end":1089,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133660,"byte_end":133669,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134130,"byte_end":134139,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133841,"byte_end":133901,"line_start":1097,"line_end":1097,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133906,"byte_end":133909,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133914,"byte_end":133926,"line_start":1099,"line_end":1099,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133931,"byte_end":133934,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":133939,"byte_end":134003,"line_start":1101,"line_end":1101,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134008,"byte_end":134011,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134016,"byte_end":134108,"line_start":1103,"line_end":1103,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134113,"byte_end":134122,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134586,"byte_end":134595,"line_start":1119,"line_end":1119,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134294,"byte_end":134357,"line_start":1111,"line_end":1111,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134362,"byte_end":134365,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134370,"byte_end":134382,"line_start":1113,"line_end":1113,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134387,"byte_end":134390,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134395,"byte_end":134459,"line_start":1115,"line_end":1115,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134464,"byte_end":134467,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134472,"byte_end":134564,"line_start":1117,"line_end":1117,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134569,"byte_end":134578,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135039,"byte_end":135048,"line_start":1133,"line_end":1133,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134750,"byte_end":134810,"line_start":1125,"line_end":1125,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134815,"byte_end":134818,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134823,"byte_end":134835,"line_start":1127,"line_end":1127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134840,"byte_end":134843,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134848,"byte_end":134912,"line_start":1129,"line_end":1129,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134917,"byte_end":134920,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":134925,"byte_end":135017,"line_start":1131,"line_end":1131,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135022,"byte_end":135031,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136237,"byte_end":136247,"line_start":1170,"line_end":1170,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135766,"byte_end":135830,"line_start":1157,"line_end":1157,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135835,"byte_end":135838,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135843,"byte_end":135855,"line_start":1159,"line_end":1159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135860,"byte_end":135863,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135868,"byte_end":135932,"line_start":1161,"line_end":1161,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135937,"byte_end":135940,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":135945,"byte_end":136037,"line_start":1163,"line_end":1163,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136042,"byte_end":136045,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136050,"byte_end":136062,"line_start":1165,"line_end":1165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136067,"byte_end":136070,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136075,"byte_end":136150,"line_start":1167,"line_end":1167,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136155,"byte_end":136215,"line_start":1168,"line_end":1168,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136220,"byte_end":136229,"line_start":1169,"line_end":1169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136936,"byte_end":136945,"line_start":1193,"line_end":1193,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136468,"byte_end":136529,"line_start":1180,"line_end":1180,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136534,"byte_end":136537,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136542,"byte_end":136554,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136559,"byte_end":136562,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136567,"byte_end":136631,"line_start":1184,"line_end":1184,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136636,"byte_end":136639,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136644,"byte_end":136736,"line_start":1186,"line_end":1186,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136741,"byte_end":136744,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136749,"byte_end":136761,"line_start":1188,"line_end":1188,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136766,"byte_end":136769,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136774,"byte_end":136849,"line_start":1190,"line_end":1190,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136854,"byte_end":136914,"line_start":1191,"line_end":1191,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":136919,"byte_end":136928,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138508,"byte_end":138517,"line_start":1244,"line_end":1244,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138176,"byte_end":138248,"line_start":1235,"line_end":1235,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138253,"byte_end":138279,"line_start":1236,"line_end":1236,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138284,"byte_end":138287,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138292,"byte_end":138304,"line_start":1238,"line_end":1238,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138309,"byte_end":138312,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138317,"byte_end":138381,"line_start":1240,"line_end":1240,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138386,"byte_end":138389,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138394,"byte_end":138486,"line_start":1242,"line_end":1242,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138491,"byte_end":138500,"line_start":1243,"line_end":1243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138797,"byte_end":138806,"line_start":1253,"line_end":1253,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138672,"byte_end":138744,"line_start":1250,"line_end":1250,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138749,"byte_end":138775,"line_start":1251,"line_end":1251,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":138780,"byte_end":138789,"line_start":1252,"line_end":1252,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4266,"byte_end":4272,"line_start":170,"line_end":170,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[{"value":"/ Sealed stops crates other than byteorder from implementing any traits","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4157,"byte_end":4230,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ that use it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4235,"byte_end":4251,"line_start":169,"line_end":169,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5520,"byte_end":5529,"line_start":210,"line_end":210,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ `ByteOrder` describes types that can serialize integers as bytes.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4361,"byte_end":4430,"line_start":175,"line_end":175,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4431,"byte_end":4434,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4435,"byte_end":4508,"line_start":177,"line_end":177,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4509,"byte_end":4574,"line_start":178,"line_end":178,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4575,"byte_end":4635,"line_start":179,"line_end":179,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4636,"byte_end":4639,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: [`BigEndian`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4640,"byte_end":4715,"line_start":181,"line_end":181,"column_start":1,"column_end":76}},{"value":"/ and [`LittleEndian`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4716,"byte_end":4741,"line_start":182,"line_end":182,"column_start":1,"column_end":26}},{"value":"/ This trait is sealed and cannot be implemented for callers to avoid","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4742,"byte_end":4813,"line_start":183,"line_end":183,"column_start":1,"column_end":72}},{"value":"/ breaking backwards compatibility when adding new derived traits.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4814,"byte_end":4882,"line_start":184,"line_end":184,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4883,"byte_end":4886,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4887,"byte_end":4901,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4902,"byte_end":4905,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4906,"byte_end":4962,"line_start":188,"line_end":188,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4963,"byte_end":4966,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4967,"byte_end":4978,"line_start":190,"line_end":190,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4979,"byte_end":5024,"line_start":191,"line_end":191,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5025,"byte_end":5028,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5029,"byte_end":5054,"line_start":193,"line_end":193,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5055,"byte_end":5104,"line_start":194,"line_end":194,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5105,"byte_end":5161,"line_start":195,"line_end":195,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5162,"byte_end":5169,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5170,"byte_end":5173,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5174,"byte_end":5227,"line_start":198,"line_end":198,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5228,"byte_end":5231,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5232,"byte_end":5243,"line_start":200,"line_end":200,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5244,"byte_end":5286,"line_start":201,"line_end":201,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5287,"byte_end":5290,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5291,"byte_end":5316,"line_start":203,"line_end":203,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5317,"byte_end":5361,"line_start":204,"line_end":204,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, BigEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5362,"byte_end":5413,"line_start":205,"line_end":205,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5414,"byte_end":5421,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5422,"byte_end":5425,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5426,"byte_end":5464,"line_start":208,"line_end":208,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5465,"byte_end":5509,"line_start":209,"line_end":209,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5764,"byte_end":5772,"line_start":219,"line_end":219,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5638,"byte_end":5686,"line_start":214,"line_end":214,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5691,"byte_end":5694,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5699,"byte_end":5711,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5716,"byte_end":5719,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5724,"byte_end":5756,"line_start":218,"line_end":218,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6281,"byte_end":6289,"line_start":238,"line_end":238,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"pub fn read_u24(&[u8]) -> u32","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from `buf`, stored in u32.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5798,"byte_end":5861,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5866,"byte_end":5869,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5874,"byte_end":5886,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5891,"byte_end":5894,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5899,"byte_end":5931,"line_start":225,"line_end":225,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5936,"byte_end":5939,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5944,"byte_end":5958,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5963,"byte_end":5966,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5971,"byte_end":6034,"line_start":229,"line_end":229,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6039,"byte_end":6042,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6047,"byte_end":6058,"line_start":231,"line_end":231,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6063,"byte_end":6108,"line_start":232,"line_end":232,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6113,"byte_end":6116,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6121,"byte_end":6146,"line_start":234,"line_end":234,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6151,"byte_end":6200,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6205,"byte_end":6261,"line_start":236,"line_end":236,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6266,"byte_end":6273,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6822,"byte_end":6830,"line_start":259,"line_end":259,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6361,"byte_end":6409,"line_start":242,"line_end":242,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6414,"byte_end":6417,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6422,"byte_end":6434,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6439,"byte_end":6442,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6447,"byte_end":6479,"line_start":246,"line_end":246,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6484,"byte_end":6487,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6492,"byte_end":6506,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6511,"byte_end":6514,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6519,"byte_end":6575,"line_start":250,"line_end":250,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6580,"byte_end":6583,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6588,"byte_end":6599,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6604,"byte_end":6649,"line_start":253,"line_end":253,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6654,"byte_end":6657,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6662,"byte_end":6687,"line_start":255,"line_end":255,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6692,"byte_end":6741,"line_start":256,"line_end":256,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6746,"byte_end":6802,"line_start":257,"line_end":257,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6807,"byte_end":6814,"line_start":258,"line_end":258,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7317,"byte_end":7325,"line_start":278,"line_end":278,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6856,"byte_end":6904,"line_start":261,"line_end":261,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6909,"byte_end":6912,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6917,"byte_end":6929,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6934,"byte_end":6937,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6942,"byte_end":6974,"line_start":265,"line_end":265,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6979,"byte_end":6982,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":6987,"byte_end":7001,"line_start":267,"line_end":267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7006,"byte_end":7009,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7014,"byte_end":7070,"line_start":269,"line_end":269,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7075,"byte_end":7078,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7083,"byte_end":7094,"line_start":271,"line_end":271,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7099,"byte_end":7144,"line_start":272,"line_end":272,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7149,"byte_end":7152,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7157,"byte_end":7182,"line_start":274,"line_end":274,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7187,"byte_end":7236,"line_start":275,"line_end":275,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7241,"byte_end":7297,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7302,"byte_end":7309,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8400,"byte_end":8409,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7883,"byte_end":7932,"line_start":300,"line_end":300,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7937,"byte_end":7940,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7945,"byte_end":7957,"line_start":302,"line_end":302,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7962,"byte_end":7965,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":7970,"byte_end":8017,"line_start":304,"line_end":304,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8022,"byte_end":8046,"line_start":305,"line_end":305,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8051,"byte_end":8054,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8059,"byte_end":8073,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8078,"byte_end":8081,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8086,"byte_end":8145,"line_start":309,"line_end":309,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8150,"byte_end":8153,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8158,"byte_end":8169,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8174,"byte_end":8219,"line_start":312,"line_end":312,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8224,"byte_end":8227,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8232,"byte_end":8257,"line_start":314,"line_end":314,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8262,"byte_end":8315,"line_start":315,"line_end":315,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8320,"byte_end":8380,"line_start":316,"line_end":316,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":8385,"byte_end":8392,"line_start":317,"line_end":317,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9521,"byte_end":9530,"line_start":358,"line_end":358,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9057,"byte_end":9108,"line_start":341,"line_end":341,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9113,"byte_end":9116,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9121,"byte_end":9133,"line_start":343,"line_end":343,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9138,"byte_end":9141,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9146,"byte_end":9178,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9183,"byte_end":9186,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9191,"byte_end":9205,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9210,"byte_end":9213,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9218,"byte_end":9274,"line_start":349,"line_end":349,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9279,"byte_end":9282,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9287,"byte_end":9298,"line_start":351,"line_end":351,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9303,"byte_end":9348,"line_start":352,"line_end":352,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9353,"byte_end":9356,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9361,"byte_end":9386,"line_start":354,"line_end":354,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u16(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9391,"byte_end":9440,"line_start":355,"line_end":355,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u16(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9445,"byte_end":9501,"line_start":356,"line_end":356,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9506,"byte_end":9513,"line_start":357,"line_end":357,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10047,"byte_end":10056,"line_start":377,"line_end":377,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"pub fn write_u24(&mut [u8], u32)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9561,"byte_end":9627,"line_start":360,"line_end":360,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9632,"byte_end":9635,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9640,"byte_end":9652,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9657,"byte_end":9660,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9665,"byte_end":9697,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9702,"byte_end":9705,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9710,"byte_end":9724,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9729,"byte_end":9732,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9737,"byte_end":9800,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9805,"byte_end":9808,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9813,"byte_end":9824,"line_start":370,"line_end":370,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9829,"byte_end":9874,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9879,"byte_end":9882,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9887,"byte_end":9912,"line_start":373,"line_end":373,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9917,"byte_end":9966,"line_start":374,"line_end":374,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":9971,"byte_end":10027,"line_start":375,"line_end":375,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10032,"byte_end":10039,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10601,"byte_end":10610,"line_start":398,"line_end":398,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10137,"byte_end":10188,"line_start":381,"line_end":381,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10193,"byte_end":10196,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10201,"byte_end":10213,"line_start":383,"line_end":383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10218,"byte_end":10221,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10226,"byte_end":10258,"line_start":385,"line_end":385,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10263,"byte_end":10266,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10271,"byte_end":10285,"line_start":387,"line_end":387,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10290,"byte_end":10293,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10298,"byte_end":10354,"line_start":389,"line_end":389,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10359,"byte_end":10362,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10367,"byte_end":10378,"line_start":391,"line_end":391,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10383,"byte_end":10428,"line_start":392,"line_end":392,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10433,"byte_end":10436,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10441,"byte_end":10466,"line_start":394,"line_end":394,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10471,"byte_end":10520,"line_start":395,"line_end":395,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10525,"byte_end":10581,"line_start":396,"line_end":396,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10586,"byte_end":10593,"line_start":397,"line_end":397,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11105,"byte_end":11114,"line_start":417,"line_end":417,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10641,"byte_end":10692,"line_start":400,"line_end":400,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10697,"byte_end":10700,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10705,"byte_end":10717,"line_start":402,"line_end":402,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10722,"byte_end":10725,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10730,"byte_end":10762,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10767,"byte_end":10770,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10775,"byte_end":10789,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10794,"byte_end":10797,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10802,"byte_end":10858,"line_start":408,"line_end":408,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10863,"byte_end":10866,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10871,"byte_end":10882,"line_start":410,"line_end":410,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10887,"byte_end":10932,"line_start":411,"line_end":411,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10937,"byte_end":10940,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10945,"byte_end":10970,"line_start":413,"line_end":413,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":10975,"byte_end":11024,"line_start":414,"line_end":414,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11029,"byte_end":11085,"line_start":415,"line_end":415,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11090,"byte_end":11097,"line_start":416,"line_end":416,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12244,"byte_end":12254,"line_start":457,"line_end":457,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11686,"byte_end":11750,"line_start":439,"line_end":439,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11755,"byte_end":11758,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11763,"byte_end":11775,"line_start":441,"line_end":441,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11780,"byte_end":11783,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11788,"byte_end":11862,"line_start":443,"line_end":443,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11867,"byte_end":11890,"line_start":444,"line_end":444,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11895,"byte_end":11898,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11903,"byte_end":11917,"line_start":446,"line_end":446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11922,"byte_end":11925,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11930,"byte_end":11989,"line_start":448,"line_end":448,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":11994,"byte_end":11997,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12002,"byte_end":12013,"line_start":450,"line_end":450,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12018,"byte_end":12063,"line_start":451,"line_end":451,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12068,"byte_end":12071,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12076,"byte_end":12101,"line_start":453,"line_end":453,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12106,"byte_end":12159,"line_start":454,"line_end":454,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12164,"byte_end":12224,"line_start":455,"line_end":455,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12229,"byte_end":12236,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13420,"byte_end":13428,"line_start":498,"line_end":498,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":12954,"byte_end":12999,"line_start":480,"line_end":480,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13004,"byte_end":13007,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13012,"byte_end":13024,"line_start":482,"line_end":482,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13029,"byte_end":13032,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13037,"byte_end":13069,"line_start":484,"line_end":484,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13074,"byte_end":13077,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13082,"byte_end":13096,"line_start":486,"line_end":486,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13101,"byte_end":13104,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13109,"byte_end":13165,"line_start":488,"line_end":488,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13170,"byte_end":13173,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13178,"byte_end":13189,"line_start":490,"line_end":490,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13194,"byte_end":13239,"line_start":491,"line_end":491,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13244,"byte_end":13247,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13252,"byte_end":13277,"line_start":493,"line_end":493,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13282,"byte_end":13328,"line_start":494,"line_end":494,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13333,"byte_end":13386,"line_start":495,"line_end":495,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13391,"byte_end":13398,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13403,"byte_end":13412,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13992,"byte_end":14000,"line_start":520,"line_end":520,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"pub fn read_i24(&[u8]) -> i32","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from `buf`, stored in i32.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13496,"byte_end":13556,"line_start":502,"line_end":502,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13561,"byte_end":13564,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13569,"byte_end":13581,"line_start":504,"line_end":504,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13586,"byte_end":13589,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13594,"byte_end":13626,"line_start":506,"line_end":506,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13631,"byte_end":13634,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13639,"byte_end":13653,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13658,"byte_end":13661,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13666,"byte_end":13729,"line_start":510,"line_end":510,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13734,"byte_end":13737,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13742,"byte_end":13753,"line_start":512,"line_end":512,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13758,"byte_end":13803,"line_start":513,"line_end":513,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13808,"byte_end":13811,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13816,"byte_end":13841,"line_start":515,"line_end":515,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13846,"byte_end":13896,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13901,"byte_end":13958,"line_start":517,"line_end":517,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13963,"byte_end":13970,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":13975,"byte_end":13984,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14545,"byte_end":14553,"line_start":542,"line_end":542,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14071,"byte_end":14116,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14121,"byte_end":14124,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14129,"byte_end":14141,"line_start":526,"line_end":526,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14146,"byte_end":14149,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14154,"byte_end":14186,"line_start":528,"line_end":528,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14191,"byte_end":14194,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14199,"byte_end":14213,"line_start":530,"line_end":530,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14218,"byte_end":14221,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14226,"byte_end":14282,"line_start":532,"line_end":532,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14287,"byte_end":14290,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14295,"byte_end":14306,"line_start":534,"line_end":534,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14311,"byte_end":14356,"line_start":535,"line_end":535,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14361,"byte_end":14364,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14369,"byte_end":14394,"line_start":537,"line_end":537,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14399,"byte_end":14449,"line_start":538,"line_end":538,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14454,"byte_end":14511,"line_start":539,"line_end":539,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14516,"byte_end":14523,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14528,"byte_end":14537,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15103,"byte_end":15111,"line_start":564,"line_end":564,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14621,"byte_end":14666,"line_start":546,"line_end":546,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14671,"byte_end":14674,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14679,"byte_end":14691,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14696,"byte_end":14699,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14704,"byte_end":14736,"line_start":550,"line_end":550,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14741,"byte_end":14744,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14749,"byte_end":14763,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14768,"byte_end":14771,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14776,"byte_end":14832,"line_start":554,"line_end":554,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14837,"byte_end":14840,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14845,"byte_end":14856,"line_start":556,"line_end":556,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14861,"byte_end":14906,"line_start":557,"line_end":557,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14911,"byte_end":14914,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14919,"byte_end":14944,"line_start":559,"line_end":559,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":14949,"byte_end":15003,"line_start":560,"line_end":560,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15008,"byte_end":15069,"line_start":561,"line_end":561,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15074,"byte_end":15081,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15086,"byte_end":15095,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16303,"byte_end":16311,"line_start":610,"line_end":610,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15776,"byte_end":15822,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15827,"byte_end":15830,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15835,"byte_end":15847,"line_start":593,"line_end":593,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15852,"byte_end":15855,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15860,"byte_end":15907,"line_start":595,"line_end":595,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15912,"byte_end":15936,"line_start":596,"line_end":596,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15941,"byte_end":15944,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15949,"byte_end":15963,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15968,"byte_end":15971,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":15976,"byte_end":16042,"line_start":600,"line_end":600,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16047,"byte_end":16050,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16055,"byte_end":16066,"line_start":602,"line_end":602,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16071,"byte_end":16116,"line_start":603,"line_end":603,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16121,"byte_end":16124,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16129,"byte_end":16154,"line_start":605,"line_end":605,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16159,"byte_end":16208,"line_start":606,"line_end":606,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16213,"byte_end":16269,"line_start":607,"line_end":607,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16274,"byte_end":16281,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":16286,"byte_end":16295,"line_start":609,"line_end":609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17609,"byte_end":17617,"line_start":657,"line_end":657,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17104,"byte_end":17173,"line_start":638,"line_end":638,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17178,"byte_end":17181,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17186,"byte_end":17198,"line_start":640,"line_end":640,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17203,"byte_end":17206,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17211,"byte_end":17243,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17248,"byte_end":17251,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17256,"byte_end":17270,"line_start":644,"line_end":644,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17275,"byte_end":17278,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17283,"byte_end":17339,"line_start":646,"line_end":646,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17344,"byte_end":17347,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17352,"byte_end":17363,"line_start":648,"line_end":648,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17368,"byte_end":17413,"line_start":649,"line_end":649,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17418,"byte_end":17421,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17426,"byte_end":17446,"line_start":651,"line_end":651,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17451,"byte_end":17476,"line_start":652,"line_end":652,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17481,"byte_end":17522,"line_start":653,"line_end":653,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17527,"byte_end":17575,"line_start":654,"line_end":654,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17580,"byte_end":17587,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17592,"byte_end":17601,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18237,"byte_end":18245,"line_start":680,"line_end":680,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17721,"byte_end":17790,"line_start":661,"line_end":661,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17795,"byte_end":17798,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17803,"byte_end":17815,"line_start":663,"line_end":663,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17820,"byte_end":17823,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17828,"byte_end":17860,"line_start":665,"line_end":665,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17865,"byte_end":17868,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17873,"byte_end":17887,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17892,"byte_end":17895,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17900,"byte_end":17956,"line_start":669,"line_end":669,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17961,"byte_end":17964,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17969,"byte_end":17980,"line_start":671,"line_end":671,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":17985,"byte_end":18030,"line_start":672,"line_end":672,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18035,"byte_end":18038,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18043,"byte_end":18070,"line_start":674,"line_end":674,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18075,"byte_end":18100,"line_start":675,"line_end":675,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18105,"byte_end":18148,"line_start":676,"line_end":676,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18153,"byte_end":18203,"line_start":677,"line_end":677,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18208,"byte_end":18215,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18220,"byte_end":18229,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18818,"byte_end":18827,"line_start":702,"line_end":702,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18349,"byte_end":18397,"line_start":684,"line_end":684,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18402,"byte_end":18405,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18410,"byte_end":18422,"line_start":686,"line_end":686,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18427,"byte_end":18430,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18435,"byte_end":18467,"line_start":688,"line_end":688,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18472,"byte_end":18475,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18480,"byte_end":18494,"line_start":690,"line_end":690,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18499,"byte_end":18502,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18507,"byte_end":18563,"line_start":692,"line_end":692,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18568,"byte_end":18571,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18576,"byte_end":18587,"line_start":694,"line_end":694,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18592,"byte_end":18637,"line_start":695,"line_end":695,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18642,"byte_end":18645,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18650,"byte_end":18675,"line_start":697,"line_end":697,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18680,"byte_end":18726,"line_start":698,"line_end":698,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18731,"byte_end":18784,"line_start":699,"line_end":699,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18789,"byte_end":18796,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18801,"byte_end":18810,"line_start":701,"line_end":701,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19403,"byte_end":19412,"line_start":724,"line_end":724,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"pub fn write_i24(&mut [u8], i32)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer `n` to `buf`, stored in i32.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18904,"byte_end":18967,"line_start":706,"line_end":706,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18972,"byte_end":18975,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18980,"byte_end":18992,"line_start":708,"line_end":708,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":18997,"byte_end":19000,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19005,"byte_end":19037,"line_start":710,"line_end":710,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19042,"byte_end":19045,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19050,"byte_end":19064,"line_start":712,"line_end":712,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19069,"byte_end":19072,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19077,"byte_end":19140,"line_start":714,"line_end":714,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19145,"byte_end":19148,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19153,"byte_end":19164,"line_start":716,"line_end":716,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19169,"byte_end":19214,"line_start":717,"line_end":717,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19219,"byte_end":19222,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19227,"byte_end":19252,"line_start":719,"line_end":719,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19257,"byte_end":19307,"line_start":720,"line_end":720,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19312,"byte_end":19369,"line_start":721,"line_end":721,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19374,"byte_end":19381,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19386,"byte_end":19395,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19969,"byte_end":19978,"line_start":746,"line_end":746,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19492,"byte_end":19540,"line_start":728,"line_end":728,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19545,"byte_end":19548,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19553,"byte_end":19565,"line_start":730,"line_end":730,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19570,"byte_end":19573,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19578,"byte_end":19610,"line_start":732,"line_end":732,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19615,"byte_end":19618,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19623,"byte_end":19637,"line_start":734,"line_end":734,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19642,"byte_end":19645,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19650,"byte_end":19706,"line_start":736,"line_end":736,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19711,"byte_end":19714,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19719,"byte_end":19730,"line_start":738,"line_end":738,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19735,"byte_end":19780,"line_start":739,"line_end":739,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19785,"byte_end":19788,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19793,"byte_end":19818,"line_start":741,"line_end":741,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19823,"byte_end":19873,"line_start":742,"line_end":742,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19878,"byte_end":19935,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19940,"byte_end":19947,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":19952,"byte_end":19961,"line_start":745,"line_end":745,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20540,"byte_end":20549,"line_start":768,"line_end":768,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20055,"byte_end":20103,"line_start":750,"line_end":750,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20108,"byte_end":20111,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20116,"byte_end":20128,"line_start":752,"line_end":752,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20133,"byte_end":20136,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20141,"byte_end":20173,"line_start":754,"line_end":754,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20178,"byte_end":20181,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20186,"byte_end":20200,"line_start":756,"line_end":756,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20205,"byte_end":20208,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20213,"byte_end":20269,"line_start":758,"line_end":758,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20274,"byte_end":20277,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20282,"byte_end":20293,"line_start":760,"line_end":760,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20298,"byte_end":20343,"line_start":761,"line_end":761,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20348,"byte_end":20351,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20356,"byte_end":20381,"line_start":763,"line_end":763,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20386,"byte_end":20440,"line_start":764,"line_end":764,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20445,"byte_end":20506,"line_start":765,"line_end":765,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20511,"byte_end":20518,"line_start":766,"line_end":766,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":20523,"byte_end":20532,"line_start":767,"line_end":767,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21804,"byte_end":21813,"line_start":814,"line_end":814,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21243,"byte_end":21304,"line_start":795,"line_end":795,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21309,"byte_end":21312,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21317,"byte_end":21329,"line_start":797,"line_end":797,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21334,"byte_end":21337,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21342,"byte_end":21416,"line_start":799,"line_end":799,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21421,"byte_end":21444,"line_start":800,"line_end":800,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21449,"byte_end":21452,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21457,"byte_end":21471,"line_start":802,"line_end":802,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21476,"byte_end":21479,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21484,"byte_end":21543,"line_start":804,"line_end":804,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21548,"byte_end":21551,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21556,"byte_end":21567,"line_start":806,"line_end":806,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21572,"byte_end":21617,"line_start":807,"line_end":807,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21622,"byte_end":21625,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21630,"byte_end":21655,"line_start":809,"line_end":809,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21660,"byte_end":21709,"line_start":810,"line_end":810,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21714,"byte_end":21770,"line_start":811,"line_end":811,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21775,"byte_end":21782,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":21787,"byte_end":21796,"line_start":813,"line_end":813,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23176,"byte_end":23185,"line_start":861,"line_end":861,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22670,"byte_end":22740,"line_start":842,"line_end":842,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22745,"byte_end":22748,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22753,"byte_end":22765,"line_start":844,"line_end":844,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22770,"byte_end":22773,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22778,"byte_end":22810,"line_start":846,"line_end":846,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22815,"byte_end":22818,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22823,"byte_end":22837,"line_start":848,"line_end":848,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22842,"byte_end":22845,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22850,"byte_end":22906,"line_start":850,"line_end":850,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22911,"byte_end":22914,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22919,"byte_end":22930,"line_start":852,"line_end":852,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22935,"byte_end":22980,"line_start":853,"line_end":853,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22985,"byte_end":22988,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":22993,"byte_end":23013,"line_start":855,"line_end":855,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23018,"byte_end":23043,"line_start":856,"line_end":856,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23048,"byte_end":23089,"line_start":857,"line_end":857,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23094,"byte_end":23142,"line_start":858,"line_end":858,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23147,"byte_end":23154,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23159,"byte_end":23168,"line_start":860,"line_end":860,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23834,"byte_end":23843,"line_start":885,"line_end":885,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23317,"byte_end":23387,"line_start":866,"line_end":866,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23392,"byte_end":23395,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23400,"byte_end":23412,"line_start":868,"line_end":868,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23417,"byte_end":23420,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23425,"byte_end":23457,"line_start":870,"line_end":870,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23462,"byte_end":23465,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23470,"byte_end":23484,"line_start":872,"line_end":872,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23489,"byte_end":23492,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23497,"byte_end":23553,"line_start":874,"line_end":874,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23558,"byte_end":23561,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23566,"byte_end":23577,"line_start":876,"line_end":876,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23582,"byte_end":23627,"line_start":877,"line_end":877,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23632,"byte_end":23635,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23640,"byte_end":23667,"line_start":879,"line_end":879,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23672,"byte_end":23697,"line_start":880,"line_end":880,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23702,"byte_end":23745,"line_start":881,"line_end":881,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23750,"byte_end":23800,"line_start":882,"line_end":882,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23805,"byte_end":23812,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23817,"byte_end":23826,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24618,"byte_end":24631,"line_start":911,"line_end":911,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"pub fn read_u16_into(&[u8], &mut [u16])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":23975,"byte_end":24032,"line_start":890,"line_end":890,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24037,"byte_end":24040,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24045,"byte_end":24057,"line_start":892,"line_end":892,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24062,"byte_end":24065,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 2*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24070,"byte_end":24113,"line_start":894,"line_end":894,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24118,"byte_end":24121,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24126,"byte_end":24140,"line_start":896,"line_end":896,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24145,"byte_end":24148,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24153,"byte_end":24209,"line_start":898,"line_end":898,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24214,"byte_end":24217,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24222,"byte_end":24233,"line_start":900,"line_end":900,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24238,"byte_end":24283,"line_start":901,"line_end":901,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24288,"byte_end":24291,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24296,"byte_end":24323,"line_start":903,"line_end":903,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24328,"byte_end":24375,"line_start":904,"line_end":904,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24380,"byte_end":24441,"line_start":905,"line_end":905,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24446,"byte_end":24449,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24454,"byte_end":24487,"line_start":907,"line_end":907,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24492,"byte_end":24550,"line_start":908,"line_end":908,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24555,"byte_end":24598,"line_start":909,"line_end":909,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24603,"byte_end":24610,"line_start":910,"line_end":910,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25311,"byte_end":25324,"line_start":934,"line_end":934,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24667,"byte_end":24724,"line_start":913,"line_end":913,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24729,"byte_end":24732,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24737,"byte_end":24749,"line_start":915,"line_end":915,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24754,"byte_end":24757,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24762,"byte_end":24805,"line_start":917,"line_end":917,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24810,"byte_end":24813,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24818,"byte_end":24832,"line_start":919,"line_end":919,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24837,"byte_end":24840,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24845,"byte_end":24901,"line_start":921,"line_end":921,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24906,"byte_end":24909,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24914,"byte_end":24925,"line_start":923,"line_end":923,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24930,"byte_end":24975,"line_start":924,"line_end":924,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24980,"byte_end":24983,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":24988,"byte_end":25016,"line_start":926,"line_end":926,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25021,"byte_end":25068,"line_start":927,"line_end":927,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25073,"byte_end":25134,"line_start":928,"line_end":928,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25139,"byte_end":25142,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25147,"byte_end":25180,"line_start":930,"line_end":930,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25185,"byte_end":25243,"line_start":931,"line_end":931,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25248,"byte_end":25291,"line_start":932,"line_end":932,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25296,"byte_end":25303,"line_start":933,"line_end":933,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26004,"byte_end":26017,"line_start":957,"line_end":957,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25360,"byte_end":25417,"line_start":936,"line_end":936,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25422,"byte_end":25425,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25430,"byte_end":25442,"line_start":938,"line_end":938,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25447,"byte_end":25450,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25455,"byte_end":25498,"line_start":940,"line_end":940,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25503,"byte_end":25506,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25511,"byte_end":25525,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25530,"byte_end":25533,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25538,"byte_end":25594,"line_start":944,"line_end":944,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25599,"byte_end":25602,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25607,"byte_end":25618,"line_start":946,"line_end":946,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25623,"byte_end":25668,"line_start":947,"line_end":947,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25673,"byte_end":25676,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25681,"byte_end":25709,"line_start":949,"line_end":949,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25714,"byte_end":25761,"line_start":950,"line_end":950,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25766,"byte_end":25827,"line_start":951,"line_end":951,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25832,"byte_end":25835,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25840,"byte_end":25873,"line_start":953,"line_end":953,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25878,"byte_end":25936,"line_start":954,"line_end":954,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25941,"byte_end":25984,"line_start":955,"line_end":955,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":25989,"byte_end":25996,"line_start":956,"line_end":956,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27435,"byte_end":27448,"line_start":1005,"line_end":1005,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"pub fn read_i16_into(&[u8], &mut [i16])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 16 bit integers from `src` to `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26782,"byte_end":26835,"line_start":983,"line_end":983,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26840,"byte_end":26843,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26848,"byte_end":26860,"line_start":985,"line_end":985,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26865,"byte_end":26868,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26873,"byte_end":26916,"line_start":987,"line_end":987,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26921,"byte_end":26924,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26929,"byte_end":26943,"line_start":989,"line_end":989,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26948,"byte_end":26951,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":26956,"byte_end":27012,"line_start":991,"line_end":991,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27017,"byte_end":27020,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27025,"byte_end":27036,"line_start":993,"line_end":993,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27041,"byte_end":27086,"line_start":994,"line_end":994,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27091,"byte_end":27094,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27099,"byte_end":27126,"line_start":996,"line_end":996,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27131,"byte_end":27178,"line_start":997,"line_end":997,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27183,"byte_end":27244,"line_start":998,"line_end":998,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27249,"byte_end":27252,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27257,"byte_end":27290,"line_start":1000,"line_end":1000,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27295,"byte_end":27353,"line_start":1001,"line_end":1001,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27358,"byte_end":27401,"line_start":1002,"line_end":1002,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27406,"byte_end":27413,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27418,"byte_end":27427,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28302,"byte_end":28315,"line_start":1034,"line_end":1034,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"pub fn read_i32_into(&[u8], &mut [i32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27646,"byte_end":27701,"line_start":1012,"line_end":1012,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27706,"byte_end":27709,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27714,"byte_end":27726,"line_start":1014,"line_end":1014,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27731,"byte_end":27734,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27739,"byte_end":27782,"line_start":1016,"line_end":1016,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27787,"byte_end":27790,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27795,"byte_end":27809,"line_start":1018,"line_end":1018,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27814,"byte_end":27817,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27822,"byte_end":27878,"line_start":1020,"line_end":1020,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27883,"byte_end":27886,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27891,"byte_end":27902,"line_start":1022,"line_end":1022,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27907,"byte_end":27952,"line_start":1023,"line_end":1023,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27957,"byte_end":27960,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27965,"byte_end":27993,"line_start":1025,"line_end":1025,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":27998,"byte_end":28045,"line_start":1026,"line_end":1026,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28050,"byte_end":28111,"line_start":1027,"line_end":1027,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28116,"byte_end":28119,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28124,"byte_end":28157,"line_start":1029,"line_end":1029,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28162,"byte_end":28220,"line_start":1030,"line_end":1030,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28225,"byte_end":28268,"line_start":1031,"line_end":1031,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28273,"byte_end":28280,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28285,"byte_end":28294,"line_start":1033,"line_end":1033,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":29170,"byte_end":29183,"line_start":1063,"line_end":1063,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"pub fn read_i64_into(&[u8], &mut [i64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28514,"byte_end":28569,"line_start":1041,"line_end":1041,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28574,"byte_end":28577,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28582,"byte_end":28594,"line_start":1043,"line_end":1043,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28599,"byte_end":28602,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28607,"byte_end":28650,"line_start":1045,"line_end":1045,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28655,"byte_end":28658,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28663,"byte_end":28677,"line_start":1047,"line_end":1047,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28682,"byte_end":28685,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28690,"byte_end":28746,"line_start":1049,"line_end":1049,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28751,"byte_end":28754,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28759,"byte_end":28770,"line_start":1051,"line_end":1051,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28775,"byte_end":28820,"line_start":1052,"line_end":1052,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28825,"byte_end":28828,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28833,"byte_end":28861,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28866,"byte_end":28913,"line_start":1055,"line_end":1055,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28918,"byte_end":28979,"line_start":1056,"line_end":1056,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28984,"byte_end":28987,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":28992,"byte_end":29025,"line_start":1058,"line_end":1058,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":29030,"byte_end":29088,"line_start":1059,"line_end":1059,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":29093,"byte_end":29136,"line_start":1060,"line_end":1060,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":29141,"byte_end":29148,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":29153,"byte_end":29162,"line_start":1062,"line_end":1062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31010,"byte_end":31033,"line_start":1123,"line_end":1123,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked(&[u8], &mut [f32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30288,"byte_end":30360,"line_start":1100,"line_end":1100,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30365,"byte_end":30386,"line_start":1101,"line_end":1101,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30391,"byte_end":30394,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30399,"byte_end":30411,"line_start":1103,"line_end":1103,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30416,"byte_end":30419,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30424,"byte_end":30467,"line_start":1105,"line_end":1105,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30472,"byte_end":30475,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30480,"byte_end":30494,"line_start":1107,"line_end":1107,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30499,"byte_end":30502,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30507,"byte_end":30563,"line_start":1109,"line_end":1109,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30568,"byte_end":30571,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30576,"byte_end":30587,"line_start":1111,"line_end":1111,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30592,"byte_end":30637,"line_start":1112,"line_end":1112,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30642,"byte_end":30645,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30650,"byte_end":30678,"line_start":1114,"line_end":1114,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30683,"byte_end":30741,"line_start":1115,"line_end":1115,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30746,"byte_end":30807,"line_start":1116,"line_end":1116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30812,"byte_end":30815,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30820,"byte_end":30855,"line_start":1118,"line_end":1118,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30860,"byte_end":30928,"line_start":1119,"line_end":1119,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30933,"byte_end":30976,"line_start":1120,"line_end":1120,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30981,"byte_end":30988,"line_start":1121,"line_end":1121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":30993,"byte_end":31002,"line_start":1122,"line_end":1122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31954,"byte_end":31977,"line_start":1153,"line_end":1153,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked(&[u8], &mut [f64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31232,"byte_end":31304,"line_start":1130,"line_end":1130,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31309,"byte_end":31330,"line_start":1131,"line_end":1131,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31335,"byte_end":31338,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31343,"byte_end":31355,"line_start":1133,"line_end":1133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31360,"byte_end":31363,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31368,"byte_end":31411,"line_start":1135,"line_end":1135,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31416,"byte_end":31419,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31424,"byte_end":31438,"line_start":1137,"line_end":1137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31443,"byte_end":31446,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31451,"byte_end":31507,"line_start":1139,"line_end":1139,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31512,"byte_end":31515,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31520,"byte_end":31531,"line_start":1141,"line_end":1141,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31536,"byte_end":31581,"line_start":1142,"line_end":1142,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31586,"byte_end":31589,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31594,"byte_end":31622,"line_start":1144,"line_end":1144,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31627,"byte_end":31685,"line_start":1145,"line_end":1145,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31690,"byte_end":31751,"line_start":1146,"line_end":1146,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31756,"byte_end":31759,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31764,"byte_end":31799,"line_start":1148,"line_end":1148,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31804,"byte_end":31872,"line_start":1149,"line_end":1149,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31877,"byte_end":31920,"line_start":1150,"line_end":1150,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31925,"byte_end":31932,"line_start":1151,"line_end":1151,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":31937,"byte_end":31946,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32820,"byte_end":32834,"line_start":1181,"line_end":1181,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"pub fn write_u16_into(&[u16], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32176,"byte_end":32234,"line_start":1160,"line_end":1160,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32239,"byte_end":32242,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32247,"byte_end":32259,"line_start":1162,"line_end":1162,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32264,"byte_end":32267,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 2*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32272,"byte_end":32315,"line_start":1164,"line_end":1164,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32320,"byte_end":32323,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32328,"byte_end":32342,"line_start":1166,"line_end":1166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32347,"byte_end":32350,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32355,"byte_end":32411,"line_start":1168,"line_end":1168,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32416,"byte_end":32419,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32424,"byte_end":32435,"line_start":1170,"line_end":1170,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32440,"byte_end":32485,"line_start":1171,"line_end":1171,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32490,"byte_end":32493,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32498,"byte_end":32525,"line_start":1173,"line_end":1173,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32530,"byte_end":32577,"line_start":1174,"line_end":1174,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32582,"byte_end":32643,"line_start":1175,"line_end":1175,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32648,"byte_end":32651,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32656,"byte_end":32689,"line_start":1177,"line_end":1177,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32694,"byte_end":32752,"line_start":1178,"line_end":1178,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32757,"byte_end":32800,"line_start":1179,"line_end":1179,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32805,"byte_end":32812,"line_start":1180,"line_end":1180,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33515,"byte_end":33529,"line_start":1204,"line_end":1204,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"pub fn write_u32_into(&[u32], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32870,"byte_end":32928,"line_start":1183,"line_end":1183,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32933,"byte_end":32936,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32941,"byte_end":32953,"line_start":1185,"line_end":1185,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32958,"byte_end":32961,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":32966,"byte_end":33009,"line_start":1187,"line_end":1187,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33014,"byte_end":33017,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33022,"byte_end":33036,"line_start":1189,"line_end":1189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33041,"byte_end":33044,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33049,"byte_end":33105,"line_start":1191,"line_end":1191,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33110,"byte_end":33113,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33118,"byte_end":33129,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33134,"byte_end":33179,"line_start":1194,"line_end":1194,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33184,"byte_end":33187,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33192,"byte_end":33220,"line_start":1196,"line_end":1196,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33225,"byte_end":33272,"line_start":1197,"line_end":1197,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33277,"byte_end":33338,"line_start":1198,"line_end":1198,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33343,"byte_end":33346,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33351,"byte_end":33384,"line_start":1200,"line_end":1200,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33389,"byte_end":33447,"line_start":1201,"line_end":1201,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33452,"byte_end":33495,"line_start":1202,"line_end":1202,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33500,"byte_end":33507,"line_start":1203,"line_end":1203,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34210,"byte_end":34224,"line_start":1227,"line_end":1227,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"pub fn write_u64_into(&[u64], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33565,"byte_end":33623,"line_start":1206,"line_end":1206,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33628,"byte_end":33631,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33636,"byte_end":33648,"line_start":1208,"line_end":1208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33653,"byte_end":33656,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33661,"byte_end":33704,"line_start":1210,"line_end":1210,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33709,"byte_end":33712,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33717,"byte_end":33731,"line_start":1212,"line_end":1212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33736,"byte_end":33739,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33744,"byte_end":33800,"line_start":1214,"line_end":1214,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33805,"byte_end":33808,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33813,"byte_end":33824,"line_start":1216,"line_end":1216,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33829,"byte_end":33874,"line_start":1217,"line_end":1217,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33879,"byte_end":33882,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33887,"byte_end":33915,"line_start":1219,"line_end":1219,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33920,"byte_end":33967,"line_start":1220,"line_end":1220,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":33972,"byte_end":34033,"line_start":1221,"line_end":1221,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34038,"byte_end":34041,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34046,"byte_end":34079,"line_start":1223,"line_end":1223,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34084,"byte_end":34142,"line_start":1224,"line_end":1224,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34147,"byte_end":34190,"line_start":1225,"line_end":1225,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34195,"byte_end":34202,"line_start":1226,"line_end":1226,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35633,"byte_end":35647,"line_start":1274,"line_end":1274,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"pub fn write_i16_into(&[i16], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":34991,"byte_end":35047,"line_start":1253,"line_end":1253,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35052,"byte_end":35055,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35060,"byte_end":35072,"line_start":1255,"line_end":1255,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35077,"byte_end":35080,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35085,"byte_end":35128,"line_start":1257,"line_end":1257,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35133,"byte_end":35136,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35141,"byte_end":35155,"line_start":1259,"line_end":1259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35160,"byte_end":35163,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35168,"byte_end":35224,"line_start":1261,"line_end":1261,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35229,"byte_end":35232,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35237,"byte_end":35248,"line_start":1263,"line_end":1263,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35253,"byte_end":35298,"line_start":1264,"line_end":1264,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35303,"byte_end":35306,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35311,"byte_end":35338,"line_start":1266,"line_end":1266,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35343,"byte_end":35390,"line_start":1267,"line_end":1267,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35395,"byte_end":35456,"line_start":1268,"line_end":1268,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35461,"byte_end":35464,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35469,"byte_end":35502,"line_start":1270,"line_end":1270,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35507,"byte_end":35565,"line_start":1271,"line_end":1271,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35570,"byte_end":35613,"line_start":1272,"line_end":1272,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35618,"byte_end":35625,"line_start":1273,"line_end":1273,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36484,"byte_end":36498,"line_start":1302,"line_end":1302,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"pub fn write_i32_into(&[i32], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35841,"byte_end":35897,"line_start":1281,"line_end":1281,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35902,"byte_end":35905,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35910,"byte_end":35922,"line_start":1283,"line_end":1283,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35927,"byte_end":35930,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35935,"byte_end":35978,"line_start":1285,"line_end":1285,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35983,"byte_end":35986,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":35991,"byte_end":36005,"line_start":1287,"line_end":1287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36010,"byte_end":36013,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36018,"byte_end":36074,"line_start":1289,"line_end":1289,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36079,"byte_end":36082,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36087,"byte_end":36098,"line_start":1291,"line_end":1291,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36103,"byte_end":36148,"line_start":1292,"line_end":1292,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36153,"byte_end":36156,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36161,"byte_end":36189,"line_start":1294,"line_end":1294,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36194,"byte_end":36241,"line_start":1295,"line_end":1295,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36246,"byte_end":36307,"line_start":1296,"line_end":1296,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36312,"byte_end":36315,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36320,"byte_end":36353,"line_start":1298,"line_end":1298,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36358,"byte_end":36416,"line_start":1299,"line_end":1299,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36421,"byte_end":36464,"line_start":1300,"line_end":1300,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36469,"byte_end":36476,"line_start":1301,"line_end":1301,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37335,"byte_end":37349,"line_start":1330,"line_end":1330,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"pub fn write_i64_into(&[i64], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36692,"byte_end":36748,"line_start":1309,"line_end":1309,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36753,"byte_end":36756,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36761,"byte_end":36773,"line_start":1311,"line_end":1311,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36778,"byte_end":36781,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36786,"byte_end":36829,"line_start":1313,"line_end":1313,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36834,"byte_end":36837,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36842,"byte_end":36856,"line_start":1315,"line_end":1315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36861,"byte_end":36864,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36869,"byte_end":36925,"line_start":1317,"line_end":1317,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36930,"byte_end":36933,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36938,"byte_end":36949,"line_start":1319,"line_end":1319,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":36954,"byte_end":36999,"line_start":1320,"line_end":1320,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37004,"byte_end":37007,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37012,"byte_end":37040,"line_start":1322,"line_end":1322,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37045,"byte_end":37092,"line_start":1323,"line_end":1323,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37097,"byte_end":37158,"line_start":1324,"line_end":1324,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37163,"byte_end":37166,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37171,"byte_end":37204,"line_start":1326,"line_end":1326,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37209,"byte_end":37267,"line_start":1327,"line_end":1327,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37272,"byte_end":37315,"line_start":1328,"line_end":1328,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":37320,"byte_end":37327,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39172,"byte_end":39186,"line_start":1390,"line_end":1390,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"pub fn write_f32_into(&[f32], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38432,"byte_end":38505,"line_start":1366,"line_end":1366,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38510,"byte_end":38531,"line_start":1367,"line_end":1367,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38536,"byte_end":38539,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38544,"byte_end":38556,"line_start":1369,"line_end":1369,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38561,"byte_end":38564,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38569,"byte_end":38612,"line_start":1371,"line_end":1371,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38617,"byte_end":38620,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38625,"byte_end":38639,"line_start":1373,"line_end":1373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38644,"byte_end":38647,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38652,"byte_end":38708,"line_start":1375,"line_end":1375,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38713,"byte_end":38716,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38721,"byte_end":38732,"line_start":1377,"line_end":1377,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38737,"byte_end":38782,"line_start":1378,"line_end":1378,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38787,"byte_end":38790,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38795,"byte_end":38823,"line_start":1380,"line_end":1380,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38828,"byte_end":38886,"line_start":1381,"line_end":1381,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38891,"byte_end":38952,"line_start":1382,"line_end":1382,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38957,"byte_end":38960,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":38965,"byte_end":39000,"line_start":1384,"line_end":1384,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39005,"byte_end":39017,"line_start":1385,"line_end":1385,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39022,"byte_end":39094,"line_start":1386,"line_end":1386,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39099,"byte_end":39104,"line_start":1387,"line_end":1387,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39109,"byte_end":39152,"line_start":1388,"line_end":1388,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39157,"byte_end":39164,"line_start":1389,"line_end":1389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40120,"byte_end":40134,"line_start":1421,"line_end":1421,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"pub fn write_f64_into(&[f64], &mut [u8])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 double-precision (8 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39380,"byte_end":39453,"line_start":1397,"line_end":1397,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39458,"byte_end":39479,"line_start":1398,"line_end":1398,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39484,"byte_end":39487,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39492,"byte_end":39504,"line_start":1400,"line_end":1400,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39509,"byte_end":39512,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39517,"byte_end":39560,"line_start":1402,"line_end":1402,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39565,"byte_end":39568,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39573,"byte_end":39587,"line_start":1404,"line_end":1404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39592,"byte_end":39595,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39600,"byte_end":39656,"line_start":1406,"line_end":1406,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39661,"byte_end":39664,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39669,"byte_end":39680,"line_start":1408,"line_end":1408,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39685,"byte_end":39730,"line_start":1409,"line_end":1409,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39735,"byte_end":39738,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39743,"byte_end":39771,"line_start":1411,"line_end":1411,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39776,"byte_end":39834,"line_start":1412,"line_end":1412,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39839,"byte_end":39900,"line_start":1413,"line_end":1413,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39905,"byte_end":39908,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39913,"byte_end":39948,"line_start":1415,"line_end":1415,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39953,"byte_end":39965,"line_start":1416,"line_end":1416,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":39970,"byte_end":40042,"line_start":1417,"line_end":1417,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40047,"byte_end":40052,"line_start":1418,"line_end":1418,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40057,"byte_end":40100,"line_start":1419,"line_end":1419,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40105,"byte_end":40112,"line_start":1420,"line_end":1420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40875,"byte_end":40889,"line_start":1445,"line_end":1445,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"pub fn from_slice_u16(&mut [u16])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 16 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40328,"byte_end":40400,"line_start":1428,"line_end":1428,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40405,"byte_end":40420,"line_start":1429,"line_end":1429,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40425,"byte_end":40428,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40433,"byte_end":40504,"line_start":1431,"line_end":1431,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40509,"byte_end":40529,"line_start":1432,"line_end":1432,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40534,"byte_end":40537,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40542,"byte_end":40556,"line_start":1434,"line_end":1434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40561,"byte_end":40564,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40569,"byte_end":40626,"line_start":1436,"line_end":1436,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40631,"byte_end":40634,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40639,"byte_end":40650,"line_start":1438,"line_end":1438,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40655,"byte_end":40697,"line_start":1439,"line_end":1439,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40702,"byte_end":40705,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40710,"byte_end":40743,"line_start":1441,"line_end":1441,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u16(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40748,"byte_end":40792,"line_start":1442,"line_end":1442,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40797,"byte_end":40855,"line_start":1443,"line_end":1443,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40860,"byte_end":40867,"line_start":1444,"line_end":1444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41464,"byte_end":41478,"line_start":1464,"line_end":1464,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"pub fn from_slice_u32(&mut [u32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 32 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40917,"byte_end":40989,"line_start":1447,"line_end":1447,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":40994,"byte_end":41009,"line_start":1448,"line_end":1448,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41014,"byte_end":41017,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41022,"byte_end":41093,"line_start":1450,"line_end":1450,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41098,"byte_end":41118,"line_start":1451,"line_end":1451,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41123,"byte_end":41126,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41131,"byte_end":41145,"line_start":1453,"line_end":1453,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41150,"byte_end":41153,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41158,"byte_end":41215,"line_start":1455,"line_end":1455,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41220,"byte_end":41223,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41228,"byte_end":41239,"line_start":1457,"line_end":1457,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41244,"byte_end":41286,"line_start":1458,"line_end":1458,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41291,"byte_end":41294,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41299,"byte_end":41332,"line_start":1460,"line_end":1460,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u32(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41337,"byte_end":41381,"line_start":1461,"line_end":1461,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41386,"byte_end":41444,"line_start":1462,"line_end":1462,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41449,"byte_end":41456,"line_start":1463,"line_end":1463,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42053,"byte_end":42067,"line_start":1483,"line_end":1483,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"pub fn from_slice_u64(&mut [u64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 64 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41506,"byte_end":41578,"line_start":1466,"line_end":1466,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41583,"byte_end":41598,"line_start":1467,"line_end":1467,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41603,"byte_end":41606,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41611,"byte_end":41682,"line_start":1469,"line_end":1469,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41687,"byte_end":41707,"line_start":1470,"line_end":1470,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41712,"byte_end":41715,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41720,"byte_end":41734,"line_start":1472,"line_end":1472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41739,"byte_end":41742,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41747,"byte_end":41804,"line_start":1474,"line_end":1474,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41809,"byte_end":41812,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41817,"byte_end":41828,"line_start":1476,"line_end":1476,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41833,"byte_end":41875,"line_start":1477,"line_end":1477,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41880,"byte_end":41883,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41888,"byte_end":41921,"line_start":1479,"line_end":1479,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u64(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41926,"byte_end":41970,"line_start":1480,"line_end":1480,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":41975,"byte_end":42033,"line_start":1481,"line_end":1481,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42038,"byte_end":42045,"line_start":1482,"line_end":1482,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43278,"byte_end":43292,"line_start":1523,"line_end":1523,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"pub fn from_slice_i16(&mut [i16])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 16 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42719,"byte_end":42789,"line_start":1505,"line_end":1505,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42794,"byte_end":42809,"line_start":1506,"line_end":1506,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42814,"byte_end":42817,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42822,"byte_end":42893,"line_start":1508,"line_end":1508,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42898,"byte_end":42918,"line_start":1509,"line_end":1509,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42923,"byte_end":42926,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42931,"byte_end":42945,"line_start":1511,"line_end":1511,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42950,"byte_end":42953,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":42958,"byte_end":43015,"line_start":1513,"line_end":1513,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43020,"byte_end":43023,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43028,"byte_end":43039,"line_start":1515,"line_end":1515,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43044,"byte_end":43086,"line_start":1516,"line_end":1516,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43091,"byte_end":43094,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43099,"byte_end":43132,"line_start":1518,"line_end":1518,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i16(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43137,"byte_end":43181,"line_start":1519,"line_end":1519,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i16.to_be(), 65000i16.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43186,"byte_end":43244,"line_start":1520,"line_end":1520,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43249,"byte_end":43256,"line_start":1521,"line_end":1521,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43261,"byte_end":43270,"line_start":1522,"line_end":1522,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44030,"byte_end":44044,"line_start":1548,"line_end":1548,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"pub fn from_slice_i32(&mut [i32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 32 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43471,"byte_end":43541,"line_start":1530,"line_end":1530,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43546,"byte_end":43561,"line_start":1531,"line_end":1531,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43566,"byte_end":43569,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43574,"byte_end":43645,"line_start":1533,"line_end":1533,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43650,"byte_end":43670,"line_start":1534,"line_end":1534,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43675,"byte_end":43678,"line_start":1535,"line_end":1535,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43683,"byte_end":43697,"line_start":1536,"line_end":1536,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43702,"byte_end":43705,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43710,"byte_end":43767,"line_start":1538,"line_end":1538,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43772,"byte_end":43775,"line_start":1539,"line_end":1539,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43780,"byte_end":43791,"line_start":1540,"line_end":1540,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43796,"byte_end":43838,"line_start":1541,"line_end":1541,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43843,"byte_end":43846,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43851,"byte_end":43884,"line_start":1543,"line_end":1543,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i32(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43889,"byte_end":43933,"line_start":1544,"line_end":1544,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":43938,"byte_end":43996,"line_start":1545,"line_end":1545,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44001,"byte_end":44008,"line_start":1546,"line_end":1546,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44013,"byte_end":44022,"line_start":1547,"line_end":1547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44782,"byte_end":44796,"line_start":1573,"line_end":1573,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"pub fn from_slice_i64(&mut [i64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 64 bit integers to a particular","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44223,"byte_end":44293,"line_start":1555,"line_end":1555,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44298,"byte_end":44313,"line_start":1556,"line_end":1556,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44318,"byte_end":44321,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44326,"byte_end":44397,"line_start":1558,"line_end":1558,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44402,"byte_end":44422,"line_start":1559,"line_end":1559,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44427,"byte_end":44430,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44435,"byte_end":44449,"line_start":1561,"line_end":1561,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44454,"byte_end":44457,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44462,"byte_end":44519,"line_start":1563,"line_end":1563,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44524,"byte_end":44527,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44532,"byte_end":44543,"line_start":1565,"line_end":1565,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44548,"byte_end":44590,"line_start":1566,"line_end":1566,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44595,"byte_end":44598,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44603,"byte_end":44636,"line_start":1568,"line_end":1568,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i64(&mut numbers);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44641,"byte_end":44685,"line_start":1569,"line_end":1569,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44690,"byte_end":44748,"line_start":1570,"line_end":1570,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44753,"byte_end":44760,"line_start":1571,"line_end":1571,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":44765,"byte_end":44774,"line_start":1572,"line_end":1572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46006,"byte_end":46020,"line_start":1611,"line_end":1611,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"pub fn from_slice_f32(&mut [f32])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":45764,"byte_end":45839,"line_start":1606,"line_end":1606,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":45844,"byte_end":45889,"line_start":1607,"line_end":1607,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":45894,"byte_end":45897,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":45902,"byte_end":45973,"line_start":1609,"line_end":1609,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":45978,"byte_end":45998,"line_start":1610,"line_end":1610,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46290,"byte_end":46304,"line_start":1618,"line_end":1618,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"pub fn from_slice_f64(&mut [f64])","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46048,"byte_end":46123,"line_start":1613,"line_end":1613,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46128,"byte_end":46173,"line_start":1614,"line_end":1614,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46178,"byte_end":46181,"line_start":1615,"line_end":1615,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46186,"byte_end":46257,"line_start":1616,"line_end":1616,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46262,"byte_end":46282,"line_start":1617,"line_end":1617,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46815,"byte_end":46824,"line_start":1638,"line_end":1638,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46330,"byte_end":46367,"line_start":1621,"line_end":1621,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46368,"byte_end":46371,"line_start":1622,"line_end":1622,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46372,"byte_end":46446,"line_start":1623,"line_end":1623,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46447,"byte_end":46462,"line_start":1624,"line_end":1624,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46463,"byte_end":46466,"line_start":1625,"line_end":1625,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46467,"byte_end":46481,"line_start":1626,"line_end":1626,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46482,"byte_end":46485,"line_start":1627,"line_end":1627,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in big endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46486,"byte_end":46539,"line_start":1628,"line_end":1628,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46540,"byte_end":46543,"line_start":1629,"line_end":1629,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46544,"byte_end":46555,"line_start":1630,"line_end":1630,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46556,"byte_end":46598,"line_start":1631,"line_end":1631,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46599,"byte_end":46602,"line_start":1632,"line_end":1632,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46603,"byte_end":46628,"line_start":1633,"line_end":1633,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46629,"byte_end":46675,"line_start":1634,"line_end":1634,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(1_000_000, BigEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46676,"byte_end":46729,"line_start":1635,"line_end":1635,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46730,"byte_end":46737,"line_start":1636,"line_end":1636,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47023,"byte_end":47025,"line_start":1649,"line_end":1649,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`BigEndian`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46935,"byte_end":46970,"line_start":1646,"line_end":1646,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46971,"byte_end":46974,"line_start":1647,"line_end":1647,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46975,"byte_end":47013,"line_start":1648,"line_end":1648,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47540,"byte_end":47552,"line_start":1668,"line_end":1668,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47040,"byte_end":47080,"line_start":1651,"line_end":1651,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47081,"byte_end":47084,"line_start":1652,"line_end":1652,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47085,"byte_end":47159,"line_start":1653,"line_end":1653,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47160,"byte_end":47175,"line_start":1654,"line_end":1654,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47176,"byte_end":47179,"line_start":1655,"line_end":1655,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47180,"byte_end":47194,"line_start":1656,"line_end":1656,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47195,"byte_end":47198,"line_start":1657,"line_end":1657,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47199,"byte_end":47255,"line_start":1658,"line_end":1658,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47256,"byte_end":47259,"line_start":1659,"line_end":1659,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47260,"byte_end":47271,"line_start":1660,"line_end":1660,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47272,"byte_end":47317,"line_start":1661,"line_end":1661,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47318,"byte_end":47321,"line_start":1662,"line_end":1662,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47322,"byte_end":47347,"line_start":1663,"line_end":1663,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47348,"byte_end":47397,"line_start":1664,"line_end":1664,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47398,"byte_end":47454,"line_start":1665,"line_end":1665,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47455,"byte_end":47462,"line_start":1666,"line_end":1666,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47769,"byte_end":47771,"line_start":1679,"line_end":1679,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`LittleEndian`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47672,"byte_end":47710,"line_start":1676,"line_end":1676,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47711,"byte_end":47714,"line_start":1677,"line_end":1677,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47715,"byte_end":47759,"line_start":1678,"line_end":1678,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48498,"byte_end":48511,"line_start":1705,"line_end":1705,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47789,"byte_end":47834,"line_start":1681,"line_end":1681,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47835,"byte_end":47838,"line_start":1682,"line_end":1682,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47839,"byte_end":47914,"line_start":1683,"line_end":1683,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47915,"byte_end":47992,"line_start":1684,"line_end":1684,"column_start":1,"column_end":78}},{"value":"/ [`BigEndian`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47993,"byte_end":48011,"line_start":1685,"line_end":1685,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48012,"byte_end":48015,"line_start":1686,"line_end":1686,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48016,"byte_end":48060,"line_start":1687,"line_end":1687,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48061,"byte_end":48064,"line_start":1688,"line_end":1688,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48065,"byte_end":48139,"line_start":1689,"line_end":1689,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48140,"byte_end":48155,"line_start":1690,"line_end":1690,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48156,"byte_end":48159,"line_start":1691,"line_end":1691,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48160,"byte_end":48174,"line_start":1692,"line_end":1692,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48175,"byte_end":48178,"line_start":1693,"line_end":1693,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48179,"byte_end":48232,"line_start":1694,"line_end":1694,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48233,"byte_end":48236,"line_start":1695,"line_end":1695,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48237,"byte_end":48248,"line_start":1696,"line_end":1696,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, NetworkEndian, BigEndian};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48249,"byte_end":48306,"line_start":1697,"line_end":1697,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48307,"byte_end":48310,"line_start":1698,"line_end":1698,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48311,"byte_end":48336,"line_start":1699,"line_end":1699,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48337,"byte_end":48381,"line_start":1700,"line_end":1700,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, NetworkEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48382,"byte_end":48437,"line_start":1701,"line_end":1701,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48438,"byte_end":48445,"line_start":1702,"line_end":1702,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48446,"byte_end":48449,"line_start":1703,"line_end":1703,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48450,"byte_end":48488,"line_start":1704,"line_end":1704,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48825,"byte_end":48837,"line_start":1716,"line_end":1716,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48526,"byte_end":48573,"line_start":1707,"line_end":1707,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48574,"byte_end":48577,"line_start":1708,"line_end":1708,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48578,"byte_end":48652,"line_start":1709,"line_end":1709,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48653,"byte_end":48668,"line_start":1710,"line_end":1710,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48669,"byte_end":48672,"line_start":1711,"line_end":1711,"column_start":1,"column_end":4}},{"value":"/ On this platform, this is an alias for [`LittleEndian`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48673,"byte_end":48733,"line_start":1712,"line_end":1712,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48734,"byte_end":48737,"line_start":1713,"line_end":1713,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48738,"byte_end":48782,"line_start":1714,"line_end":1714,"column_start":1,"column_end":45}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":48783,"byte_end":48815,"line_start":1715,"line_end":1715,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129721,"byte_end":129722,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":139095,"byte_end":139096,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4302,"byte_end":4314,"line_start":171,"line_end":171,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4345,"byte_end":4354,"line_start":172,"line_end":172,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46846,"byte_end":46855,"line_start":1640,"line_end":1640,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47574,"byte_end":47586,"line_start":1670,"line_end":1670,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":51078,"byte_end":51087,"line_start":1796,"line_end":1796,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":56807,"byte_end":56819,"line_start":2011,"line_end":2011,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":99697,"byte_end":99701,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4342},"to":{"krate":0,"index":37}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":129721,"byte_end":129722,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":99},"to":{"krate":0,"index":37}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":130532,"byte_end":130537,"line_start":996,"line_end":996,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4402},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\io.rs","byte_start":139095,"byte_end":139096,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4302,"byte_end":4314,"line_start":171,"line_end":171,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":278},"to":{"krate":0,"index":150}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":4345,"byte_end":4354,"line_start":172,"line_end":172,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":259},"to":{"krate":0,"index":150}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5536,"byte_end":5541,"line_start":211,"line_end":211,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2625},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5544,"byte_end":5548,"line_start":211,"line_end":211,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":3014},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5551,"byte_end":5556,"line_start":211,"line_end":211,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":9350},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5559,"byte_end":5566,"line_start":211,"line_end":211,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2982},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5569,"byte_end":5571,"line_start":211,"line_end":211,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2660},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5574,"byte_end":5578,"line_start":211,"line_end":211,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":9556},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5581,"byte_end":5584,"line_start":211,"line_end":211,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2691},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5587,"byte_end":5596,"line_start":211,"line_end":211,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2655},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5599,"byte_end":5609,"line_start":211,"line_end":211,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2702},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":5625,"byte_end":5631,"line_start":212,"line_end":212,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":150},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":46846,"byte_end":46855,"line_start":1640,"line_end":1640,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":259},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":47574,"byte_end":47586,"line_start":1670,"line_end":1670,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":278},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":51078,"byte_end":51087,"line_start":1796,"line_end":1796,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":259},"to":{"krate":0,"index":153}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.2.3\\src\\lib.rs","byte_start":56807,"byte_end":56819,"line_start":2011,"line_end":2011,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":278},"to":{"krate":0,"index":153}}]}