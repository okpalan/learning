{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1","program":"C:\\Users\\Researchers\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rayon","C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=24a53ad1c9287491","-C","extra-filename=-24a53ad1c9287491","--out-dir","c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","--extern","either=c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps\\libeither-60566516f8289d76.rmeta","--extern","rayon_core=c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps\\librayon_core-4032d00428be3ef3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Researchers\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps\\librayon-24a53ad1c9287491.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[11048883916989857704,0]},"crate_root":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src","external_crates":[{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":14,"id":{"name":"rayon_core","disambiguator":[8930776762464749402,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":15,"id":{"name":"crossbeam_deque","disambiguator":[17116685762905437529,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":16,"id":{"name":"crossbeam_epoch","disambiguator":[10974732561046767346,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":17,"id":{"name":"nodrop","disambiguator":[15397849951645068299,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":18,"id":{"name":"arrayvec","disambiguator":[15591186003761113389,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":19,"id":{"name":"crossbeam_utils","disambiguator":[12699351913414813840,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":20,"id":{"name":"cfg_if","disambiguator":[17733442033348932245,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":21,"id":{"name":"lazy_static","disambiguator":[5176779442058269625,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":22,"id":{"name":"memoffset","disambiguator":[7817720884542429331,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":23,"id":{"name":"scopeguard","disambiguator":[1360082520964149472,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":24,"id":{"name":"libc","disambiguator":[5473377761221229433,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":25,"id":{"name":"num_cpus","disambiguator":[9069212375596107161,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":26,"id":{"name":"rand","disambiguator":[7449455427547235442,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":27,"id":{"name":"winapi","disambiguator":[7164614207611226192,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","num":28,"id":{"name":"either","disambiguator":[1067600550624424345,0]}}],"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":0,"byte_end":4300,"line_start":1,"line_end":117,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":28,"index":139},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24949,"byte_end":24955,"line_start":70,"line_end":70,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4803},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25719,"byte_end":25724,"line_start":90,"line_end":90,"column_start":22,"column_end":27},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4816},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25760,"byte_end":25766,"line_start":92,"line_end":92,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4826},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25821,"byte_end":25830,"line_start":95,"line_end":95,"column_start":26,"column_end":35},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4835},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25866,"byte_end":25872,"line_start":97,"line_end":97,"column_start":23,"column_end":29},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4844},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25916,"byte_end":25925,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4853},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":25965,"byte_end":25972,"line_start":101,"line_end":101,"column_start":25,"column_end":32},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4862},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26010,"byte_end":26017,"line_start":103,"line_end":103,"column_start":24,"column_end":31},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4882},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26101,"byte_end":26105,"line_start":108,"line_end":108,"column_start":22,"column_end":26},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4894},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26107,"byte_end":26115,"line_start":108,"line_end":108,"column_start":28,"column_end":36},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4906},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26160,"byte_end":26164,"line_start":111,"line_end":111,"column_start":21,"column_end":25},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26205,"byte_end":26210,"line_start":113,"line_end":113,"column_start":26,"column_end":31},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4916},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26212,"byte_end":26217,"line_start":113,"line_end":113,"column_start":33,"column_end":38},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4925},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26250,"byte_end":26254,"line_start":115,"line_end":115,"column_start":21,"column_end":25},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4935},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26284,"byte_end":26287,"line_start":117,"line_end":117,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4944},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26327,"byte_end":26334,"line_start":119,"line_end":119,"column_start":25,"column_end":32},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4956},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26364,"byte_end":26367,"line_start":121,"line_end":121,"column_start":20,"column_end":23},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4969},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26403,"byte_end":26408,"line_start":123,"line_end":123,"column_start":23,"column_end":28},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4981},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26452,"byte_end":26462,"line_start":125,"line_end":125,"column_start":27,"column_end":37},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":4994},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26524,"byte_end":26542,"line_start":127,"line_end":127,"column_start":36,"column_end":54},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5006},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26588,"byte_end":26599,"line_start":129,"line_end":129,"column_start":28,"column_end":39},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5016},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26635,"byte_end":26641,"line_start":131,"line_end":131,"column_start":23,"column_end":29},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5038},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26682,"byte_end":26685,"line_start":135,"line_end":135,"column_start":20,"column_end":23},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5047},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26716,"byte_end":26722,"line_start":137,"line_end":137,"column_start":21,"column_end":27},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5057},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26724,"byte_end":26730,"line_start":137,"line_end":137,"column_start":29,"column_end":35},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5067},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26789,"byte_end":26795,"line_start":141,"line_end":141,"column_start":23,"column_end":29},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5076},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26833,"byte_end":26840,"line_start":143,"line_end":143,"column_start":24,"column_end":31},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5085},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26884,"byte_end":26893,"line_start":145,"line_end":145,"column_start":27,"column_end":36},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5094},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26953,"byte_end":26959,"line_start":149,"line_end":149,"column_start":24,"column_end":30},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3088},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26961,"byte_end":26967,"line_start":149,"line_end":149,"column_start":32,"column_end":38},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5103},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26993,"byte_end":27000,"line_start":150,"line_end":150,"column_start":24,"column_end":31},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3109},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27002,"byte_end":27009,"line_start":150,"line_end":150,"column_start":33,"column_end":40},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3177},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27046,"byte_end":27051,"line_start":153,"line_end":153,"column_start":23,"column_end":28},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3175},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27053,"byte_end":27058,"line_start":153,"line_end":153,"column_start":30,"column_end":35},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":5113},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27092,"byte_end":27096,"line_start":155,"line_end":155,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3221},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27098,"byte_end":27102,"line_start":155,"line_end":155,"column_start":28,"column_end":32},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":183}},{"kind":"Use","ref_id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304331,"byte_end":304351,"line_start":5,"line_end":5,"column_start":15,"column_end":35},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3243},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304367,"byte_end":304387,"line_start":6,"line_end":6,"column_start":15,"column_end":35},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3247},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304403,"byte_end":304426,"line_start":7,"line_end":7,"column_start":15,"column_end":38},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3258},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304442,"byte_end":304468,"line_start":8,"line_end":8,"column_start":15,"column_end":41},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3386},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304484,"byte_end":304507,"line_start":9,"line_end":9,"column_start":15,"column_end":38},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304523,"byte_end":304537,"line_start":10,"line_end":10,"column_start":15,"column_end":29},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3269},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304553,"byte_end":304569,"line_start":11,"line_end":11,"column_start":15,"column_end":31},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3820},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304586,"byte_end":304599,"line_start":12,"line_end":12,"column_start":16,"column_end":29},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304616,"byte_end":304632,"line_start":13,"line_end":13,"column_start":16,"column_end":32},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304647,"byte_end":304661,"line_start":14,"line_end":14,"column_start":14,"column_end":28},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":3517}},{"kind":"Use","ref_id":{"krate":14,"index":694},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4031,"byte_end":4050,"line_start":110,"line_end":110,"column_start":21,"column_end":40},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":602},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4072,"byte_end":4082,"line_start":111,"line_end":111,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":881},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4104,"byte_end":4121,"line_start":112,"line_end":112,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":869},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4143,"byte_end":4163,"line_start":113,"line_end":113,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":133},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4186,"byte_end":4190,"line_start":114,"line_end":114,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":140},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4192,"byte_end":4204,"line_start":114,"line_end":114,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":895},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4227,"byte_end":4236,"line_start":115,"line_end":115,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":477},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4259,"byte_end":4264,"line_start":116,"line_end":116,"column_start":22,"column_end":27},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":470},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4266,"byte_end":4271,"line_start":116,"line_end":116,"column_start":29,"column_end":34},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":557},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":4294,"byte_end":4299,"line_start":117,"line_end":117,"column_start":21,"column_end":26},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":0,"byte_end":4300,"line_start":1,"line_end":117,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":54},{"krate":0,"index":183},{"krate":0,"index":3454},{"krate":0,"index":3517},{"krate":0,"index":3548},{"krate":0,"index":3569},{"krate":0,"index":3610},{"krate":0,"index":4089},{"krate":0,"index":4213},{"krate":0,"index":4276},{"krate":0,"index":4307},{"krate":0,"index":4309},{"krate":0,"index":4312},{"krate":0,"index":4315},{"krate":0,"index":4318},{"krate":0,"index":4321},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4328},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4335},{"krate":0,"index":4338}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":53,"byte_end":92,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":185,"byte_end":207,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"/ Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":209,"byte_end":278,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ computations into parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":279,"byte_end":309,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":310,"byte_end":313,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":314,"byte_end":395,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/ code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":396,"byte_end":468,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ parallelism when sensible, based on work-load at runtime.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":469,"byte_end":530,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":531,"byte_end":534,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # How to use Rayon","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":535,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":558,"byte_end":561,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are two ways to use Rayon:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":562,"byte_end":598,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":599,"byte_end":602,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":603,"byte_end":686,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/   typically the most efficient.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":687,"byte_end":722,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":723,"byte_end":813,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/     execute in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":814,"byte_end":842,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":843,"byte_end":924,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":925,"byte_end":1011,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/     by a parallel iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1012,"byte_end":1043,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/ - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1044,"byte_end":1121,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1122,"byte_end":1183,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1184,"byte_end":1275,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1276,"byte_end":1362,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/     the global one.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1363,"byte_end":1386,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1387,"byte_end":1390,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [iter module]: iter/index.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1391,"byte_end":1425,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ [`join`]: fn.join.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1426,"byte_end":1452,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ [`scope`]: fn.scope.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1453,"byte_end":1481,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/ [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1482,"byte_end":1549,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1550,"byte_end":1620,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/ [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1621,"byte_end":1677,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1678,"byte_end":1681,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Basic usage and the Rayon prelude","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1682,"byte_end":1721,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1722,"byte_end":1725,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ First, you will need to add `rayon` to your `Cargo.toml` and put","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1726,"byte_end":1794,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ `extern crate rayon` in your main file (`lib.rs`, `main.rs`).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1795,"byte_end":1860,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1861,"byte_end":1864,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1865,"byte_end":1933,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ you need to import several traits. Those traits are bundled into","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":1934,"byte_end":2002,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2003,"byte_end":2071,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2072,"byte_end":2140,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ the top of each module that uses Rayon methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2141,"byte_end":2192,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2193,"byte_end":2196,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ These traits give you access to the `par_iter` method which provides","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2197,"byte_end":2269,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2270,"byte_end":2343,"line_start":50,"line_end":50,"column_start":1,"column_end":74}},{"value":"/ [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2344,"byte_end":2395,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2396,"byte_end":2399,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ [`rayon::prelude::*`]: prelude/index.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2400,"byte_end":2445,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"/ [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2446,"byte_end":2502,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2503,"byte_end":2569,"line_start":55,"line_end":55,"column_start":1,"column_end":67}},{"value":"/ [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2570,"byte_end":2632,"line_start":56,"line_end":56,"column_start":1,"column_end":63}},{"value":"/ [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2633,"byte_end":2691,"line_start":57,"line_end":57,"column_start":1,"column_end":59}},{"value":"/ [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2692,"byte_end":2753,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2754,"byte_end":2757,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ # Crate Layout","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2758,"byte_end":2776,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2777,"byte_end":2780,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Rayon extends many of the types found in the standard library with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2781,"byte_end":2851,"line_start":62,"line_end":62,"column_start":1,"column_end":71}},{"value":"/ parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2852,"byte_end":2917,"line_start":63,"line_end":63,"column_start":1,"column_end":66}},{"value":"/ crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2918,"byte_end":2983,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":2984,"byte_end":3053,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/ found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3054,"byte_end":3113,"line_start":66,"line_end":66,"column_start":1,"column_end":60}},{"value":"/ `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3114,"byte_end":3182,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"/ [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3183,"byte_end":3249,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"/ these submodules unless you need to name iterator types","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3250,"byte_end":3309,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"/ explicitly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3310,"byte_end":3325,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3326,"byte_end":3329,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3330,"byte_end":3413,"line_start":72,"line_end":72,"column_start":1,"column_end":84}},{"value":"/ [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3414,"byte_end":3502,"line_start":73,"line_end":73,"column_start":1,"column_end":89}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3503,"byte_end":3546,"line_start":74,"line_end":74,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3547,"byte_end":3550,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Other questions?","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3551,"byte_end":3573,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3574,"byte_end":3577,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ See [the Rayon FAQ][faq].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3578,"byte_end":3607,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3608,"byte_end":3611,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3612,"byte_end":3675,"line_start":80,"line_end":80,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\private.rs","byte_start":6817,"byte_end":6830,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\private.rs","byte_start":6645,"byte_end":6710,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\private.rs","byte_start":6711,"byte_end":6765,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\private.rs","byte_start":6766,"byte_end":6805,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":74},{"krate":0,"index":88},{"krate":0,"index":101},{"krate":0,"index":122},{"krate":0,"index":142},{"krate":0,"index":155}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11270,"byte_end":11342,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11343,"byte_end":11346,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11347,"byte_end":11425,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11426,"byte_end":11464,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11465,"byte_end":11468,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":11469,"byte_end":11542,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":4341},{"krate":0,"index":4344},{"krate":0,"index":4347},{"krate":0,"index":65},{"krate":0,"index":4357},{"krate":0,"index":4350},{"krate":0,"index":4363},{"krate":0,"index":4367},{"krate":0,"index":70},{"krate":0,"index":4371},{"krate":0,"index":4388},{"krate":0,"index":4380}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for heaps","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12246,"byte_end":12308,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/ (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12309,"byte_end":12381,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12382,"byte_end":12441,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4341},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12601,"byte_end":12609,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4343}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12525,"byte_end":12565,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":4363},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":13054,"byte_end":13058,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4366}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12959,"byte_end":13025,"line_start":33,"line_end":33,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":4395},{"krate":0,"index":4399},{"krate":0,"index":4403},{"krate":0,"index":4412},{"krate":0,"index":4419},{"krate":0,"index":4424},{"krate":0,"index":83},{"krate":0,"index":4429},{"krate":0,"index":4439},{"krate":0,"index":4447},{"krate":0,"index":4452},{"krate":0,"index":4457},{"krate":0,"index":4467}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":13477,"byte_end":13545,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":13546,"byte_end":13619,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":13620,"byte_end":13679,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4395},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":13850,"byte_end":13858,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4398}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":13761,"byte_end":13800,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":4419},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14192,"byte_end":14196,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4423}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14098,"byte_end":14163,"line_start":29,"line_end":29,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4447},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14721,"byte_end":14728,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4451}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14630,"byte_end":14692,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":4475},{"krate":0,"index":4478},{"krate":0,"index":4481},{"krate":0,"index":4489},{"krate":0,"index":4495},{"krate":0,"index":4499},{"krate":0,"index":97},{"krate":0,"index":4503},{"krate":0,"index":4512}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15037,"byte_end":15105,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15106,"byte_end":15176,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15177,"byte_end":15236,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4475},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15407,"byte_end":15415,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4477}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15318,"byte_end":15357,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":4495},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15703,"byte_end":15707,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4498}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15609,"byte_end":15674,"line_start":29,"line_end":29,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":4519},{"krate":0,"index":4523},{"krate":0,"index":4527},{"krate":0,"index":4537},{"krate":0,"index":4544},{"krate":0,"index":4549},{"krate":0,"index":117},{"krate":0,"index":4554},{"krate":0,"index":4565},{"krate":0,"index":4573},{"krate":0,"index":4578},{"krate":0,"index":4583},{"krate":0,"index":4594}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash maps","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16119,"byte_end":16185,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16186,"byte_end":16258,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16259,"byte_end":16318,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4519},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16522,"byte_end":16530,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4522}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16435,"byte_end":16472,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4544},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16898,"byte_end":16902,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4548}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":16806,"byte_end":16869,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4573},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":17467,"byte_end":17474,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4577}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":17378,"byte_end":17438,"line_start":53,"line_end":53,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":4602},{"krate":0,"index":4605},{"krate":0,"index":4608},{"krate":0,"index":4617},{"krate":0,"index":4623},{"krate":0,"index":4627},{"krate":0,"index":138},{"krate":0,"index":4631},{"krate":0,"index":4641}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash sets","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":17819,"byte_end":17885,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":17886,"byte_end":17955,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":17956,"byte_end":18015,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4602},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18219,"byte_end":18227,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4604}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18132,"byte_end":18169,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4623},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18549,"byte_end":18553,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4626}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18457,"byte_end":18520,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":4648},{"krate":0,"index":4651},{"krate":0,"index":4654},{"krate":0,"index":4657},{"krate":0,"index":4665},{"krate":0,"index":4671},{"krate":0,"index":4675},{"krate":0,"index":151},{"krate":0,"index":4679},{"krate":0,"index":4688},{"krate":0,"index":4695},{"krate":0,"index":4699},{"krate":0,"index":4703},{"krate":0,"index":4712}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for linked lists","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19001,"byte_end":19070,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19071,"byte_end":19143,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19144,"byte_end":19203,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4648},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19363,"byte_end":19371,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4650}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19287,"byte_end":19327,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":4671},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19644,"byte_end":19648,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4674}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19549,"byte_end":19615,"line_start":29,"line_end":29,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4695},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":20076,"byte_end":20083,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4698}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19984,"byte_end":20047,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":4719},{"krate":0,"index":4722},{"krate":0,"index":4725},{"krate":0,"index":4728},{"krate":0,"index":4743},{"krate":0,"index":4736},{"krate":0,"index":4749},{"krate":0,"index":4753},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":4765},{"krate":0,"index":4757},{"krate":0,"index":4772},{"krate":0,"index":4776},{"krate":0,"index":177},{"krate":0,"index":4788},{"krate":0,"index":4780}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for double-ended queues","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20312,"byte_end":20388,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20389,"byte_end":20459,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20460,"byte_end":20519,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4719},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20695,"byte_end":20703,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4721}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20612,"byte_end":20659,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4749},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20989,"byte_end":20993,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4752}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":20887,"byte_end":20960,"line_start":30,"line_end":30,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4772},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":21639,"byte_end":21646,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4775}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":21540,"byte_end":21610,"line_start":58,"line_end":58,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":263},{"krate":0,"index":334},{"krate":0,"index":434},{"krate":0,"index":437},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":618},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":1019},{"krate":0,"index":1109},{"krate":0,"index":1150},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1342},{"krate":0,"index":1376},{"krate":0,"index":1379},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1574},{"krate":0,"index":1577},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2234},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2368},{"krate":0,"index":2371},{"krate":0,"index":2428},{"krate":0,"index":2485},{"krate":0,"index":2568},{"krate":0,"index":2571},{"krate":0,"index":2680},{"krate":0,"index":2683},{"krate":0,"index":2735},{"krate":0,"index":2738},{"krate":0,"index":2912},{"krate":0,"index":3079},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3153},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3160},{"krate":0,"index":3163},{"krate":0,"index":3211},{"krate":0,"index":3212},{"krate":0,"index":3215},{"krate":0,"index":3218},{"krate":0,"index":3236},{"krate":0,"index":3237},{"krate":0,"index":3240},{"krate":0,"index":3243},{"krate":0,"index":3247},{"krate":0,"index":3252},{"krate":0,"index":3258},{"krate":0,"index":3263},{"krate":0,"index":3269},{"krate":0,"index":3381},{"krate":0,"index":3386},{"krate":0,"index":3446},{"krate":0,"index":3450}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"/ Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22099,"byte_end":22173,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22174,"byte_end":22177,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22178,"byte_end":22256,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22257,"byte_end":22300,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22301,"byte_end":22304,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22305,"byte_end":22375,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ execute in parallel: typically all you have to do is convert the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22376,"byte_end":22444,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22445,"byte_end":22514,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22515,"byte_end":22582,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ example, to compute the sum of the squares of a sequence of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22583,"byte_end":22646,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ integers, one might write:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22647,"byte_end":22677,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22678,"byte_end":22681,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22682,"byte_end":22693,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22694,"byte_end":22720,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22721,"byte_end":22766,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/     input.par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22767,"byte_end":22791,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/          .map(|i| i * i)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22792,"byte_end":22820,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/          .sum()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22821,"byte_end":22840,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22841,"byte_end":22846,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22847,"byte_end":22854,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22855,"byte_end":22858,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Or, to increment all the integers in a slice, you could write:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22859,"byte_end":22925,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22926,"byte_end":22929,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22930,"byte_end":22941,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22942,"byte_end":22968,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ fn increment_all(input: &mut [i32]) {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":22969,"byte_end":23010,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/     input.par_iter_mut()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23011,"byte_end":23039,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/          .for_each(|p| *p += 1);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23040,"byte_end":23076,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23077,"byte_end":23082,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23083,"byte_end":23090,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23091,"byte_end":23094,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ To use parallel iterators, first import the traits by adding","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23095,"byte_end":23159,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23160,"byte_end":23226,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23227,"byte_end":23296,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23297,"byte_end":23357,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ iterators work by first constructing a computation and then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23358,"byte_end":23421,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/ executing it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23422,"byte_end":23439,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23440,"byte_end":23443,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23444,"byte_end":23511,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ ways to create (or consume) parallel iterators:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23512,"byte_end":23563,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23564,"byte_end":23567,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23568,"byte_end":23636,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/   `par_windows`, as well as various parallel sorting","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23637,"byte_end":23693,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23694,"byte_end":23762,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23763,"byte_end":23833,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/   See [the `ParallelString` trait] for the full list.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23834,"byte_end":23891,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ - Various collections offer [`par_extend`], which grows a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23892,"byte_end":23953,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/   collection given a parallel iterator. (If you don't have a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":23954,"byte_end":24018,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"/   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24019,"byte_end":24088,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/   one from scratch.)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24089,"byte_end":24113,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24114,"byte_end":24117,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24118,"byte_end":24184,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24185,"byte_end":24251,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24252,"byte_end":24297,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24298,"byte_end":24359,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24360,"byte_end":24363,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ To see the full range of methods available on parallel iterators,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24364,"byte_end":24433,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24434,"byte_end":24504,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ traits.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24505,"byte_end":24516,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24517,"byte_end":24520,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24521,"byte_end":24596,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24597,"byte_end":24675,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24676,"byte_end":24679,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [regular iterator]: http://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24680,"byte_end":24757,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24758,"byte_end":24811,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24812,"byte_end":24879,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ [split]: fn.split.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24880,"byte_end":24906,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/ [plumbing]: plumbing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":24907,"byte_end":24931,"line_start":68,"line_end":68,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":4803},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104377,"byte_end":104382,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":4806},{"krate":0,"index":4807}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":103995,"byte_end":104074,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104075,"byte_end":104151,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104152,"byte_end":104155,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104156,"byte_end":104213,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104214,"byte_end":104267,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104268,"byte_end":104341,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4816},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111713,"byte_end":111719,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":4818},{"krate":0,"index":4819}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111300,"byte_end":111375,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111376,"byte_end":111379,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111380,"byte_end":111464,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111465,"byte_end":111468,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111469,"byte_end":111535,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111536,"byte_end":111603,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":111604,"byte_end":111677,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4826},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131476,"byte_end":131485,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":4828}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131048,"byte_end":131133,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131134,"byte_end":131221,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131222,"byte_end":131225,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131226,"byte_end":131298,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131299,"byte_end":131366,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131367,"byte_end":131440,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4835},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134939,"byte_end":134945,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":4838},{"krate":0,"index":4839}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134561,"byte_end":134640,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134641,"byte_end":134718,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134719,"byte_end":134722,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134723,"byte_end":134782,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134783,"byte_end":134836,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":134837,"byte_end":134910,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4844},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138472,"byte_end":138481,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":4847},{"krate":0,"index":4848}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138070,"byte_end":138160,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138161,"byte_end":138243,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138244,"byte_end":138247,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138248,"byte_end":138315,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138316,"byte_end":138369,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138370,"byte_end":138443,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4853},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142164,"byte_end":142171,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":4856},{"krate":0,"index":4857}],"decl_id":null,"docs":" `FlatMap` maps each element to an iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to an iterator, then flattens these iterators together.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":141772,"byte_end":141859,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":141860,"byte_end":141939,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":141940,"byte_end":141943,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":141944,"byte_end":142007,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142008,"byte_end":142061,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142062,"byte_end":142135,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4862},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146397,"byte_end":146404,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":4864}],"decl_id":null,"docs":" `Flatten` turns each element to an iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on\n [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to an iterator, then flattens these iterators","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":145995,"byte_end":146073,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ together. This struct is created by the [`flatten()`] method on","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146074,"byte_end":146141,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146142,"byte_end":146167,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146168,"byte_end":146171,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146172,"byte_end":146233,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146234,"byte_end":146287,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146288,"byte_end":146361,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1037},{"krate":0,"index":1046},{"krate":0,"index":1054},{"krate":0,"index":1062},{"krate":0,"index":1065},{"krate":0,"index":1069},{"krate":0,"index":4871},{"krate":0,"index":4873},{"krate":0,"index":4875},{"krate":0,"index":1074},{"krate":0,"index":4876},{"krate":0,"index":4879},{"krate":0,"index":4881},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1093},{"krate":0,"index":1101},{"krate":0,"index":1104}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a high-level overview.","sig":null,"attributes":[{"value":"/ Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":152982,"byte_end":153055,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ low-level details -- users of parallel iterators should not need to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153056,"byte_end":153127,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"/ interact with them directly.  See [the `plumbing` README][r] for a high-level overview.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153128,"byte_end":153219,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153220,"byte_end":153223,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153224,"byte_end":153306,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153757,"byte_end":153773,"line_start":21,"line_end":21,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153396,"byte_end":153458,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153459,"byte_end":153529,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153530,"byte_end":153575,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153576,"byte_end":153579,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153580,"byte_end":153680,"line_start":19,"line_end":19,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153681,"byte_end":153746,"line_start":20,"line_end":20,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154006,"byte_end":154012,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153783,"byte_end":153844,"line_start":22,"line_end":22,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153849,"byte_end":153896,"line_start":23,"line_end":23,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153901,"byte_end":153904,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":153909,"byte_end":153996,"line_start":25,"line_end":25,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154230,"byte_end":154238,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"pub fn callback<P>(Self, P) -> Self::Output where P: Producer<Item = T>","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154019,"byte_end":154084,"line_start":28,"line_end":28,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154089,"byte_end":154152,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154157,"byte_end":154222,"line_start":30,"line_end":30,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155700,"byte_end":155708,"line_start":58,"line_end":58,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154309,"byte_end":154376,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154377,"byte_end":154446,"line_start":35,"line_end":35,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154447,"byte_end":154514,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154515,"byte_end":154582,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154583,"byte_end":154652,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154653,"byte_end":154721,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154722,"byte_end":154791,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154792,"byte_end":154862,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154863,"byte_end":154931,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154932,"byte_end":154995,"line_start":43,"line_end":43,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":154996,"byte_end":155051,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155052,"byte_end":155055,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155056,"byte_end":155121,"line_start":46,"line_end":46,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155122,"byte_end":155191,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155192,"byte_end":155233,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155234,"byte_end":155237,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155238,"byte_end":155302,"line_start":50,"line_end":50,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155303,"byte_end":155370,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155371,"byte_end":155430,"line_start":52,"line_end":52,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155431,"byte_end":155493,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155494,"byte_end":155542,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155543,"byte_end":155546,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155547,"byte_end":155629,"line_start":56,"line_end":56,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155630,"byte_end":155689,"line_start":57,"line_end":57,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":1038},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155845,"byte_end":155849,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155729,"byte_end":155793,"line_start":59,"line_end":59,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155798,"byte_end":155835,"line_start":60,"line_end":60,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1039},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155906,"byte_end":155914,"line_start":64,"line_end":64,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155856,"byte_end":155896,"line_start":63,"line_end":63,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156097,"byte_end":156106,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"pub fn into_iter(Self) -> Self::IntoIter","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155992,"byte_end":156067,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156072,"byte_end":156089,"line_start":67,"line_end":67,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156709,"byte_end":156716,"line_start":80,"line_end":80,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"pub fn min_len(&Self) -> usize","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156137,"byte_end":156189,"line_start":70,"line_end":70,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156194,"byte_end":156257,"line_start":71,"line_end":71,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156262,"byte_end":156326,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156331,"byte_end":156392,"line_start":73,"line_end":73,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156397,"byte_end":156459,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156464,"byte_end":156527,"line_start":75,"line_end":75,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156532,"byte_end":156593,"line_start":76,"line_end":76,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156598,"byte_end":156609,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156614,"byte_end":156617,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156622,"byte_end":156701,"line_start":79,"line_end":79,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157281,"byte_end":157288,"line_start":93,"line_end":93,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"pub fn max_len(&Self) -> usize","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156756,"byte_end":156808,"line_start":84,"line_end":84,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156813,"byte_end":156878,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156883,"byte_end":156937,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":156942,"byte_end":157005,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157010,"byte_end":157068,"line_start":88,"line_end":88,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157073,"byte_end":157133,"line_start":89,"line_end":89,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157138,"byte_end":157181,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157186,"byte_end":157189,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157194,"byte_end":157273,"line_start":92,"line_end":92,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157476,"byte_end":157484,"line_start":99,"line_end":99,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157337,"byte_end":157401,"line_start":97,"line_end":97,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157406,"byte_end":157468,"line_start":98,"line_end":98,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157751,"byte_end":157760,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157527,"byte_end":157590,"line_start":101,"line_end":101,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157595,"byte_end":157665,"line_start":102,"line_end":102,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157670,"byte_end":157673,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157678,"byte_end":157743,"line_start":104,"line_end":104,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1046},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158703,"byte_end":158711,"line_start":126,"line_end":126,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157883,"byte_end":157952,"line_start":112,"line_end":112,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":157953,"byte_end":158018,"line_start":113,"line_end":113,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158019,"byte_end":158080,"line_start":114,"line_end":114,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158081,"byte_end":158148,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158149,"byte_end":158217,"line_start":116,"line_end":116,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158218,"byte_end":158287,"line_start":117,"line_end":117,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158288,"byte_end":158358,"line_start":118,"line_end":118,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158359,"byte_end":158418,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158419,"byte_end":158454,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158455,"byte_end":158458,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158459,"byte_end":158541,"line_start":122,"line_end":122,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158542,"byte_end":158620,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158621,"byte_end":158654,"line_start":124,"line_end":124,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158655,"byte_end":158692,"line_start":125,"line_end":125,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158812,"byte_end":158818,"line_start":128,"line_end":128,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158738,"byte_end":158802,"line_start":127,"line_end":127,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158939,"byte_end":158946,"line_start":131,"line_end":131,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158862,"byte_end":158929,"line_start":130,"line_end":130,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159052,"byte_end":159058,"line_start":134,"line_end":134,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158976,"byte_end":159042,"line_start":133,"line_end":133,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159294,"byte_end":159302,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159071,"byte_end":159135,"line_start":136,"line_end":136,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159140,"byte_end":159200,"line_start":137,"line_end":137,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159205,"byte_end":159269,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159274,"byte_end":159286,"line_start":139,"line_end":139,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159488,"byte_end":159499,"line_start":144,"line_end":144,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"pub fn into_folder(Self) -> Self::Folder","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159360,"byte_end":159421,"line_start":142,"line_end":142,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159426,"byte_end":159480,"line_start":143,"line_end":143,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159658,"byte_end":159662,"line_start":148,"line_end":148,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159528,"byte_end":159590,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159595,"byte_end":159650,"line_start":147,"line_end":147,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160025,"byte_end":160031,"line_start":157,"line_end":157,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1061}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159682,"byte_end":159736,"line_start":151,"line_end":151,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159737,"byte_end":159804,"line_start":152,"line_end":152,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159805,"byte_end":159875,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159876,"byte_end":159931,"line_start":154,"line_end":154,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159932,"byte_end":159935,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":159936,"byte_end":160014,"line_start":156,"line_end":156,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160131,"byte_end":160137,"line_start":159,"line_end":159,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160051,"byte_end":160121,"line_start":158,"line_end":158,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160206,"byte_end":160213,"line_start":162,"line_end":162,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"pub fn consume(Self, Item) -> Self","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160144,"byte_end":160198,"line_start":161,"line_end":161,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160642,"byte_end":160654,"line_start":172,"line_end":172,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"pub fn consume_iter<I>(Self, I) -> Self where I: IntoIterator<Item = Item>","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160246,"byte_end":160326,"line_start":164,"line_end":164,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160331,"byte_end":160334,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160339,"byte_end":160404,"line_start":166,"line_end":166,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160409,"byte_end":160473,"line_start":167,"line_end":167,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160478,"byte_end":160511,"line_start":168,"line_end":168,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160516,"byte_end":160519,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160524,"byte_end":160587,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160592,"byte_end":160634,"line_start":171,"line_end":171,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160957,"byte_end":160965,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"pub fn complete(Self) -> Self::Result","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160900,"byte_end":160949,"line_start":184,"line_end":184,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161122,"byte_end":161126,"line_start":189,"line_end":189,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160994,"byte_end":161054,"line_start":187,"line_end":187,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161059,"byte_end":161114,"line_start":188,"line_end":188,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161556,"byte_end":161563,"line_start":199,"line_end":199,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":1064}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161146,"byte_end":161215,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161216,"byte_end":161283,"line_start":193,"line_end":193,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161284,"byte_end":161354,"line_start":194,"line_end":194,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161355,"byte_end":161422,"line_start":195,"line_end":195,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161423,"byte_end":161458,"line_start":196,"line_end":196,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161459,"byte_end":161462,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161463,"byte_end":161545,"line_start":198,"line_end":198,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161664,"byte_end":161670,"line_start":202,"line_end":202,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"pub fn reduce(Self, Result, Result) -> Result","parent":{"krate":0,"index":1062},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161578,"byte_end":161641,"line_start":200,"line_end":200,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161646,"byte_end":161656,"line_start":201,"line_end":201,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162032,"byte_end":162049,"line_start":210,"line_end":210,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161720,"byte_end":161789,"line_start":205,"line_end":205,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161790,"byte_end":161846,"line_start":206,"line_end":206,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161847,"byte_end":161916,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161917,"byte_end":161984,"line_start":208,"line_end":208,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":161985,"byte_end":162021,"line_start":209,"line_end":209,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162525,"byte_end":162539,"line_start":218,"line_end":218,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"pub fn split_off_left(&Self) -> Self","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162072,"byte_end":162131,"line_start":211,"line_end":211,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162136,"byte_end":162202,"line_start":212,"line_end":212,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162207,"byte_end":162273,"line_start":213,"line_end":213,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162278,"byte_end":162340,"line_start":214,"line_end":214,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162345,"byte_end":162405,"line_start":215,"line_end":215,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162410,"byte_end":162476,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162481,"byte_end":162517,"line_start":217,"line_end":217,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162661,"byte_end":162671,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"pub fn to_reducer(&Self) -> Self::Reducer","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162561,"byte_end":162627,"line_start":220,"line_end":220,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162632,"byte_end":162653,"line_start":221,"line_end":221,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163148,"byte_end":163165,"line_start":233,"line_end":233,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162700,"byte_end":162767,"line_start":225,"line_end":225,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162768,"byte_end":162830,"line_start":226,"line_end":226,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162831,"byte_end":162899,"line_start":227,"line_end":227,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162900,"byte_end":162970,"line_start":228,"line_end":228,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162971,"byte_end":162974,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162975,"byte_end":163041,"line_start":230,"line_end":230,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163042,"byte_end":163110,"line_start":231,"line_end":231,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163111,"byte_end":163137,"line_start":232,"line_end":232,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163243,"byte_end":163247,"line_start":235,"line_end":235,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163186,"byte_end":163233,"line_start":234,"line_end":234,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163336,"byte_end":163341,"line_start":238,"line_end":238,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"pub fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163254,"byte_end":163328,"line_start":237,"line_end":237,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163524,"byte_end":163533,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163378,"byte_end":163441,"line_start":240,"line_end":240,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163446,"byte_end":163516,"line_start":241,"line_end":241,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167312,"byte_end":167318,"line_start":346,"line_end":346,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"pub fn bridge<I, C>(I, C) -> C::Result where I: IndexedParallelIterator,\nC: Consumer<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166733,"byte_end":166803,"line_start":335,"line_end":335,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166804,"byte_end":166870,"line_start":336,"line_end":336,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166871,"byte_end":166940,"line_start":337,"line_end":337,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166941,"byte_end":166981,"line_start":338,"line_end":338,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166982,"byte_end":166985,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":166986,"byte_end":167048,"line_start":340,"line_end":340,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167049,"byte_end":167105,"line_start":341,"line_end":341,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167106,"byte_end":167151,"line_start":342,"line_end":342,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167152,"byte_end":167155,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167156,"byte_end":167236,"line_start":344,"line_end":344,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167237,"byte_end":167304,"line_start":345,"line_end":345,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168681,"byte_end":168705,"line_start":386,"line_end":386,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"pub fn bridge_producer_consumer<P, C>(usize, P, C) -> C::Result where\nP: Producer, C: Consumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168043,"byte_end":168105,"line_start":373,"line_end":373,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168106,"byte_end":168171,"line_start":374,"line_end":374,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168172,"byte_end":168240,"line_start":375,"line_end":375,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168241,"byte_end":168307,"line_start":376,"line_end":376,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168308,"byte_end":168319,"line_start":377,"line_end":377,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168320,"byte_end":168323,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168324,"byte_end":168386,"line_start":379,"line_end":379,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168387,"byte_end":168443,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168444,"byte_end":168489,"line_start":381,"line_end":381,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168490,"byte_end":168493,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168494,"byte_end":168524,"line_start":383,"line_end":383,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168525,"byte_end":168605,"line_start":384,"line_end":384,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":168606,"byte_end":168673,"line_start":385,"line_end":385,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1101},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":170271,"byte_end":170287,"line_start":426,"line_end":426,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"pub fn bridge_unindexed<P, C>(P, C) -> C::Result where P: UnindexedProducer,\nC: UnindexedConsumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":170102,"byte_end":170192,"line_start":423,"line_end":423,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":170193,"byte_end":170196,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":170197,"byte_end":170263,"line_start":425,"line_end":425,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4882},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":174079,"byte_end":174083,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":4886},{"krate":0,"index":4887},{"krate":0,"index":4888}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173694,"byte_end":173786,"line_start":19,"line_end":19,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173787,"byte_end":173862,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173863,"byte_end":173866,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173867,"byte_end":173922,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173923,"byte_end":173976,"line_start":23,"line_end":23,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":173977,"byte_end":174050,"line_start":24,"line_end":24,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4894},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177552,"byte_end":177560,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":4898},{"krate":0,"index":4899},{"krate":0,"index":4900}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177148,"byte_end":177244,"line_start":153,"line_end":153,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177245,"byte_end":177325,"line_start":154,"line_end":154,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177326,"byte_end":177329,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177330,"byte_end":177395,"line_start":156,"line_end":156,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177396,"byte_end":177449,"line_start":157,"line_end":157,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177450,"byte_end":177523,"line_start":158,"line_end":158,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4906},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182510,"byte_end":182514,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":4908},{"krate":0,"index":4909}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182117,"byte_end":182182,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182183,"byte_end":182265,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182266,"byte_end":182269,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182270,"byte_end":182332,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182333,"byte_end":182400,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182401,"byte_end":182474,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188251,"byte_end":188256,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"pub fn split<D, S>(D, S) -> Split<D, S> where D: Send, S: Fn(D) ->\n(D, Option<D>) + Sync","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184367,"byte_end":184444,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184445,"byte_end":184500,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184501,"byte_end":184504,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184505,"byte_end":184519,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184520,"byte_end":184523,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184524,"byte_end":184594,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184595,"byte_end":184598,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184599,"byte_end":184606,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184607,"byte_end":184627,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184628,"byte_end":184654,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184655,"byte_end":184679,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184680,"byte_end":184683,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184684,"byte_end":184687,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184688,"byte_end":184734,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184735,"byte_end":184767,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184768,"byte_end":184771,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184772,"byte_end":184820,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184821,"byte_end":184884,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184885,"byte_end":184960,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":184961,"byte_end":185036,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185037,"byte_end":185090,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185091,"byte_end":185094,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185095,"byte_end":185165,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185166,"byte_end":185221,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185222,"byte_end":185272,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185273,"byte_end":185278,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185279,"byte_end":185282,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185283,"byte_end":185363,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185364,"byte_end":185431,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185432,"byte_end":185493,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185494,"byte_end":185571,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185572,"byte_end":185617,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185618,"byte_end":185687,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185688,"byte_end":185695,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185696,"byte_end":185703,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185704,"byte_end":185707,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185708,"byte_end":185780,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185781,"byte_end":185859,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185860,"byte_end":185886,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185887,"byte_end":185890,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185891,"byte_end":185898,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185899,"byte_end":185921,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185922,"byte_end":185950,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185951,"byte_end":185977,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":185978,"byte_end":186012,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186013,"byte_end":186078,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186079,"byte_end":186134,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186135,"byte_end":186192,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186193,"byte_end":186245,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186246,"byte_end":186253,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186254,"byte_end":186259,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186260,"byte_end":186333,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186334,"byte_end":186354,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186355,"byte_end":186393,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186394,"byte_end":186418,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186419,"byte_end":186422,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186423,"byte_end":186459,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186460,"byte_end":186484,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186485,"byte_end":186490,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186491,"byte_end":186494,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186495,"byte_end":186574,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186575,"byte_end":186648,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186649,"byte_end":186683,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186684,"byte_end":186748,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186749,"byte_end":186828,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186829,"byte_end":186873,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186874,"byte_end":186919,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186920,"byte_end":186948,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":186949,"byte_end":187017,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187018,"byte_end":187080,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187081,"byte_end":187113,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187114,"byte_end":187145,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187146,"byte_end":187177,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187178,"byte_end":187192,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187193,"byte_end":187256,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187257,"byte_end":187281,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187282,"byte_end":187298,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187299,"byte_end":187365,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187366,"byte_end":187428,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187429,"byte_end":187461,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187462,"byte_end":187493,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187494,"byte_end":187525,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187526,"byte_end":187540,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187541,"byte_end":187605,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187606,"byte_end":187630,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187631,"byte_end":187640,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187641,"byte_end":187646,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187647,"byte_end":187650,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187651,"byte_end":187712,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187713,"byte_end":187764,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187765,"byte_end":187824,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187825,"byte_end":187902,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187903,"byte_end":187977,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":187978,"byte_end":188039,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188040,"byte_end":188098,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188099,"byte_end":188158,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188159,"byte_end":188223,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188224,"byte_end":188231,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188232,"byte_end":188239,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188240,"byte_end":188243,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4916},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188635,"byte_end":188640,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4919},{"krate":0,"index":4920}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188434,"byte_end":188515,"line_start":116,"line_end":116,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188516,"byte_end":188571,"line_start":117,"line_end":117,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188572,"byte_end":188575,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188576,"byte_end":188606,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4925},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190489,"byte_end":190493,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":4927},{"krate":0,"index":4928}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190093,"byte_end":190161,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190162,"byte_end":190244,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190245,"byte_end":190248,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190249,"byte_end":190311,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190312,"byte_end":190379,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190380,"byte_end":190453,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4935},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192620,"byte_end":192623,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":4938},{"krate":0,"index":4939}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192246,"byte_end":192326,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192327,"byte_end":192330,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192331,"byte_end":192405,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192406,"byte_end":192409,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192410,"byte_end":192463,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192464,"byte_end":192517,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192518,"byte_end":192591,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4944},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198558,"byte_end":198565,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":4948},{"krate":0,"index":4949},{"krate":0,"index":4950}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198165,"byte_end":198249,"line_start":7,"line_end":7,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198250,"byte_end":198253,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198254,"byte_end":198333,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198334,"byte_end":198337,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198338,"byte_end":198401,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198402,"byte_end":198455,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198456,"byte_end":198529,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4956},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206858,"byte_end":206861,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4959},{"krate":0,"index":4960}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206447,"byte_end":206519,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206520,"byte_end":206583,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206584,"byte_end":206615,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206616,"byte_end":206619,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206620,"byte_end":206680,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206681,"byte_end":206748,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":206749,"byte_end":206822,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4969},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":211075,"byte_end":211080,"line_start":15,"line_end":15,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":4972}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210580,"byte_end":210665,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210666,"byte_end":210692,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210693,"byte_end":210696,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210697,"byte_end":210780,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210781,"byte_end":210828,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210829,"byte_end":210832,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210833,"byte_end":210897,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210898,"byte_end":210965,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":210966,"byte_end":211039,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4981},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212844,"byte_end":212854,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":4984},{"krate":0,"index":4985}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212384,"byte_end":212454,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212455,"byte_end":212524,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212525,"byte_end":212587,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212588,"byte_end":212591,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212592,"byte_end":212666,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212667,"byte_end":212734,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":212735,"byte_end":212808,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4994},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221767,"byte_end":221785,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":4997}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221223,"byte_end":221286,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221287,"byte_end":221355,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221356,"byte_end":221385,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221386,"byte_end":221389,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221390,"byte_end":221459,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221460,"byte_end":221492,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221493,"byte_end":221496,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221497,"byte_end":221589,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221590,"byte_end":221657,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":221658,"byte_end":221731,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5006},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223989,"byte_end":224000,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":5008},{"krate":0,"index":5009}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223557,"byte_end":223633,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223634,"byte_end":223698,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223699,"byte_end":223751,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223752,"byte_end":223755,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223756,"byte_end":223825,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223826,"byte_end":223879,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":223880,"byte_end":223953,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5016},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233883,"byte_end":233889,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":5019},{"krate":0,"index":5020}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233472,"byte_end":233531,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233532,"byte_end":233580,"line_start":8,"line_end":8,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233581,"byte_end":233584,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233585,"byte_end":233662,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233663,"byte_end":233666,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233667,"byte_end":233726,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233727,"byte_end":233780,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233781,"byte_end":233854,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5038},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242589,"byte_end":242592,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":5040}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242199,"byte_end":242276,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242277,"byte_end":242346,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242347,"byte_end":242350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242351,"byte_end":242411,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242412,"byte_end":242479,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242480,"byte_end":242553,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5047},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245520,"byte_end":245526,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":5049},{"krate":0,"index":5050}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245106,"byte_end":245183,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245184,"byte_end":245269,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245270,"byte_end":245273,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`min_len()`]: trait.IndexedParallelIterator.html#method.min_len","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245274,"byte_end":245342,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245343,"byte_end":245410,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245411,"byte_end":245484,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5057},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248698,"byte_end":248704,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":5059},{"krate":0,"index":5060}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248284,"byte_end":248361,"line_start":132,"line_end":132,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248362,"byte_end":248447,"line_start":133,"line_end":133,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248448,"byte_end":248451,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`max_len()`]: trait.IndexedParallelIterator.html#method.max_len","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248452,"byte_end":248520,"line_start":135,"line_end":135,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248521,"byte_end":248588,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":248589,"byte_end":248662,"line_start":137,"line_end":137,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5067},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255947,"byte_end":255953,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":5069}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255558,"byte_end":255637,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255638,"byte_end":255641,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255642,"byte_end":255719,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255720,"byte_end":255723,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255724,"byte_end":255783,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255784,"byte_end":255837,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":255838,"byte_end":255911,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5076},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260684,"byte_end":260691,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":5079},{"krate":0,"index":5080}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260271,"byte_end":260346,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260347,"byte_end":260378,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260379,"byte_end":260382,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260383,"byte_end":260461,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260462,"byte_end":260465,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260466,"byte_end":260527,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260528,"byte_end":260581,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260582,"byte_end":260655,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5085},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266745,"byte_end":266754,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":5087}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266298,"byte_end":266376,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266377,"byte_end":266423,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266424,"byte_end":266427,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266428,"byte_end":266509,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266510,"byte_end":266513,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266514,"byte_end":266581,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266582,"byte_end":266635,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":266636,"byte_end":266709,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":2917},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279429,"byte_end":279433,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":2915},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279368,"byte_end":279419,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":2918},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279508,"byte_end":279513,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":2915},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279446,"byte_end":279498,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":5094},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290081,"byte_end":290087,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":5096}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":289978,"byte_end":290045,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":3088},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290639,"byte_end":290645,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"pub fn repeat<T: Clone + Send>(T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290126,"byte_end":290190,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290191,"byte_end":290257,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290258,"byte_end":290323,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290324,"byte_end":290366,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290367,"byte_end":290423,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290424,"byte_end":290427,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290428,"byte_end":290442,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290443,"byte_end":290446,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290447,"byte_end":290454,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290455,"byte_end":290481,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290482,"byte_end":290510,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290511,"byte_end":290571,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290572,"byte_end":290623,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290624,"byte_end":290631,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291041,"byte_end":291045,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"pub fn take(Self, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Take only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Take only `n` repeats of the element, similar to the general","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290767,"byte_end":290831,"line_start":33,"line_end":33,"column_start":5,"column_end":69}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290836,"byte_end":290899,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290904,"byte_end":290907,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290912,"byte_end":290981,"line_start":36,"line_end":36,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290986,"byte_end":291029,"line_start":37,"line_end":37,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291305,"byte_end":291308,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<RepeatN<T>, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate tuples repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterate tuples repeating the element with items from another","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291122,"byte_end":291186,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/ iterator, similar to the general","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291191,"byte_end":291227,"line_start":43,"line_end":43,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291232,"byte_end":291293,"line_start":44,"line_end":44,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5103},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292463,"byte_end":292470,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":5105},{"krate":0,"index":5106}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292358,"byte_end":292427,"line_start":89,"line_end":89,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3109},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292835,"byte_end":292842,"line_start":107,"line_end":107,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"pub fn repeatn<T: Clone + Send>(T, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292527,"byte_end":292593,"line_start":96,"line_end":96,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292594,"byte_end":292614,"line_start":97,"line_end":97,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292615,"byte_end":292618,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292619,"byte_end":292633,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292634,"byte_end":292637,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292638,"byte_end":292645,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292646,"byte_end":292672,"line_start":102,"line_end":102,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292673,"byte_end":292702,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292703,"byte_end":292767,"line_start":104,"line_end":104,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292768,"byte_end":292819,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292820,"byte_end":292827,"line_start":106,"line_end":106,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3175},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295628,"byte_end":295633,"line_start":25,"line_end":25,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"pub fn empty<T: Send>() -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295210,"byte_end":295264,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295265,"byte_end":295268,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295269,"byte_end":295346,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295347,"byte_end":295389,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295390,"byte_end":295393,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295394,"byte_end":295408,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295409,"byte_end":295412,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295413,"byte_end":295420,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295421,"byte_end":295447,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295448,"byte_end":295475,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295476,"byte_end":295479,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295480,"byte_end":295518,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295519,"byte_end":295542,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295543,"byte_end":295572,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295573,"byte_end":295576,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295577,"byte_end":295612,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295613,"byte_end":295620,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3177},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295773,"byte_end":295778,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":3179}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295696,"byte_end":295761,"line_start":29,"line_end":29,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":3221},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297922,"byte_end":297926,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"pub fn once<T: Send>(T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297280,"byte_end":297350,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297351,"byte_end":297354,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297355,"byte_end":297433,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297434,"byte_end":297513,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297514,"byte_end":297561,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297562,"byte_end":297565,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297566,"byte_end":297580,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297581,"byte_end":297584,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297585,"byte_end":297592,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297593,"byte_end":297619,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297620,"byte_end":297646,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297647,"byte_end":297650,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297651,"byte_end":297689,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297690,"byte_end":297714,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297715,"byte_end":297744,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297745,"byte_end":297748,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297749,"byte_end":297792,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297793,"byte_end":297850,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297851,"byte_end":297906,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297907,"byte_end":297914,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":5113},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":298084,"byte_end":298088,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":5115}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":297985,"byte_end":298048,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":3243},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27578,"byte_end":27598,"line_start":168,"line_end":168,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27130,"byte_end":27209,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27210,"byte_end":27213,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27214,"byte_end":27291,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27292,"byte_end":27368,"line_start":163,"line_end":163,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27369,"byte_end":27417,"line_start":164,"line_end":164,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27418,"byte_end":27421,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27422,"byte_end":27475,"line_start":166,"line_end":166,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27476,"byte_end":27567,"line_start":167,"line_end":167,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":3244},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27667,"byte_end":27671,"line_start":170,"line_end":170,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3243},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27605,"byte_end":27657,"line_start":169,"line_end":169,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":3245},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27786,"byte_end":27790,"line_start":173,"line_end":173,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3243},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27715,"byte_end":27776,"line_start":172,"line_end":172,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3246},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28441,"byte_end":28454,"line_start":197,"line_end":197,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"pub fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":3243},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27803,"byte_end":27848,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27853,"byte_end":27856,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27861,"byte_end":27875,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27880,"byte_end":27883,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27888,"byte_end":27895,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27900,"byte_end":27926,"line_start":180,"line_end":180,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27931,"byte_end":27934,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27939,"byte_end":27977,"line_start":182,"line_end":182,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":27982,"byte_end":28010,"line_start":183,"line_end":183,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28015,"byte_end":28056,"line_start":184,"line_end":184,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28061,"byte_end":28068,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28073,"byte_end":28076,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28081,"byte_end":28157,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28162,"byte_end":28165,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28170,"byte_end":28177,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28182,"byte_end":28208,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28213,"byte_end":28216,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28221,"byte_end":28285,"line_start":192,"line_end":192,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28290,"byte_end":28350,"line_start":193,"line_end":193,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28355,"byte_end":28362,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28367,"byte_end":28370,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28375,"byte_end":28433,"line_start":196,"line_end":196,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":3247},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29043,"byte_end":29066,"line_start":213,"line_end":213,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28479,"byte_end":28539,"line_start":200,"line_end":200,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28540,"byte_end":28606,"line_start":201,"line_end":201,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28607,"byte_end":28610,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28611,"byte_end":28664,"line_start":203,"line_end":203,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28665,"byte_end":28700,"line_start":204,"line_end":204,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28701,"byte_end":28704,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28705,"byte_end":28748,"line_start":206,"line_end":206,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28749,"byte_end":28813,"line_start":207,"line_end":207,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28814,"byte_end":28887,"line_start":208,"line_end":208,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28888,"byte_end":28912,"line_start":209,"line_end":209,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28913,"byte_end":28916,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28917,"byte_end":28970,"line_start":211,"line_end":211,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":28971,"byte_end":29032,"line_start":212,"line_end":212,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3249},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29150,"byte_end":29154,"line_start":215,"line_end":215,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3247},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29080,"byte_end":29140,"line_start":214,"line_end":214,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":3250},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29330,"byte_end":29334,"line_start":219,"line_end":219,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3247},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29198,"byte_end":29259,"line_start":217,"line_end":217,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29264,"byte_end":29320,"line_start":218,"line_end":218,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3251},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29824,"byte_end":29832,"line_start":236,"line_end":236,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"pub fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":3247},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29355,"byte_end":29400,"line_start":221,"line_end":221,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29405,"byte_end":29408,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29413,"byte_end":29427,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29432,"byte_end":29435,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29440,"byte_end":29447,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29452,"byte_end":29478,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29483,"byte_end":29486,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29491,"byte_end":29530,"line_start":228,"line_end":228,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29535,"byte_end":29591,"line_start":229,"line_end":229,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29596,"byte_end":29599,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29604,"byte_end":29666,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29671,"byte_end":29714,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29719,"byte_end":29751,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29756,"byte_end":29804,"line_start":234,"line_end":234,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29809,"byte_end":29816,"line_start":235,"line_end":235,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3258},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30752,"byte_end":30778,"line_start":264,"line_end":264,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30176,"byte_end":30239,"line_start":251,"line_end":251,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30240,"byte_end":30307,"line_start":252,"line_end":252,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30308,"byte_end":30311,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30312,"byte_end":30369,"line_start":254,"line_end":254,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30370,"byte_end":30405,"line_start":255,"line_end":255,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30406,"byte_end":30409,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30410,"byte_end":30453,"line_start":257,"line_end":257,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30454,"byte_end":30522,"line_start":258,"line_end":258,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30523,"byte_end":30596,"line_start":259,"line_end":259,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30597,"byte_end":30621,"line_start":260,"line_end":260,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30622,"byte_end":30625,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30626,"byte_end":30679,"line_start":262,"line_end":262,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30680,"byte_end":30741,"line_start":263,"line_end":263,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3260},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30848,"byte_end":30852,"line_start":266,"line_end":266,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30792,"byte_end":30838,"line_start":265,"line_end":265,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":3261},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31004,"byte_end":31008,"line_start":270,"line_end":270,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30896,"byte_end":30960,"line_start":268,"line_end":268,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":30965,"byte_end":30994,"line_start":269,"line_end":269,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31322,"byte_end":31334,"line_start":283,"line_end":283,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"pub fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31029,"byte_end":31075,"line_start":272,"line_end":272,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31080,"byte_end":31083,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31088,"byte_end":31102,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31107,"byte_end":31110,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31115,"byte_end":31122,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31127,"byte_end":31153,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31158,"byte_end":31161,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31166,"byte_end":31198,"line_start":279,"line_end":279,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31203,"byte_end":31262,"line_start":280,"line_end":280,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31267,"byte_end":31302,"line_start":281,"line_end":281,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31307,"byte_end":31314,"line_start":282,"line_end":282,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3269},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32310,"byte_end":32326,"line_start":311,"line_end":311,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":3270},{"krate":0,"index":3271},{"krate":0,"index":3273},{"krate":0,"index":3277},{"krate":0,"index":3279},{"krate":0,"index":3282},{"krate":0,"index":3286},{"krate":0,"index":3289},{"krate":0,"index":3291},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3298},{"krate":0,"index":3301},{"krate":0,"index":3302},{"krate":0,"index":3305},{"krate":0,"index":3311},{"krate":0,"index":3315},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3326},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3336},{"krate":0,"index":3342},{"krate":0,"index":3344},{"krate":0,"index":3346},{"krate":0,"index":3348},{"krate":0,"index":3350},{"krate":0,"index":3352},{"krate":0,"index":3355},{"krate":0,"index":3358},{"krate":0,"index":3360},{"krate":0,"index":3362},{"krate":0,"index":3367},{"krate":0,"index":3371},{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3380}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31704,"byte_end":31756,"line_start":297,"line_end":297,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31757,"byte_end":31760,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31761,"byte_end":31828,"line_start":299,"line_end":299,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31829,"byte_end":31883,"line_start":300,"line_end":300,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31884,"byte_end":31945,"line_start":301,"line_end":301,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31946,"byte_end":32011,"line_start":302,"line_end":302,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32012,"byte_end":32082,"line_start":303,"line_end":303,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32083,"byte_end":32107,"line_start":304,"line_end":304,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32108,"byte_end":32111,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32112,"byte_end":32178,"line_start":306,"line_end":306,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32179,"byte_end":32204,"line_start":307,"line_end":307,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32205,"byte_end":32208,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32209,"byte_end":32231,"line_start":309,"line_end":309,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32232,"byte_end":32299,"line_start":310,"line_end":310,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":3270},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32592,"byte_end":32596,"line_start":317,"line_end":317,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32347,"byte_end":32405,"line_start":312,"line_end":312,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32410,"byte_end":32482,"line_start":313,"line_end":313,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32487,"byte_end":32535,"line_start":314,"line_end":314,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32540,"byte_end":32543,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32548,"byte_end":32582,"line_start":316,"line_end":316,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32852,"byte_end":32860,"line_start":328,"line_end":328,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"pub fn for_each<OP>(Self, OP) where OP: Fn(Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32609,"byte_end":32678,"line_start":319,"line_end":319,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32683,"byte_end":32686,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32691,"byte_end":32705,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32710,"byte_end":32713,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32718,"byte_end":32725,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32730,"byte_end":32756,"line_start":324,"line_end":324,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32761,"byte_end":32764,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32769,"byte_end":32832,"line_start":326,"line_end":326,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32837,"byte_end":32844,"line_start":327,"line_end":327,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3273},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33690,"byte_end":33703,"line_start":357,"line_end":357,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"pub fn for_each_with<OP, T>(Self, T, OP) where OP: Fn(&mut T, Self::Item) ->\n() + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32981,"byte_end":33051,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33056,"byte_end":33086,"line_start":335,"line_end":335,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33091,"byte_end":33094,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33099,"byte_end":33167,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33172,"byte_end":33243,"line_start":338,"line_end":338,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33248,"byte_end":33265,"line_start":339,"line_end":339,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33270,"byte_end":33273,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33278,"byte_end":33292,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33297,"byte_end":33300,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33305,"byte_end":33312,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33317,"byte_end":33350,"line_start":344,"line_end":344,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33355,"byte_end":33381,"line_start":345,"line_end":345,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33386,"byte_end":33389,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33394,"byte_end":33433,"line_start":347,"line_end":347,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33438,"byte_end":33441,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33446,"byte_end":33522,"line_start":349,"line_end":349,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33527,"byte_end":33530,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33535,"byte_end":33587,"line_start":351,"line_end":351,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33592,"byte_end":33595,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33600,"byte_end":33615,"line_start":353,"line_end":353,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33620,"byte_end":33623,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33628,"byte_end":33670,"line_start":355,"line_end":355,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33675,"byte_end":33682,"line_start":356,"line_end":356,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3277},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34144,"byte_end":34149,"line_start":375,"line_end":375,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"pub fn count(Self) -> usize","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33887,"byte_end":33944,"line_start":364,"line_end":364,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33949,"byte_end":33952,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33957,"byte_end":33971,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33976,"byte_end":33979,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33984,"byte_end":33991,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":33996,"byte_end":34022,"line_start":369,"line_end":369,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34027,"byte_end":34030,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34035,"byte_end":34084,"line_start":371,"line_end":371,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34089,"byte_end":34092,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34097,"byte_end":34124,"line_start":373,"line_end":373,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34129,"byte_end":34136,"line_start":374,"line_end":374,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3279},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34600,"byte_end":34603,"line_start":393,"line_end":393,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"pub fn map<F, R>(Self, F) -> Map<Self, F> where F: Fn(Self::Item) -> R +\nSync + Send, R: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34208,"byte_end":34275,"line_start":379,"line_end":379,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34280,"byte_end":34310,"line_start":380,"line_end":380,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34315,"byte_end":34318,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34323,"byte_end":34337,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34342,"byte_end":34345,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34350,"byte_end":34357,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34362,"byte_end":34388,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34393,"byte_end":34396,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34401,"byte_end":34462,"line_start":387,"line_end":387,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34467,"byte_end":34470,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34475,"byte_end":34520,"line_start":389,"line_end":389,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34525,"byte_end":34528,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34533,"byte_end":34580,"line_start":391,"line_end":391,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34585,"byte_end":34592,"line_start":392,"line_end":392,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35947,"byte_end":35955,"line_start":429,"line_end":429,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"pub fn map_with<F, T, R>(Self, T, F) -> MapWith<Self, T, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34765,"byte_end":34834,"line_start":400,"line_end":400,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34839,"byte_end":34895,"line_start":401,"line_end":401,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34900,"byte_end":34903,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34908,"byte_end":34976,"line_start":403,"line_end":403,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":34981,"byte_end":35052,"line_start":404,"line_end":404,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35057,"byte_end":35074,"line_start":405,"line_end":405,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35079,"byte_end":35082,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35087,"byte_end":35101,"line_start":407,"line_end":407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35106,"byte_end":35109,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35114,"byte_end":35121,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35126,"byte_end":35159,"line_start":410,"line_end":410,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35164,"byte_end":35190,"line_start":411,"line_end":411,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35195,"byte_end":35198,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35203,"byte_end":35242,"line_start":413,"line_end":413,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35247,"byte_end":35250,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35255,"byte_end":35281,"line_start":415,"line_end":415,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35286,"byte_end":35355,"line_start":416,"line_end":416,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35360,"byte_end":35406,"line_start":417,"line_end":417,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35411,"byte_end":35500,"line_start":418,"line_end":418,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35505,"byte_end":35569,"line_start":419,"line_end":419,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35574,"byte_end":35596,"line_start":420,"line_end":420,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35601,"byte_end":35696,"line_start":421,"line_end":421,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35701,"byte_end":35704,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35709,"byte_end":35800,"line_start":423,"line_end":423,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35805,"byte_end":35875,"line_start":424,"line_end":424,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35880,"byte_end":35893,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35898,"byte_end":35901,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35906,"byte_end":35927,"line_start":427,"line_end":427,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":35932,"byte_end":35939,"line_start":428,"line_end":428,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3286},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36758,"byte_end":36764,"line_start":455,"line_end":455,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"pub fn cloned<'a, T>(Self) -> Cloned<Self> where T: 'a + Clone + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`.","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36186,"byte_end":36256,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36261,"byte_end":36326,"line_start":438,"line_end":438,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36331,"byte_end":36334,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36339,"byte_end":36353,"line_start":440,"line_end":440,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36358,"byte_end":36361,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36366,"byte_end":36373,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36378,"byte_end":36404,"line_start":443,"line_end":443,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36409,"byte_end":36412,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36417,"byte_end":36439,"line_start":445,"line_end":445,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36444,"byte_end":36447,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36452,"byte_end":36511,"line_start":447,"line_end":447,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36516,"byte_end":36519,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36524,"byte_end":36579,"line_start":449,"line_end":449,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36584,"byte_end":36643,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36648,"byte_end":36651,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36656,"byte_end":36696,"line_start":452,"line_end":452,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36701,"byte_end":36738,"line_start":453,"line_end":453,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36743,"byte_end":36750,"line_start":454,"line_end":454,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37960,"byte_end":37967,"line_start":491,"line_end":491,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"pub fn inspect<OP>(Self, OP) -> Inspect<Self, OP> where OP: Fn(&Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36924,"byte_end":36994,"line_start":462,"line_end":462,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":36999,"byte_end":37072,"line_start":463,"line_end":463,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37077,"byte_end":37151,"line_start":464,"line_end":464,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37156,"byte_end":37159,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37164,"byte_end":37178,"line_start":466,"line_end":466,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37183,"byte_end":37186,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37191,"byte_end":37198,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37203,"byte_end":37229,"line_start":469,"line_end":469,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37234,"byte_end":37237,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37242,"byte_end":37267,"line_start":471,"line_end":471,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37272,"byte_end":37275,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37280,"byte_end":37321,"line_start":473,"line_end":473,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37326,"byte_end":37352,"line_start":474,"line_end":474,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37357,"byte_end":37382,"line_start":475,"line_end":475,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37387,"byte_end":37427,"line_start":476,"line_end":476,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37432,"byte_end":37480,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37485,"byte_end":37488,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37493,"byte_end":37517,"line_start":479,"line_end":479,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37522,"byte_end":37525,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37530,"byte_end":37599,"line_start":481,"line_end":481,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37604,"byte_end":37630,"line_start":482,"line_end":482,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37635,"byte_end":37660,"line_start":483,"line_end":483,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37665,"byte_end":37729,"line_start":484,"line_end":484,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37734,"byte_end":37774,"line_start":485,"line_end":485,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37779,"byte_end":37850,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37855,"byte_end":37903,"line_start":487,"line_end":487,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37908,"byte_end":37911,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37916,"byte_end":37940,"line_start":489,"line_end":489,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":37945,"byte_end":37952,"line_start":490,"line_end":490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3291},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38471,"byte_end":38477,"line_start":510,"line_end":510,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where F: Fn(&mut Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38119,"byte_end":38177,"line_start":497,"line_end":497,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38182,"byte_end":38185,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38190,"byte_end":38204,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38209,"byte_end":38212,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38217,"byte_end":38224,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38229,"byte_end":38255,"line_start":502,"line_end":502,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38260,"byte_end":38263,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38268,"byte_end":38333,"line_start":504,"line_end":504,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38338,"byte_end":38341,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38346,"byte_end":38391,"line_start":506,"line_end":506,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38396,"byte_end":38399,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38404,"byte_end":38451,"line_start":508,"line_end":508,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38456,"byte_end":38463,"line_start":509,"line_end":509,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3293},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39067,"byte_end":39073,"line_start":530,"line_end":530,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"pub fn filter<P>(Self, P) -> Filter<Self, P> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38625,"byte_end":38695,"line_start":516,"line_end":516,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38700,"byte_end":38758,"line_start":517,"line_end":517,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38763,"byte_end":38766,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38771,"byte_end":38785,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38790,"byte_end":38793,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38798,"byte_end":38805,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38810,"byte_end":38836,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38841,"byte_end":38844,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38849,"byte_end":38919,"line_start":524,"line_end":524,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38924,"byte_end":38927,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38932,"byte_end":38982,"line_start":526,"line_end":526,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38987,"byte_end":38990,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":38995,"byte_end":39047,"line_start":528,"line_end":528,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39052,"byte_end":39059,"line_start":529,"line_end":529,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3295},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39862,"byte_end":39872,"line_start":554,"line_end":554,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"pub fn filter_map<P, R>(Self, P) -> FilterMap<Self, P> where P: Fn(Self::Item)\n-> Option<R> + Sync + Send, R: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39225,"byte_end":39298,"line_start":536,"line_end":536,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39303,"byte_end":39372,"line_start":537,"line_end":537,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39377,"byte_end":39380,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39385,"byte_end":39399,"line_start":539,"line_end":539,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39404,"byte_end":39407,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39412,"byte_end":39419,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39424,"byte_end":39450,"line_start":542,"line_end":542,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39455,"byte_end":39458,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39463,"byte_end":39509,"line_start":544,"line_end":544,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39514,"byte_end":39559,"line_start":545,"line_end":545,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39564,"byte_end":39625,"line_start":546,"line_end":546,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39630,"byte_end":39675,"line_start":547,"line_end":547,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39680,"byte_end":39711,"line_start":548,"line_end":548,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39716,"byte_end":39719,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39724,"byte_end":39774,"line_start":550,"line_end":550,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39779,"byte_end":39782,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39787,"byte_end":39842,"line_start":552,"line_end":552,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":39847,"byte_end":39854,"line_start":553,"line_end":553,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3298},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40558,"byte_end":40566,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"pub fn flat_map<F, PI>(Self, F) -> FlatMap<Self, F> where F: Fn(Self::Item) ->\nPI + Sync + Send, PI: IntoParallelIterator","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested iterators,\n producing a new iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested iterators,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40061,"byte_end":40136,"line_start":561,"line_end":561,"column_start":5,"column_end":80}},{"value":"/ producing a new iterator that flattens these back into one.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40141,"byte_end":40204,"line_start":562,"line_end":562,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40209,"byte_end":40212,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40217,"byte_end":40231,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40236,"byte_end":40239,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40244,"byte_end":40251,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40256,"byte_end":40282,"line_start":567,"line_end":567,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40287,"byte_end":40290,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40295,"byte_end":40340,"line_start":569,"line_end":569,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40345,"byte_end":40348,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40353,"byte_end":40419,"line_start":571,"line_end":571,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40424,"byte_end":40427,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40432,"byte_end":40473,"line_start":573,"line_end":573,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40478,"byte_end":40481,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40486,"byte_end":40538,"line_start":575,"line_end":575,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40543,"byte_end":40550,"line_start":576,"line_end":576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41102,"byte_end":41109,"line_start":596,"line_end":596,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Item: IntoParallelIterator","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" An adaptor that flattens iterable `Item`s into one large iterator","sig":null,"attributes":[{"value":"/ An adaptor that flattens iterable `Item`s into one large iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40756,"byte_end":40825,"line_start":584,"line_end":584,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40830,"byte_end":40833,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40838,"byte_end":40852,"line_start":586,"line_end":586,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40857,"byte_end":40860,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40865,"byte_end":40872,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40877,"byte_end":40903,"line_start":589,"line_end":589,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40908,"byte_end":40911,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40916,"byte_end":40970,"line_start":591,"line_end":591,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":40975,"byte_end":41033,"line_start":592,"line_end":592,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41038,"byte_end":41041,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41046,"byte_end":41082,"line_start":594,"line_end":594,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41087,"byte_end":41094,"line_start":595,"line_end":595,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42789,"byte_end":42795,"line_start":632,"line_end":632,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"pub fn reduce<OP, ID>(Self, ID, OP) -> Self::Item where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send, ID: Fn() ->\nSelf::Item + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41224,"byte_end":41287,"line_start":602,"line_end":602,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41292,"byte_end":41356,"line_start":603,"line_end":603,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41361,"byte_end":41424,"line_start":604,"line_end":604,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41429,"byte_end":41495,"line_start":605,"line_end":605,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41500,"byte_end":41566,"line_start":606,"line_end":606,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41571,"byte_end":41634,"line_start":607,"line_end":607,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41639,"byte_end":41692,"line_start":608,"line_end":608,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41697,"byte_end":41700,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41705,"byte_end":41719,"line_start":610,"line_end":610,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41724,"byte_end":41727,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41732,"byte_end":41739,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41744,"byte_end":41809,"line_start":613,"line_end":613,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41814,"byte_end":41888,"line_start":614,"line_end":614,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41893,"byte_end":41954,"line_start":615,"line_end":615,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41959,"byte_end":41985,"line_start":616,"line_end":616,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":41990,"byte_end":42038,"line_start":617,"line_end":617,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42043,"byte_end":42106,"line_start":618,"line_end":618,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42111,"byte_end":42173,"line_start":619,"line_end":619,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42178,"byte_end":42250,"line_start":620,"line_end":620,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42255,"byte_end":42309,"line_start":621,"line_end":621,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42314,"byte_end":42368,"line_start":622,"line_end":622,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42373,"byte_end":42380,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42385,"byte_end":42388,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42393,"byte_end":42457,"line_start":625,"line_end":625,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42462,"byte_end":42526,"line_start":626,"line_end":626,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42531,"byte_end":42597,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42602,"byte_end":42666,"line_start":628,"line_end":628,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42671,"byte_end":42699,"line_start":629,"line_end":629,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42704,"byte_end":42707,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":42712,"byte_end":42781,"line_start":631,"line_end":631,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3305},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44137,"byte_end":44148,"line_start":665,"line_end":665,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"pub fn reduce_with<OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43031,"byte_end":43094,"line_start":639,"line_end":639,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43099,"byte_end":43159,"line_start":640,"line_end":640,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43164,"byte_end":43187,"line_start":641,"line_end":641,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43192,"byte_end":43195,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43200,"byte_end":43256,"line_start":643,"line_end":643,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43261,"byte_end":43327,"line_start":644,"line_end":644,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43332,"byte_end":43365,"line_start":645,"line_end":645,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43370,"byte_end":43373,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43378,"byte_end":43392,"line_start":647,"line_end":647,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43397,"byte_end":43400,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43405,"byte_end":43412,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43417,"byte_end":43443,"line_start":650,"line_end":650,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43448,"byte_end":43496,"line_start":651,"line_end":651,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43501,"byte_end":43564,"line_start":652,"line_end":652,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43569,"byte_end":43631,"line_start":653,"line_end":653,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43636,"byte_end":43694,"line_start":654,"line_end":654,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43699,"byte_end":43724,"line_start":655,"line_end":655,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43729,"byte_end":43783,"line_start":656,"line_end":656,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43788,"byte_end":43795,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43800,"byte_end":43803,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43808,"byte_end":43872,"line_start":659,"line_end":659,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43877,"byte_end":43941,"line_start":660,"line_end":660,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":43946,"byte_end":44012,"line_start":661,"line_end":661,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44017,"byte_end":44047,"line_start":662,"line_end":662,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44052,"byte_end":44055,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44060,"byte_end":44129,"line_start":664,"line_end":664,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50231,"byte_end":50235,"line_start":812,"line_end":812,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"pub fn fold<T, ID, F>(Self, ID, F) -> Fold<Self, ID, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, ID: Fn() -> T + Sync + Send, T: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44658,"byte_end":44721,"line_start":679,"line_end":679,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44726,"byte_end":44778,"line_start":680,"line_end":680,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44783,"byte_end":44846,"line_start":681,"line_end":681,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44851,"byte_end":44914,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44919,"byte_end":44984,"line_start":683,"line_end":683,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":44989,"byte_end":45055,"line_start":684,"line_end":684,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45060,"byte_end":45122,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45127,"byte_end":45191,"line_start":686,"line_end":686,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45196,"byte_end":45260,"line_start":687,"line_end":687,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45265,"byte_end":45305,"line_start":688,"line_end":688,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45310,"byte_end":45313,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ So if did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45318,"byte_end":45380,"line_start":690,"line_end":690,"column_start":5,"column_end":67}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45385,"byte_end":45455,"line_start":691,"line_end":691,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45460,"byte_end":45472,"line_start":692,"line_end":692,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45477,"byte_end":45480,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45485,"byte_end":45499,"line_start":694,"line_end":694,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45504,"byte_end":45521,"line_start":695,"line_end":695,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45526,"byte_end":45543,"line_start":696,"line_end":696,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45548,"byte_end":45565,"line_start":697,"line_end":697,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45570,"byte_end":45577,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45582,"byte_end":45585,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45590,"byte_end":45625,"line_start":700,"line_end":700,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45630,"byte_end":45633,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45638,"byte_end":45652,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45657,"byte_end":45674,"line_start":703,"line_end":703,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45679,"byte_end":45696,"line_start":704,"line_end":704,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45701,"byte_end":45718,"line_start":705,"line_end":705,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45723,"byte_end":45730,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45735,"byte_end":45738,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45743,"byte_end":45806,"line_start":708,"line_end":708,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45811,"byte_end":45848,"line_start":709,"line_end":709,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45853,"byte_end":45856,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45861,"byte_end":45887,"line_start":711,"line_end":711,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45892,"byte_end":45895,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45900,"byte_end":45969,"line_start":713,"line_end":713,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":45974,"byte_end":46040,"line_start":714,"line_end":714,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46045,"byte_end":46048,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46053,"byte_end":46116,"line_start":716,"line_end":716,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46121,"byte_end":46180,"line_start":717,"line_end":717,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46185,"byte_end":46251,"line_start":718,"line_end":718,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46256,"byte_end":46322,"line_start":719,"line_end":719,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46327,"byte_end":46391,"line_start":720,"line_end":720,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46396,"byte_end":46459,"line_start":721,"line_end":721,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46464,"byte_end":46529,"line_start":722,"line_end":722,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46534,"byte_end":46597,"line_start":723,"line_end":723,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46602,"byte_end":46667,"line_start":724,"line_end":724,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46672,"byte_end":46738,"line_start":725,"line_end":725,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46743,"byte_end":46799,"line_start":726,"line_end":726,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46804,"byte_end":46807,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46812,"byte_end":46874,"line_start":728,"line_end":728,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46879,"byte_end":46941,"line_start":729,"line_end":729,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":46946,"byte_end":47008,"line_start":730,"line_end":730,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47013,"byte_end":47079,"line_start":731,"line_end":731,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47084,"byte_end":47148,"line_start":732,"line_end":732,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47153,"byte_end":47217,"line_start":733,"line_end":733,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47222,"byte_end":47244,"line_start":734,"line_end":734,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47249,"byte_end":47252,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47257,"byte_end":47316,"line_start":736,"line_end":736,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47321,"byte_end":47387,"line_start":737,"line_end":737,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47392,"byte_end":47456,"line_start":738,"line_end":738,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47461,"byte_end":47520,"line_start":739,"line_end":739,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47525,"byte_end":47591,"line_start":740,"line_end":740,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47596,"byte_end":47661,"line_start":741,"line_end":741,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47666,"byte_end":47728,"line_start":742,"line_end":742,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47733,"byte_end":47760,"line_start":743,"line_end":743,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47765,"byte_end":47768,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47773,"byte_end":47799,"line_start":745,"line_end":745,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47804,"byte_end":47807,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47812,"byte_end":47871,"line_start":747,"line_end":747,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47876,"byte_end":47940,"line_start":748,"line_end":748,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":47945,"byte_end":48011,"line_start":749,"line_end":749,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48016,"byte_end":48058,"line_start":750,"line_end":750,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48063,"byte_end":48066,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48071,"byte_end":48078,"line_start":752,"line_end":752,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48083,"byte_end":48109,"line_start":753,"line_end":753,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48114,"byte_end":48117,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48122,"byte_end":48133,"line_start":755,"line_end":755,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48138,"byte_end":48171,"line_start":756,"line_end":756,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48176,"byte_end":48195,"line_start":757,"line_end":757,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48200,"byte_end":48241,"line_start":758,"line_end":758,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48246,"byte_end":48279,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48284,"byte_end":48350,"line_start":760,"line_end":760,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48355,"byte_end":48358,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48363,"byte_end":48390,"line_start":762,"line_end":762,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48395,"byte_end":48402,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48407,"byte_end":48410,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48415,"byte_end":48481,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48486,"byte_end":48550,"line_start":766,"line_end":766,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48555,"byte_end":48615,"line_start":767,"line_end":767,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48620,"byte_end":48685,"line_start":768,"line_end":768,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48690,"byte_end":48710,"line_start":769,"line_end":769,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48715,"byte_end":48718,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48723,"byte_end":48730,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48735,"byte_end":48761,"line_start":772,"line_end":772,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48766,"byte_end":48769,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48774,"byte_end":48785,"line_start":774,"line_end":774,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48790,"byte_end":48823,"line_start":775,"line_end":775,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48828,"byte_end":48847,"line_start":776,"line_end":776,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48852,"byte_end":48883,"line_start":777,"line_end":777,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48888,"byte_end":48948,"line_start":778,"line_end":778,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48953,"byte_end":48986,"line_start":779,"line_end":779,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":48991,"byte_end":49057,"line_start":780,"line_end":780,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49062,"byte_end":49065,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49070,"byte_end":49097,"line_start":782,"line_end":782,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49102,"byte_end":49109,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49114,"byte_end":49117,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49122,"byte_end":49185,"line_start":785,"line_end":785,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49190,"byte_end":49255,"line_start":786,"line_end":786,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49260,"byte_end":49324,"line_start":787,"line_end":787,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49329,"byte_end":49395,"line_start":788,"line_end":788,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49400,"byte_end":49464,"line_start":789,"line_end":789,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49469,"byte_end":49532,"line_start":790,"line_end":790,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49537,"byte_end":49548,"line_start":791,"line_end":791,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49553,"byte_end":49556,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49561,"byte_end":49627,"line_start":793,"line_end":793,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49632,"byte_end":49664,"line_start":794,"line_end":794,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49669,"byte_end":49672,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49677,"byte_end":49721,"line_start":796,"line_end":796,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49726,"byte_end":49729,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49734,"byte_end":49799,"line_start":798,"line_end":798,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49804,"byte_end":49869,"line_start":799,"line_end":799,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49874,"byte_end":49900,"line_start":800,"line_end":800,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49905,"byte_end":49908,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49913,"byte_end":49920,"line_start":802,"line_end":802,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49925,"byte_end":49951,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49956,"byte_end":49959,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49964,"byte_end":49989,"line_start":805,"line_end":805,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":49994,"byte_end":50029,"line_start":806,"line_end":806,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50034,"byte_end":50100,"line_start":807,"line_end":807,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50105,"byte_end":50138,"line_start":808,"line_end":808,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50143,"byte_end":50146,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50151,"byte_end":50211,"line_start":810,"line_end":810,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50216,"byte_end":50223,"line_start":811,"line_end":811,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3315},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51168,"byte_end":51177,"line_start":839,"line_end":839,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"pub fn fold_with<F, T>(Self, T, F) -> FoldWith<Self, T, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50480,"byte_end":50550,"line_start":820,"line_end":820,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50555,"byte_end":50613,"line_start":821,"line_end":821,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50618,"byte_end":50621,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50626,"byte_end":50698,"line_start":823,"line_end":823,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50703,"byte_end":50774,"line_start":824,"line_end":824,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50779,"byte_end":50808,"line_start":825,"line_end":825,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50813,"byte_end":50816,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50821,"byte_end":50835,"line_start":827,"line_end":827,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50840,"byte_end":50843,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50848,"byte_end":50855,"line_start":829,"line_end":829,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50860,"byte_end":50886,"line_start":830,"line_end":830,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50891,"byte_end":50894,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50899,"byte_end":50924,"line_start":832,"line_end":832,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50929,"byte_end":50964,"line_start":833,"line_end":833,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":50969,"byte_end":51037,"line_start":834,"line_end":834,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51042,"byte_end":51075,"line_start":835,"line_end":835,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51080,"byte_end":51083,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51088,"byte_end":51148,"line_start":837,"line_end":837,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51153,"byte_end":51160,"line_start":838,"line_end":838,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52165,"byte_end":52168,"line_start":870,"line_end":870,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"pub fn sum<S>(Self) -> S where S: Send + Sum<Self::Item> + Sum<S>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51382,"byte_end":51420,"line_start":846,"line_end":846,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51425,"byte_end":51428,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51433,"byte_end":51499,"line_start":848,"line_end":848,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51504,"byte_end":51569,"line_start":849,"line_end":849,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51574,"byte_end":51636,"line_start":850,"line_end":850,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51641,"byte_end":51665,"line_start":851,"line_end":851,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51670,"byte_end":51673,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51678,"byte_end":51747,"line_start":853,"line_end":853,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51752,"byte_end":51755,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51760,"byte_end":51822,"line_start":855,"line_end":855,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51827,"byte_end":51889,"line_start":856,"line_end":856,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51894,"byte_end":51944,"line_start":857,"line_end":857,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51949,"byte_end":51952,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51957,"byte_end":51971,"line_start":859,"line_end":859,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51976,"byte_end":51979,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51984,"byte_end":51991,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":51996,"byte_end":52022,"line_start":862,"line_end":862,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52027,"byte_end":52030,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52035,"byte_end":52057,"line_start":864,"line_end":864,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52062,"byte_end":52065,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52070,"byte_end":52108,"line_start":866,"line_end":866,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52113,"byte_end":52116,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52121,"byte_end":52145,"line_start":868,"line_end":868,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52150,"byte_end":52157,"line_start":869,"line_end":869,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53162,"byte_end":53169,"line_start":902,"line_end":902,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"pub fn product<P>(Self) -> P where P: Send + Product<Self::Item> + Product<P>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52272,"byte_end":52317,"line_start":876,"line_end":876,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52322,"byte_end":52325,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52330,"byte_end":52396,"line_start":878,"line_end":878,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52401,"byte_end":52466,"line_start":879,"line_end":879,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52471,"byte_end":52533,"line_start":880,"line_end":880,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52538,"byte_end":52562,"line_start":881,"line_end":881,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52567,"byte_end":52570,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52575,"byte_end":52644,"line_start":883,"line_end":883,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52649,"byte_end":52652,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52657,"byte_end":52719,"line_start":885,"line_end":885,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52724,"byte_end":52786,"line_start":886,"line_end":886,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52791,"byte_end":52841,"line_start":887,"line_end":887,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52846,"byte_end":52849,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52854,"byte_end":52868,"line_start":889,"line_end":889,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52873,"byte_end":52876,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52881,"byte_end":52888,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52893,"byte_end":52919,"line_start":892,"line_end":892,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52924,"byte_end":52927,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52932,"byte_end":52965,"line_start":894,"line_end":894,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":52970,"byte_end":53011,"line_start":895,"line_end":895,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53016,"byte_end":53021,"line_start":896,"line_end":896,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53026,"byte_end":53029,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53034,"byte_end":53066,"line_start":898,"line_end":898,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53071,"byte_end":53103,"line_start":899,"line_end":899,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53108,"byte_end":53142,"line_start":900,"line_end":900,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53147,"byte_end":53154,"line_start":901,"line_end":901,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54007,"byte_end":54010,"line_start":931,"line_end":931,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"pub fn min(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53289,"byte_end":53354,"line_start":908,"line_end":908,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53359,"byte_end":53424,"line_start":909,"line_end":909,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53429,"byte_end":53445,"line_start":910,"line_end":910,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53450,"byte_end":53453,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53458,"byte_end":53523,"line_start":912,"line_end":912,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53528,"byte_end":53594,"line_start":913,"line_end":913,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53599,"byte_end":53637,"line_start":914,"line_end":914,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53642,"byte_end":53645,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53650,"byte_end":53720,"line_start":916,"line_end":916,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53725,"byte_end":53728,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53733,"byte_end":53747,"line_start":918,"line_end":918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53752,"byte_end":53755,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53760,"byte_end":53767,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53772,"byte_end":53798,"line_start":921,"line_end":921,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53803,"byte_end":53806,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53811,"byte_end":53836,"line_start":923,"line_end":923,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53841,"byte_end":53844,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53849,"byte_end":53895,"line_start":925,"line_end":925,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53900,"byte_end":53903,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53908,"byte_end":53933,"line_start":927,"line_end":927,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53938,"byte_end":53941,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53946,"byte_end":53987,"line_start":929,"line_end":929,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":53992,"byte_end":53999,"line_start":930,"line_end":930,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3323},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54744,"byte_end":54750,"line_start":954,"line_end":954,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"pub fn min_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54121,"byte_end":54194,"line_start":937,"line_end":937,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54199,"byte_end":54269,"line_start":938,"line_end":938,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54274,"byte_end":54323,"line_start":939,"line_end":939,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54328,"byte_end":54331,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54336,"byte_end":54401,"line_start":941,"line_end":941,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54406,"byte_end":54475,"line_start":942,"line_end":942,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54480,"byte_end":54518,"line_start":943,"line_end":943,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54523,"byte_end":54526,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54531,"byte_end":54545,"line_start":945,"line_end":945,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54550,"byte_end":54553,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54558,"byte_end":54565,"line_start":947,"line_end":947,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54570,"byte_end":54596,"line_start":948,"line_end":948,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54601,"byte_end":54604,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54609,"byte_end":54647,"line_start":950,"line_end":950,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54652,"byte_end":54655,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54660,"byte_end":54724,"line_start":952,"line_end":952,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":54729,"byte_end":54736,"line_start":953,"line_end":953,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3326},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55643,"byte_end":55653,"line_start":980,"line_end":980,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"pub fn min_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55045,"byte_end":55110,"line_start":963,"line_end":963,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55115,"byte_end":55174,"line_start":964,"line_end":964,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55179,"byte_end":55219,"line_start":965,"line_end":965,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55224,"byte_end":55227,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55232,"byte_end":55297,"line_start":967,"line_end":967,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55302,"byte_end":55368,"line_start":968,"line_end":968,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55373,"byte_end":55411,"line_start":969,"line_end":969,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55416,"byte_end":55419,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55424,"byte_end":55438,"line_start":971,"line_end":971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55443,"byte_end":55446,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55451,"byte_end":55458,"line_start":973,"line_end":973,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55463,"byte_end":55489,"line_start":974,"line_end":974,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55494,"byte_end":55497,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55502,"byte_end":55547,"line_start":976,"line_end":976,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55552,"byte_end":55555,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55560,"byte_end":55623,"line_start":978,"line_end":978,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55628,"byte_end":55635,"line_start":979,"line_end":979,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3332},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56616,"byte_end":56619,"line_start":1012,"line_end":1012,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"pub fn max(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55898,"byte_end":55963,"line_start":989,"line_end":989,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":55968,"byte_end":56033,"line_start":990,"line_end":990,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56038,"byte_end":56054,"line_start":991,"line_end":991,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56059,"byte_end":56062,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56067,"byte_end":56132,"line_start":993,"line_end":993,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56137,"byte_end":56203,"line_start":994,"line_end":994,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56208,"byte_end":56246,"line_start":995,"line_end":995,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56251,"byte_end":56254,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56259,"byte_end":56329,"line_start":997,"line_end":997,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56334,"byte_end":56337,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56342,"byte_end":56356,"line_start":999,"line_end":999,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56361,"byte_end":56364,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56369,"byte_end":56376,"line_start":1001,"line_end":1001,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56381,"byte_end":56407,"line_start":1002,"line_end":1002,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56412,"byte_end":56415,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56420,"byte_end":56445,"line_start":1004,"line_end":1004,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56450,"byte_end":56453,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56458,"byte_end":56504,"line_start":1006,"line_end":1006,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56509,"byte_end":56512,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56517,"byte_end":56542,"line_start":1008,"line_end":1008,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56547,"byte_end":56550,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56555,"byte_end":56596,"line_start":1010,"line_end":1010,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56601,"byte_end":56608,"line_start":1011,"line_end":1011,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57367,"byte_end":57373,"line_start":1035,"line_end":1035,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"pub fn max_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56730,"byte_end":56803,"line_start":1018,"line_end":1018,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56808,"byte_end":56878,"line_start":1019,"line_end":1019,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56883,"byte_end":56932,"line_start":1020,"line_end":1020,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56937,"byte_end":56940,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":56945,"byte_end":57010,"line_start":1022,"line_end":1022,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57015,"byte_end":57084,"line_start":1023,"line_end":1023,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57089,"byte_end":57127,"line_start":1024,"line_end":1024,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57132,"byte_end":57135,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57140,"byte_end":57154,"line_start":1026,"line_end":1026,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57159,"byte_end":57162,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57167,"byte_end":57174,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57179,"byte_end":57205,"line_start":1029,"line_end":1029,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57210,"byte_end":57213,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57218,"byte_end":57256,"line_start":1031,"line_end":1031,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57261,"byte_end":57264,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57269,"byte_end":57347,"line_start":1033,"line_end":1033,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57352,"byte_end":57359,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58267,"byte_end":58277,"line_start":1061,"line_end":1061,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"pub fn max_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57668,"byte_end":57733,"line_start":1044,"line_end":1044,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57738,"byte_end":57797,"line_start":1045,"line_end":1045,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57802,"byte_end":57842,"line_start":1046,"line_end":1046,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57847,"byte_end":57850,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57855,"byte_end":57920,"line_start":1048,"line_end":1048,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57925,"byte_end":57991,"line_start":1049,"line_end":1049,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":57996,"byte_end":58034,"line_start":1050,"line_end":1050,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58039,"byte_end":58042,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58047,"byte_end":58061,"line_start":1052,"line_end":1052,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58066,"byte_end":58069,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58074,"byte_end":58081,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58086,"byte_end":58112,"line_start":1055,"line_end":1055,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58117,"byte_end":58120,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58125,"byte_end":58170,"line_start":1057,"line_end":1057,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58175,"byte_end":58178,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58183,"byte_end":58247,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58252,"byte_end":58259,"line_start":1060,"line_end":1060,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58938,"byte_end":58943,"line_start":1086,"line_end":1086,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"pub fn chain<C>(Self, C) -> Chain<Self, C::Iter> where\nC: IntoParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58522,"byte_end":58583,"line_start":1070,"line_end":1070,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58588,"byte_end":58591,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58596,"byte_end":58610,"line_start":1072,"line_end":1072,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58615,"byte_end":58618,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58623,"byte_end":58630,"line_start":1074,"line_end":1074,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58635,"byte_end":58661,"line_start":1075,"line_end":1075,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58666,"byte_end":58669,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58674,"byte_end":58696,"line_start":1077,"line_end":1077,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58701,"byte_end":58723,"line_start":1078,"line_end":1078,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58728,"byte_end":58731,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58736,"byte_end":58788,"line_start":1080,"line_end":1080,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58793,"byte_end":58796,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58801,"byte_end":58855,"line_start":1082,"line_end":1082,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58860,"byte_end":58863,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58868,"byte_end":58918,"line_start":1084,"line_end":1084,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":58923,"byte_end":58930,"line_start":1085,"line_end":1085,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60032,"byte_end":60040,"line_start":1115,"line_end":1115,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"pub fn find_any<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59109,"byte_end":59169,"line_start":1092,"line_end":1092,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59174,"byte_end":59236,"line_start":1093,"line_end":1093,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59241,"byte_end":59301,"line_start":1094,"line_end":1094,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59306,"byte_end":59372,"line_start":1095,"line_end":1095,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59377,"byte_end":59453,"line_start":1096,"line_end":1096,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59458,"byte_end":59461,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59466,"byte_end":59527,"line_start":1098,"line_end":1098,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59532,"byte_end":59593,"line_start":1099,"line_end":1099,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59598,"byte_end":59657,"line_start":1100,"line_end":1100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59662,"byte_end":59665,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59670,"byte_end":59748,"line_start":1102,"line_end":1102,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59753,"byte_end":59756,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59761,"byte_end":59775,"line_start":1104,"line_end":1104,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59780,"byte_end":59783,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59788,"byte_end":59795,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59800,"byte_end":59826,"line_start":1107,"line_end":1107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59831,"byte_end":59834,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59839,"byte_end":59864,"line_start":1109,"line_end":1109,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59869,"byte_end":59872,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59877,"byte_end":59939,"line_start":1111,"line_end":1111,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59944,"byte_end":59947,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":59952,"byte_end":60012,"line_start":1113,"line_end":1113,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60017,"byte_end":60024,"line_start":1114,"line_end":1114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3346},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61074,"byte_end":61084,"line_start":1144,"line_end":1144,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"pub fn find_first<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60194,"byte_end":60267,"line_start":1121,"line_end":1121,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60272,"byte_end":60324,"line_start":1122,"line_end":1122,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60329,"byte_end":60332,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60337,"byte_end":60402,"line_start":1124,"line_end":1124,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60407,"byte_end":60476,"line_start":1125,"line_end":1125,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60481,"byte_end":60511,"line_start":1126,"line_end":1126,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60516,"byte_end":60519,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60524,"byte_end":60595,"line_start":1128,"line_end":1128,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60600,"byte_end":60671,"line_start":1129,"line_end":1129,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60676,"byte_end":60747,"line_start":1130,"line_end":1130,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60752,"byte_end":60786,"line_start":1131,"line_end":1131,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60791,"byte_end":60794,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ # Exmaples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60799,"byte_end":60813,"line_start":1133,"line_end":1133,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60818,"byte_end":60821,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60826,"byte_end":60833,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60838,"byte_end":60864,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60869,"byte_end":60872,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60877,"byte_end":60902,"line_start":1138,"line_end":1138,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60907,"byte_end":60910,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60915,"byte_end":60979,"line_start":1140,"line_end":1140,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60984,"byte_end":60987,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":60992,"byte_end":61054,"line_start":1142,"line_end":1142,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61059,"byte_end":61066,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3348},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62092,"byte_end":62101,"line_start":1172,"line_end":1172,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"pub fn find_last<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61255,"byte_end":61327,"line_start":1150,"line_end":1150,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61332,"byte_end":61384,"line_start":1151,"line_end":1151,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61389,"byte_end":61392,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61397,"byte_end":61461,"line_start":1153,"line_end":1153,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61466,"byte_end":61536,"line_start":1154,"line_end":1154,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61541,"byte_end":61568,"line_start":1155,"line_end":1155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61573,"byte_end":61576,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61581,"byte_end":61652,"line_start":1157,"line_end":1157,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61657,"byte_end":61729,"line_start":1158,"line_end":1158,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61734,"byte_end":61806,"line_start":1159,"line_end":1159,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61811,"byte_end":61814,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61819,"byte_end":61833,"line_start":1161,"line_end":1161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61838,"byte_end":61841,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61846,"byte_end":61853,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61858,"byte_end":61884,"line_start":1164,"line_end":1164,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61889,"byte_end":61892,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61897,"byte_end":61922,"line_start":1166,"line_end":1166,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61927,"byte_end":61930,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":61935,"byte_end":61998,"line_start":1168,"line_end":1168,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62003,"byte_end":62006,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62011,"byte_end":62072,"line_start":1170,"line_end":1170,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62077,"byte_end":62084,"line_start":1171,"line_end":1171,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3350},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62417,"byte_end":62421,"line_start":1181,"line_end":1181,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"pub fn find<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `find` does not search in order -- use `find_any`, \\\\\n    `find_first`, or `find_last`\")","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62290,"byte_end":62409,"line_start":1179,"line_end":1180,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3352},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63121,"byte_end":63124,"line_start":1204,"line_end":1204,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"pub fn any<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62572,"byte_end":62632,"line_start":1187,"line_end":1187,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62637,"byte_end":62699,"line_start":1188,"line_end":1188,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62704,"byte_end":62764,"line_start":1189,"line_end":1189,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62769,"byte_end":62835,"line_start":1190,"line_end":1190,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62840,"byte_end":62877,"line_start":1191,"line_end":1191,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62882,"byte_end":62885,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62890,"byte_end":62904,"line_start":1193,"line_end":1193,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62909,"byte_end":62912,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62917,"byte_end":62924,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62929,"byte_end":62955,"line_start":1196,"line_end":1196,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62960,"byte_end":62963,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":62968,"byte_end":63004,"line_start":1198,"line_end":1198,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63009,"byte_end":63012,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63017,"byte_end":63066,"line_start":1200,"line_end":1200,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63071,"byte_end":63074,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63079,"byte_end":63101,"line_start":1202,"line_end":1202,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63106,"byte_end":63113,"line_start":1203,"line_end":1203,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3355},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63742,"byte_end":63745,"line_start":1225,"line_end":1225,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"pub fn all<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63282,"byte_end":63350,"line_start":1210,"line_end":1210,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63355,"byte_end":63425,"line_start":1211,"line_end":1211,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63430,"byte_end":63497,"line_start":1212,"line_end":1212,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63502,"byte_end":63505,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63510,"byte_end":63524,"line_start":1214,"line_end":1214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63529,"byte_end":63532,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63537,"byte_end":63544,"line_start":1216,"line_end":1216,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63549,"byte_end":63575,"line_start":1217,"line_end":1217,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63580,"byte_end":63583,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63588,"byte_end":63624,"line_start":1219,"line_end":1219,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63629,"byte_end":63632,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63637,"byte_end":63686,"line_start":1221,"line_end":1221,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63691,"byte_end":63694,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63699,"byte_end":63722,"line_start":1223,"line_end":1223,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63727,"byte_end":63734,"line_start":1224,"line_end":1224,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3358},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64637,"byte_end":64647,"line_start":1253,"line_end":1253,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"pub fn while_some<T>(Self) -> WhileSome<Self> where\nSelf: ParallelIterator<Item = Option<T>>, T: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63904,"byte_end":63975,"line_start":1231,"line_end":1231,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":63980,"byte_end":64015,"line_start":1232,"line_end":1232,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64020,"byte_end":64023,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64028,"byte_end":64042,"line_start":1234,"line_end":1234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64047,"byte_end":64050,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64055,"byte_end":64062,"line_start":1236,"line_end":1236,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64067,"byte_end":64093,"line_start":1237,"line_end":1237,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64098,"byte_end":64149,"line_start":1238,"line_end":1238,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64154,"byte_end":64157,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64162,"byte_end":64200,"line_start":1240,"line_end":1240,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64205,"byte_end":64234,"line_start":1241,"line_end":1241,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64239,"byte_end":64263,"line_start":1242,"line_end":1242,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64268,"byte_end":64286,"line_start":1243,"line_end":1243,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64291,"byte_end":64347,"line_start":1244,"line_end":1244,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64352,"byte_end":64406,"line_start":1245,"line_end":1245,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64411,"byte_end":64426,"line_start":1246,"line_end":1246,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64431,"byte_end":64452,"line_start":1247,"line_end":1247,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64457,"byte_end":64472,"line_start":1248,"line_end":1248,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64477,"byte_end":64480,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64485,"byte_end":64517,"line_start":1250,"line_end":1250,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64522,"byte_end":64617,"line_start":1251,"line_end":1251,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64622,"byte_end":64629,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3360},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65482,"byte_end":65489,"line_start":1279,"line_end":1279,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"pub fn collect<C>(Self) -> C where C: FromParallelIterator<Self::Item>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Create a fresh collection containing all the element produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Create a fresh collection containing all the element produced","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64801,"byte_end":64866,"line_start":1260,"line_end":1260,"column_start":5,"column_end":70}},{"value":"/ by this parallel iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64871,"byte_end":64901,"line_start":1261,"line_end":1261,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64906,"byte_end":64909,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `collect_into_vec()`, which allocates more","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64914,"byte_end":64982,"line_start":1263,"line_end":1263,"column_start":5,"column_end":73}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":64987,"byte_end":65050,"line_start":1264,"line_end":1264,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse an existing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65055,"byte_end":65118,"line_start":1265,"line_end":1265,"column_start":5,"column_end":68}},{"value":"/ vector's backing store rather than allocating a fresh vector.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65123,"byte_end":65188,"line_start":1266,"line_end":1266,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65193,"byte_end":65196,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65201,"byte_end":65215,"line_start":1268,"line_end":1268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65220,"byte_end":65223,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65228,"byte_end":65235,"line_start":1270,"line_end":1270,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65240,"byte_end":65266,"line_start":1271,"line_end":1271,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65271,"byte_end":65274,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65279,"byte_end":65337,"line_start":1273,"line_end":1273,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65342,"byte_end":65345,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65350,"byte_end":65413,"line_start":1275,"line_end":1275,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65418,"byte_end":65421,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65426,"byte_end":65462,"line_start":1277,"line_end":1277,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65467,"byte_end":65474,"line_start":1278,"line_end":1278,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66320,"byte_end":66325,"line_start":1305,"line_end":1305,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"pub fn unzip<A, B, FromA, FromB>(Self) -> (FromA, FromB) where\nSelf: ParallelIterator<Item = (A, B)>, FromA: Default + Send +\nParallelExtend<A>, FromB: Default + Send + ParallelExtend<B>, A: Send, B: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65602,"byte_end":65670,"line_start":1285,"line_end":1285,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65675,"byte_end":65707,"line_start":1286,"line_end":1286,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65712,"byte_end":65715,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65720,"byte_end":65787,"line_start":1288,"line_end":1288,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65792,"byte_end":65855,"line_start":1289,"line_end":1289,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65860,"byte_end":65920,"line_start":1290,"line_end":1290,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65925,"byte_end":65990,"line_start":1291,"line_end":1291,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":65995,"byte_end":65998,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66003,"byte_end":66017,"line_start":1293,"line_end":1293,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66022,"byte_end":66025,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66030,"byte_end":66037,"line_start":1295,"line_end":1295,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66042,"byte_end":66068,"line_start":1296,"line_end":1296,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66073,"byte_end":66076,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66081,"byte_end":66126,"line_start":1298,"line_end":1298,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66131,"byte_end":66134,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66139,"byte_end":66211,"line_start":1300,"line_end":1300,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66216,"byte_end":66219,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66224,"byte_end":66259,"line_start":1302,"line_end":1302,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66264,"byte_end":66300,"line_start":1303,"line_end":1303,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66305,"byte_end":66312,"line_start":1304,"line_end":1304,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3367},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67450,"byte_end":67459,"line_start":1334,"line_end":1334,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"pub fn partition<A, B, P>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<Self::Item>, B: Default + Send + ParallelExtend<Self::Item>,\nP: Fn(&Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66626,"byte_end":66698,"line_start":1315,"line_end":1315,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66703,"byte_end":66776,"line_start":1316,"line_end":1316,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66781,"byte_end":66851,"line_start":1317,"line_end":1317,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66856,"byte_end":66859,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66864,"byte_end":66937,"line_start":1319,"line_end":1319,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":66942,"byte_end":67016,"line_start":1320,"line_end":1320,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67021,"byte_end":67093,"line_start":1321,"line_end":1321,"column_start":5,"column_end":77}},{"value":"/ that used type inferrence assuming the two were the same.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67098,"byte_end":67159,"line_start":1322,"line_end":1322,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67164,"byte_end":67167,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67172,"byte_end":67186,"line_start":1324,"line_end":1324,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67191,"byte_end":67194,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67199,"byte_end":67206,"line_start":1326,"line_end":1326,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67211,"byte_end":67237,"line_start":1327,"line_end":1327,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67242,"byte_end":67245,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67250,"byte_end":67341,"line_start":1329,"line_end":1329,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67346,"byte_end":67349,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67354,"byte_end":67389,"line_start":1331,"line_end":1331,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67394,"byte_end":67430,"line_start":1332,"line_end":1332,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67435,"byte_end":67442,"line_start":1333,"line_end":1333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68746,"byte_end":68759,"line_start":1364,"line_end":1364,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"pub fn partition_map<A, B, P, L, R>(Self, P) -> (A, B) where A: Default +\nSend + ParallelExtend<L>, B: Default + Send + ParallelExtend<R>,\nP: Fn(Self::Item) -> Either<L, R> + Sync + Send, L: Send, R: Send","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67737,"byte_end":67808,"line_start":1342,"line_end":1342,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67813,"byte_end":67885,"line_start":1343,"line_end":1343,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67890,"byte_end":67960,"line_start":1344,"line_end":1344,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67965,"byte_end":67968,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67973,"byte_end":67987,"line_start":1346,"line_end":1346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":67992,"byte_end":67995,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68000,"byte_end":68007,"line_start":1348,"line_end":1348,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68012,"byte_end":68038,"line_start":1349,"line_end":1349,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68043,"byte_end":68071,"line_start":1350,"line_end":1350,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68076,"byte_end":68079,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68084,"byte_end":68148,"line_start":1352,"line_end":1352,"column_start":5,"column_end":69}},{"value":"/                                             .partition_map(|x| {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68153,"byte_end":68221,"line_start":1353,"line_end":1353,"column_start":5,"column_end":73}},{"value":"/                                                 if x % 2 == 0 {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68226,"byte_end":68293,"line_start":1354,"line_end":1354,"column_start":5,"column_end":72}},{"value":"/                                                     Either::Left(x * 4)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68298,"byte_end":68373,"line_start":1355,"line_end":1355,"column_start":5,"column_end":80}},{"value":"/                                                 } else {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68378,"byte_end":68438,"line_start":1356,"line_end":1356,"column_start":5,"column_end":65}},{"value":"/                                                     Either::Right(x * 3)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68443,"byte_end":68519,"line_start":1357,"line_end":1357,"column_start":5,"column_end":81}},{"value":"/                                                 }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68524,"byte_end":68577,"line_start":1358,"line_end":1358,"column_start":5,"column_end":58}},{"value":"/                                             });","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68582,"byte_end":68633,"line_start":1359,"line_end":1359,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68638,"byte_end":68641,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68646,"byte_end":68683,"line_start":1361,"line_end":1361,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68688,"byte_end":68726,"line_start":1362,"line_end":1362,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":68731,"byte_end":68738,"line_start":1363,"line_end":1363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3377},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69411,"byte_end":69422,"line_start":1386,"line_end":1386,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where\nSelf::Item: Clone","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69082,"byte_end":69151,"line_start":1374,"line_end":1374,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69156,"byte_end":69159,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69164,"byte_end":69178,"line_start":1376,"line_end":1376,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69183,"byte_end":69186,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69191,"byte_end":69198,"line_start":1378,"line_end":1378,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69203,"byte_end":69229,"line_start":1379,"line_end":1379,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69234,"byte_end":69237,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69242,"byte_end":69268,"line_start":1381,"line_end":1381,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69273,"byte_end":69337,"line_start":1382,"line_end":1382,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69342,"byte_end":69345,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69350,"byte_end":69391,"line_start":1384,"line_end":1384,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69396,"byte_end":69403,"line_start":1385,"line_end":1385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70079,"byte_end":70094,"line_start":1404,"line_end":1404,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"pub fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69560,"byte_end":69624,"line_start":1392,"line_end":1392,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69629,"byte_end":69685,"line_start":1393,"line_end":1393,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69690,"byte_end":69693,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69698,"byte_end":69759,"line_start":1395,"line_end":1395,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69764,"byte_end":69829,"line_start":1396,"line_end":1396,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69834,"byte_end":69893,"line_start":1397,"line_end":1397,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69898,"byte_end":69937,"line_start":1398,"line_end":1398,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69942,"byte_end":69945,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":69950,"byte_end":70016,"line_start":1400,"line_end":1400,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70021,"byte_end":70035,"line_start":1401,"line_end":1401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70040,"byte_end":70043,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70048,"byte_end":70071,"line_start":1403,"line_end":1403,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70970,"byte_end":70977,"line_start":1421,"line_end":1421,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"pub fn opt_len(&Self) -> Option<usize>","parent":{"krate":0,"index":3269},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70176,"byte_end":70240,"line_start":1407,"line_end":1407,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70245,"byte_end":70301,"line_start":1408,"line_end":1408,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70306,"byte_end":70309,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70314,"byte_end":70381,"line_start":1410,"line_end":1410,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70386,"byte_end":70455,"line_start":1411,"line_end":1411,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70460,"byte_end":70531,"line_start":1412,"line_end":1412,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70536,"byte_end":70606,"line_start":1413,"line_end":1413,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70611,"byte_end":70680,"line_start":1414,"line_end":1414,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70685,"byte_end":70752,"line_start":1415,"line_end":1415,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70757,"byte_end":70791,"line_start":1416,"line_end":1416,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70796,"byte_end":70799,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70804,"byte_end":70868,"line_start":1418,"line_end":1418,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70873,"byte_end":70928,"line_start":1419,"line_end":1419,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":70933,"byte_end":70962,"line_start":1420,"line_end":1420,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":3386},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71404,"byte_end":71427,"line_start":1440,"line_end":1440,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3391},{"krate":0,"index":3393},{"krate":0,"index":3395},{"krate":0,"index":3397},{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3404},{"krate":0,"index":3408},{"krate":0,"index":3411},{"krate":0,"index":3413},{"krate":0,"index":3415},{"krate":0,"index":3417},{"krate":0,"index":3419},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3428},{"krate":0,"index":3432},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3444}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71182,"byte_end":71248,"line_start":1435,"line_end":1435,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71249,"byte_end":71314,"line_start":1436,"line_end":1436,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71315,"byte_end":71332,"line_start":1437,"line_end":1437,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71333,"byte_end":71336,"line_start":1438,"line_end":1438,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64` and `i64` ranges","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71337,"byte_end":71393,"line_start":1439,"line_end":1439,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72036,"byte_end":72052,"line_start":1459,"line_end":1459,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"pub fn collect_into_vec(Self, &mut Vec<Self::Item>)","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71452,"byte_end":71511,"line_start":1441,"line_end":1441,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71516,"byte_end":71575,"line_start":1442,"line_end":1442,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71580,"byte_end":71645,"line_start":1443,"line_end":1443,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71650,"byte_end":71716,"line_start":1444,"line_end":1444,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71721,"byte_end":71724,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71729,"byte_end":71743,"line_start":1446,"line_end":1446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71748,"byte_end":71751,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71756,"byte_end":71763,"line_start":1448,"line_end":1448,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71768,"byte_end":71794,"line_start":1449,"line_end":1449,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71799,"byte_end":71802,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71807,"byte_end":71846,"line_start":1451,"line_end":1451,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71851,"byte_end":71886,"line_start":1452,"line_end":1452,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71891,"byte_end":71894,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71899,"byte_end":71925,"line_start":1454,"line_end":1454,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71930,"byte_end":71966,"line_start":1455,"line_end":1455,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71971,"byte_end":71974,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71979,"byte_end":72016,"line_start":1457,"line_end":1457,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72021,"byte_end":72028,"line_start":1458,"line_end":1458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3388},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72862,"byte_end":72877,"line_start":1484,"line_end":1484,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"pub fn unzip_into_vecs<A, B>(Self, &mut Vec<A>, &mut Vec<B>) where\nSelf: IndexedParallelIterator<Item = (A, B)>, A: Send, B: Send","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72151,"byte_end":72208,"line_start":1463,"line_end":1463,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72213,"byte_end":72275,"line_start":1464,"line_end":1464,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72280,"byte_end":72346,"line_start":1465,"line_end":1465,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72351,"byte_end":72418,"line_start":1466,"line_end":1466,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72423,"byte_end":72426,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72431,"byte_end":72445,"line_start":1468,"line_end":1468,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72450,"byte_end":72453,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72458,"byte_end":72465,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72470,"byte_end":72496,"line_start":1471,"line_end":1471,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72501,"byte_end":72504,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72509,"byte_end":72548,"line_start":1473,"line_end":1473,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72553,"byte_end":72585,"line_start":1474,"line_end":1474,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72590,"byte_end":72623,"line_start":1475,"line_end":1475,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72628,"byte_end":72631,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72636,"byte_end":72664,"line_start":1477,"line_end":1477,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72669,"byte_end":72689,"line_start":1478,"line_end":1478,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72694,"byte_end":72742,"line_start":1479,"line_end":1479,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72747,"byte_end":72750,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72755,"byte_end":72793,"line_start":1481,"line_end":1481,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72798,"byte_end":72842,"line_start":1482,"line_end":1482,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":72847,"byte_end":72854,"line_start":1483,"line_end":1483,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3391},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73695,"byte_end":73698,"line_start":1510,"line_end":1510,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Iterate over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterate over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73104,"byte_end":73166,"line_start":1492,"line_end":1492,"column_start":5,"column_end":67}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73171,"byte_end":73237,"line_start":1493,"line_end":1493,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73242,"byte_end":73301,"line_start":1494,"line_end":1494,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73306,"byte_end":73370,"line_start":1495,"line_end":1495,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73375,"byte_end":73394,"line_start":1496,"line_end":1496,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73399,"byte_end":73402,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73407,"byte_end":73421,"line_start":1498,"line_end":1498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73426,"byte_end":73429,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73434,"byte_end":73441,"line_start":1500,"line_end":1500,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73446,"byte_end":73472,"line_start":1501,"line_end":1501,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73477,"byte_end":73480,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73485,"byte_end":73516,"line_start":1503,"line_end":1503,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73521,"byte_end":73545,"line_start":1504,"line_end":1504,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73550,"byte_end":73583,"line_start":1505,"line_end":1505,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73588,"byte_end":73607,"line_start":1506,"line_end":1506,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73612,"byte_end":73615,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73620,"byte_end":73675,"line_start":1508,"line_end":1508,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73680,"byte_end":73687,"line_start":1509,"line_end":1509,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3393},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74473,"byte_end":74479,"line_start":1536,"line_end":1536,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"pub fn zip_eq<Z>(Self, Z) -> ZipEq<Self, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73891,"byte_end":73968,"line_start":1517,"line_end":1517,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73973,"byte_end":73976,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73981,"byte_end":73993,"line_start":1519,"line_end":1519,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":73998,"byte_end":74060,"line_start":1520,"line_end":1520,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74065,"byte_end":74068,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74073,"byte_end":74092,"line_start":1522,"line_end":1522,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74097,"byte_end":74123,"line_start":1523,"line_end":1523,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74128,"byte_end":74131,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74136,"byte_end":74156,"line_start":1525,"line_end":1525,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74161,"byte_end":74184,"line_start":1526,"line_end":1526,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74189,"byte_end":74223,"line_start":1527,"line_end":1527,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74228,"byte_end":74262,"line_start":1528,"line_end":1528,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74267,"byte_end":74270,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74275,"byte_end":74297,"line_start":1530,"line_end":1530,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74302,"byte_end":74372,"line_start":1531,"line_end":1531,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74377,"byte_end":74380,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74385,"byte_end":74416,"line_start":1533,"line_end":1533,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74421,"byte_end":74453,"line_start":1534,"line_end":1534,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74458,"byte_end":74465,"line_start":1535,"line_end":1535,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3395},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75327,"byte_end":75337,"line_start":1559,"line_end":1559,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"pub fn interleave<I>(Self, I) -> Interleave<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Interleave elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleave elements of this iterator and the other given","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74767,"byte_end":74827,"line_start":1545,"line_end":1545,"column_start":5,"column_end":65}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74832,"byte_end":74896,"line_start":1546,"line_end":1546,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74901,"byte_end":74966,"line_start":1547,"line_end":1547,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":74971,"byte_end":75036,"line_start":1548,"line_end":1548,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75041,"byte_end":75060,"line_start":1549,"line_end":1549,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75065,"byte_end":75068,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75073,"byte_end":75087,"line_start":1551,"line_end":1551,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75092,"byte_end":75095,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75100,"byte_end":75107,"line_start":1553,"line_end":1553,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75112,"byte_end":75138,"line_start":1554,"line_end":1554,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75143,"byte_end":75191,"line_start":1555,"line_end":1555,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75196,"byte_end":75260,"line_start":1556,"line_end":1556,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75265,"byte_end":75307,"line_start":1557,"line_end":1557,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75312,"byte_end":75319,"line_start":1558,"line_end":1558,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3397},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75955,"byte_end":75974,"line_start":1577,"line_end":1577,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"pub fn interleave_shortest<I>(Self, I) -> InterleaveShortest<Self, I::Iter>\nwhere I: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Interleave elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleave elements of this iterator and the other given","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75580,"byte_end":75640,"line_start":1566,"line_end":1566,"column_start":5,"column_end":65}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75645,"byte_end":75682,"line_start":1567,"line_end":1567,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75687,"byte_end":75690,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75695,"byte_end":75709,"line_start":1569,"line_end":1569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75714,"byte_end":75717,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75722,"byte_end":75729,"line_start":1571,"line_end":1571,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75734,"byte_end":75760,"line_start":1572,"line_end":1572,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75765,"byte_end":75813,"line_start":1573,"line_end":1573,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75818,"byte_end":75891,"line_start":1574,"line_end":1574,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75896,"byte_end":75935,"line_start":1575,"line_end":1575,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":75940,"byte_end":75947,"line_start":1576,"line_end":1576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3399},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77156,"byte_end":77162,"line_start":1604,"line_end":1604,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"pub fn chunks(Self, usize) -> Chunks<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Split an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Split an iterator up into fixed-size chunks.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76234,"byte_end":76282,"line_start":1584,"line_end":1584,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76287,"byte_end":76290,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76295,"byte_end":76371,"line_start":1586,"line_end":1586,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76376,"byte_end":76455,"line_start":1587,"line_end":1587,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76460,"byte_end":76512,"line_start":1588,"line_end":1588,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76517,"byte_end":76520,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76525,"byte_end":76603,"line_start":1590,"line_end":1590,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76608,"byte_end":76682,"line_start":1591,"line_end":1591,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76687,"byte_end":76690,"line_start":1592,"line_end":1592,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76695,"byte_end":76768,"line_start":1593,"line_end":1593,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76773,"byte_end":76857,"line_start":1594,"line_end":1594,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76862,"byte_end":76865,"line_start":1595,"line_end":1595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76870,"byte_end":76884,"line_start":1596,"line_end":1596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76889,"byte_end":76892,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76897,"byte_end":76904,"line_start":1598,"line_end":1598,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76909,"byte_end":76935,"line_start":1599,"line_end":1599,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76940,"byte_end":76988,"line_start":1600,"line_end":1600,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":76993,"byte_end":77058,"line_start":1601,"line_end":1601,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77063,"byte_end":77136,"line_start":1602,"line_end":1602,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77141,"byte_end":77148,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77774,"byte_end":77777,"line_start":1623,"line_end":1623,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"pub fn cmp<I>(Self, I) -> Ordering where I: IntoParallelIterator<Item =\nSelf::Item>, I::Iter: IndexedParallelIterator, Self::Item: Ord","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77320,"byte_end":77404,"line_start":1609,"line_end":1609,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77409,"byte_end":77421,"line_start":1610,"line_end":1610,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77426,"byte_end":77429,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77434,"byte_end":77448,"line_start":1612,"line_end":1612,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77453,"byte_end":77456,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77461,"byte_end":77468,"line_start":1614,"line_end":1614,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77473,"byte_end":77499,"line_start":1615,"line_end":1615,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77504,"byte_end":77534,"line_start":1616,"line_end":1616,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77539,"byte_end":77542,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77547,"byte_end":77573,"line_start":1618,"line_end":1618,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77578,"byte_end":77633,"line_start":1619,"line_end":1619,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77638,"byte_end":77694,"line_start":1620,"line_end":1620,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77699,"byte_end":77754,"line_start":1621,"line_end":1621,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":77759,"byte_end":77766,"line_start":1622,"line_end":1622,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78826,"byte_end":78837,"line_start":1652,"line_end":1652,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"pub fn partial_cmp<I>(Self, I) -> Option<Ordering> where\nI: IntoParallelIterator, I::Iter: IndexedParallelIterator,\nSelf::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78212,"byte_end":78296,"line_start":1636,"line_end":1636,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78301,"byte_end":78313,"line_start":1637,"line_end":1637,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78318,"byte_end":78321,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78326,"byte_end":78340,"line_start":1639,"line_end":1639,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78345,"byte_end":78348,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78353,"byte_end":78360,"line_start":1641,"line_end":1641,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78365,"byte_end":78391,"line_start":1642,"line_end":1642,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78396,"byte_end":78426,"line_start":1643,"line_end":1643,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78431,"byte_end":78453,"line_start":1644,"line_end":1644,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78458,"byte_end":78461,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78466,"byte_end":78498,"line_start":1646,"line_end":1646,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78503,"byte_end":78578,"line_start":1647,"line_end":1647,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78583,"byte_end":78659,"line_start":1648,"line_end":1648,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78664,"byte_end":78737,"line_start":1649,"line_end":1649,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78742,"byte_end":78806,"line_start":1650,"line_end":1650,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":78811,"byte_end":78818,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79407,"byte_end":79409,"line_start":1667,"line_end":1667,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"pub fn eq<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79304,"byte_end":79361,"line_start":1665,"line_end":1665,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79366,"byte_end":79399,"line_start":1666,"line_end":1666,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79810,"byte_end":79812,"line_start":1678,"line_end":1678,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"pub fn ne<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79705,"byte_end":79762,"line_start":1676,"line_end":1676,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":79767,"byte_end":79802,"line_start":1677,"line_end":1677,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80136,"byte_end":80138,"line_start":1688,"line_end":1688,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"pub fn lt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80013,"byte_end":80070,"line_start":1686,"line_end":1686,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80075,"byte_end":80128,"line_start":1687,"line_end":1687,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80484,"byte_end":80486,"line_start":1698,"line_end":1698,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"pub fn le<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80372,"byte_end":80429,"line_start":1696,"line_end":1696,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80434,"byte_end":80476,"line_start":1697,"line_end":1697,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80901,"byte_end":80903,"line_start":1709,"line_end":1709,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"pub fn gt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80775,"byte_end":80832,"line_start":1707,"line_end":1707,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":80837,"byte_end":80893,"line_start":1708,"line_end":1708,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81252,"byte_end":81254,"line_start":1719,"line_end":1719,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"pub fn ge<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81140,"byte_end":81197,"line_start":1717,"line_end":1717,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81202,"byte_end":81244,"line_start":1718,"line_end":1718,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81915,"byte_end":81924,"line_start":1743,"line_end":1743,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"pub fn enumerate(Self) -> Enumerate<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81546,"byte_end":81587,"line_start":1728,"line_end":1728,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81592,"byte_end":81595,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81600,"byte_end":81614,"line_start":1730,"line_end":1730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81619,"byte_end":81622,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81627,"byte_end":81634,"line_start":1732,"line_end":1732,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81639,"byte_end":81665,"line_start":1733,"line_end":1733,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81670,"byte_end":81673,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81678,"byte_end":81714,"line_start":1735,"line_end":1735,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81719,"byte_end":81749,"line_start":1736,"line_end":1736,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81754,"byte_end":81778,"line_start":1737,"line_end":1737,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81783,"byte_end":81803,"line_start":1738,"line_end":1738,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81808,"byte_end":81827,"line_start":1739,"line_end":1739,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81832,"byte_end":81835,"line_start":1740,"line_end":1740,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81840,"byte_end":81895,"line_start":1741,"line_end":1741,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81900,"byte_end":81907,"line_start":1742,"line_end":1742,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82327,"byte_end":82331,"line_start":1761,"line_end":1761,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"pub fn skip(Self, usize) -> Skip<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":81992,"byte_end":82050,"line_start":1747,"line_end":1747,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82055,"byte_end":82058,"line_start":1748,"line_end":1748,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82063,"byte_end":82077,"line_start":1749,"line_end":1749,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82082,"byte_end":82085,"line_start":1750,"line_end":1750,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82090,"byte_end":82097,"line_start":1751,"line_end":1751,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82102,"byte_end":82128,"line_start":1752,"line_end":1752,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82133,"byte_end":82136,"line_start":1753,"line_end":1753,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82141,"byte_end":82174,"line_start":1754,"line_end":1754,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82179,"byte_end":82203,"line_start":1755,"line_end":1755,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82208,"byte_end":82225,"line_start":1756,"line_end":1756,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82230,"byte_end":82249,"line_start":1757,"line_end":1757,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82254,"byte_end":82257,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82262,"byte_end":82307,"line_start":1759,"line_end":1759,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82312,"byte_end":82319,"line_start":1760,"line_end":1760,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82732,"byte_end":82736,"line_start":1779,"line_end":1779,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"pub fn take(Self, usize) -> Take<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82402,"byte_end":82461,"line_start":1765,"line_end":1765,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82466,"byte_end":82469,"line_start":1766,"line_end":1766,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82474,"byte_end":82488,"line_start":1767,"line_end":1767,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82493,"byte_end":82496,"line_start":1768,"line_end":1768,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82501,"byte_end":82508,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82513,"byte_end":82539,"line_start":1770,"line_end":1770,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82544,"byte_end":82547,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82552,"byte_end":82585,"line_start":1772,"line_end":1772,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82590,"byte_end":82614,"line_start":1773,"line_end":1773,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82619,"byte_end":82635,"line_start":1774,"line_end":1774,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82640,"byte_end":82659,"line_start":1775,"line_end":1775,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82664,"byte_end":82667,"line_start":1776,"line_end":1776,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82672,"byte_end":82712,"line_start":1777,"line_end":1777,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82717,"byte_end":82724,"line_start":1778,"line_end":1778,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83450,"byte_end":83462,"line_start":1801,"line_end":1801,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"pub fn position_any<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82807,"byte_end":82867,"line_start":1783,"line_end":1783,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82872,"byte_end":82933,"line_start":1784,"line_end":1784,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":82938,"byte_end":83000,"line_start":1785,"line_end":1785,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83005,"byte_end":83066,"line_start":1786,"line_end":1786,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83071,"byte_end":83123,"line_start":1787,"line_end":1787,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83128,"byte_end":83131,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83136,"byte_end":83150,"line_start":1789,"line_end":1789,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83155,"byte_end":83158,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83163,"byte_end":83170,"line_start":1791,"line_end":1791,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83175,"byte_end":83201,"line_start":1792,"line_end":1792,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83206,"byte_end":83209,"line_start":1793,"line_end":1793,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83214,"byte_end":83239,"line_start":1794,"line_end":1794,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83244,"byte_end":83247,"line_start":1795,"line_end":1795,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83252,"byte_end":83319,"line_start":1796,"line_end":1796,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83324,"byte_end":83354,"line_start":1797,"line_end":1797,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83359,"byte_end":83362,"line_start":1798,"line_end":1798,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83367,"byte_end":83430,"line_start":1799,"line_end":1799,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83435,"byte_end":83442,"line_start":1800,"line_end":1800,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84633,"byte_end":84647,"line_start":1834,"line_end":1834,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"pub fn position_first<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83691,"byte_end":83764,"line_start":1810,"line_end":1810,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83769,"byte_end":83829,"line_start":1811,"line_end":1811,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83834,"byte_end":83837,"line_start":1812,"line_end":1812,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83842,"byte_end":83905,"line_start":1813,"line_end":1813,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83910,"byte_end":83975,"line_start":1814,"line_end":1814,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":83980,"byte_end":84043,"line_start":1815,"line_end":1815,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84048,"byte_end":84061,"line_start":1816,"line_end":1816,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84066,"byte_end":84069,"line_start":1817,"line_end":1817,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84074,"byte_end":84145,"line_start":1818,"line_end":1818,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84150,"byte_end":84221,"line_start":1819,"line_end":1819,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84226,"byte_end":84297,"line_start":1820,"line_end":1820,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84302,"byte_end":84340,"line_start":1821,"line_end":1821,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84345,"byte_end":84348,"line_start":1822,"line_end":1822,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84353,"byte_end":84367,"line_start":1823,"line_end":1823,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84372,"byte_end":84375,"line_start":1824,"line_end":1824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84380,"byte_end":84387,"line_start":1825,"line_end":1825,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84392,"byte_end":84418,"line_start":1826,"line_end":1826,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84423,"byte_end":84426,"line_start":1827,"line_end":1827,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84431,"byte_end":84456,"line_start":1828,"line_end":1828,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84461,"byte_end":84464,"line_start":1829,"line_end":1829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84469,"byte_end":84535,"line_start":1830,"line_end":1830,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84540,"byte_end":84543,"line_start":1831,"line_end":1831,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84548,"byte_end":84613,"line_start":1832,"line_end":1832,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84618,"byte_end":84625,"line_start":1833,"line_end":1833,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85784,"byte_end":85797,"line_start":1867,"line_end":1867,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"pub fn position_last<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84878,"byte_end":84950,"line_start":1843,"line_end":1843,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":84955,"byte_end":85015,"line_start":1844,"line_end":1844,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85020,"byte_end":85023,"line_start":1845,"line_end":1845,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85028,"byte_end":85090,"line_start":1846,"line_end":1846,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85095,"byte_end":85159,"line_start":1847,"line_end":1847,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85164,"byte_end":85225,"line_start":1848,"line_end":1848,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85230,"byte_end":85243,"line_start":1849,"line_end":1849,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85248,"byte_end":85251,"line_start":1850,"line_end":1850,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85256,"byte_end":85327,"line_start":1851,"line_end":1851,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85332,"byte_end":85404,"line_start":1852,"line_end":1852,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85409,"byte_end":85477,"line_start":1853,"line_end":1853,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85482,"byte_end":85493,"line_start":1854,"line_end":1854,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85498,"byte_end":85501,"line_start":1855,"line_end":1855,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85506,"byte_end":85520,"line_start":1856,"line_end":1856,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85525,"byte_end":85528,"line_start":1857,"line_end":1857,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85533,"byte_end":85540,"line_start":1858,"line_end":1858,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85545,"byte_end":85571,"line_start":1859,"line_end":1859,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85576,"byte_end":85579,"line_start":1860,"line_end":1860,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85584,"byte_end":85609,"line_start":1861,"line_end":1861,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85614,"byte_end":85617,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85622,"byte_end":85687,"line_start":1863,"line_end":1863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85692,"byte_end":85695,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85700,"byte_end":85764,"line_start":1865,"line_end":1865,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":85769,"byte_end":85776,"line_start":1866,"line_end":1866,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86189,"byte_end":86197,"line_start":1879,"line_end":1879,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"pub fn position<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `position` does not search in order -- use `position_any`, \\\\\n    `position_first`, or `position_last`\")","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86046,"byte_end":86181,"line_start":1877,"line_end":1878,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86701,"byte_end":86704,"line_start":1900,"line_end":1900,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"pub fn rev(Self) -> Rev<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86346,"byte_end":86411,"line_start":1885,"line_end":1885,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86416,"byte_end":86434,"line_start":1886,"line_end":1886,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86439,"byte_end":86442,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86447,"byte_end":86461,"line_start":1888,"line_end":1888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86466,"byte_end":86469,"line_start":1889,"line_end":1889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86474,"byte_end":86481,"line_start":1890,"line_end":1890,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86486,"byte_end":86512,"line_start":1891,"line_end":1891,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86517,"byte_end":86520,"line_start":1892,"line_end":1892,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86525,"byte_end":86556,"line_start":1893,"line_end":1893,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86561,"byte_end":86585,"line_start":1894,"line_end":1894,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86590,"byte_end":86604,"line_start":1895,"line_end":1895,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86609,"byte_end":86628,"line_start":1896,"line_end":1896,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86633,"byte_end":86636,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86641,"byte_end":86681,"line_start":1898,"line_end":1898,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86686,"byte_end":86693,"line_start":1899,"line_end":1899,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87521,"byte_end":87533,"line_start":1926,"line_end":1926,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"pub fn with_min_len(Self, usize) -> MinLen<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n thread.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86760,"byte_end":86827,"line_start":1904,"line_end":1904,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will not split any smaller than this length, but","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86832,"byte_end":86899,"line_start":1905,"line_end":1905,"column_start":5,"column_end":72}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86904,"byte_end":86969,"line_start":1906,"line_end":1906,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86974,"byte_end":86977,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":86982,"byte_end":87051,"line_start":1908,"line_end":1908,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87056,"byte_end":87069,"line_start":1909,"line_end":1909,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87074,"byte_end":87140,"line_start":1910,"line_end":1910,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87145,"byte_end":87174,"line_start":1911,"line_end":1911,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87179,"byte_end":87182,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87187,"byte_end":87201,"line_start":1913,"line_end":1913,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87206,"byte_end":87209,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87214,"byte_end":87221,"line_start":1915,"line_end":1915,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87226,"byte_end":87252,"line_start":1916,"line_end":1916,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87257,"byte_end":87260,"line_start":1917,"line_end":1917,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87265,"byte_end":87293,"line_start":1918,"line_end":1918,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87298,"byte_end":87322,"line_start":1919,"line_end":1919,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87327,"byte_end":87354,"line_start":1920,"line_end":1920,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87359,"byte_end":87434,"line_start":1921,"line_end":1921,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87439,"byte_end":87463,"line_start":1922,"line_end":1922,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87468,"byte_end":87471,"line_start":1923,"line_end":1923,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87476,"byte_end":87501,"line_start":1924,"line_end":1924,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87506,"byte_end":87513,"line_start":1925,"line_end":1925,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88477,"byte_end":88489,"line_start":1954,"line_end":1954,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"pub fn with_max_len(Self, usize) -> MaxLen<Self>","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n thread.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87617,"byte_end":87684,"line_start":1930,"line_end":1930,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will try to split at least below this length,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87689,"byte_end":87753,"line_start":1931,"line_end":1931,"column_start":5,"column_end":69}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87758,"byte_end":87826,"line_start":1932,"line_end":1932,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87831,"byte_end":87899,"line_start":1933,"line_end":1933,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87904,"byte_end":87926,"line_start":1934,"line_end":1934,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87931,"byte_end":87934,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":87939,"byte_end":88007,"line_start":1936,"line_end":1936,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88012,"byte_end":88025,"line_start":1937,"line_end":1937,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88030,"byte_end":88096,"line_start":1938,"line_end":1938,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88101,"byte_end":88130,"line_start":1939,"line_end":1939,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88135,"byte_end":88138,"line_start":1940,"line_end":1940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88143,"byte_end":88157,"line_start":1941,"line_end":1941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88162,"byte_end":88165,"line_start":1942,"line_end":1942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88170,"byte_end":88177,"line_start":1943,"line_end":1943,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88182,"byte_end":88208,"line_start":1944,"line_end":1944,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88213,"byte_end":88216,"line_start":1945,"line_end":1945,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88221,"byte_end":88249,"line_start":1946,"line_end":1946,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88254,"byte_end":88278,"line_start":1947,"line_end":1947,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88283,"byte_end":88310,"line_start":1948,"line_end":1948,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88315,"byte_end":88390,"line_start":1949,"line_end":1949,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88395,"byte_end":88419,"line_start":1950,"line_end":1950,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88424,"byte_end":88427,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88432,"byte_end":88457,"line_start":1952,"line_end":1952,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88462,"byte_end":88469,"line_start":1953,"line_end":1953,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3441},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88982,"byte_end":88985,"line_start":1972,"line_end":1972,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88573,"byte_end":88637,"line_start":1958,"line_end":1958,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88642,"byte_end":88681,"line_start":1959,"line_end":1959,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88686,"byte_end":88689,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88694,"byte_end":88708,"line_start":1961,"line_end":1961,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88713,"byte_end":88716,"line_start":1962,"line_end":1962,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88721,"byte_end":88728,"line_start":1963,"line_end":1963,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88733,"byte_end":88759,"line_start":1964,"line_end":1964,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88764,"byte_end":88767,"line_start":1965,"line_end":1965,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88772,"byte_end":88833,"line_start":1966,"line_end":1966,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88838,"byte_end":88873,"line_start":1967,"line_end":1967,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88878,"byte_end":88881,"line_start":1968,"line_end":1968,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88886,"byte_end":88927,"line_start":1969,"line_end":1969,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88932,"byte_end":88962,"line_start":1970,"line_end":1970,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":88967,"byte_end":88974,"line_start":1971,"line_end":1971,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89685,"byte_end":89690,"line_start":1988,"line_end":1988,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"pub fn drive<C: Consumer<Self::Item>>(Self, C) -> C::Result","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89008,"byte_end":89072,"line_start":1974,"line_end":1974,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89077,"byte_end":89133,"line_start":1975,"line_end":1975,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89138,"byte_end":89141,"line_start":1976,"line_end":1976,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89146,"byte_end":89207,"line_start":1977,"line_end":1977,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89212,"byte_end":89277,"line_start":1978,"line_end":1978,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89282,"byte_end":89341,"line_start":1979,"line_end":1979,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89346,"byte_end":89412,"line_start":1980,"line_end":1980,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89417,"byte_end":89481,"line_start":1981,"line_end":1981,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89486,"byte_end":89543,"line_start":1982,"line_end":1982,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89548,"byte_end":89551,"line_start":1983,"line_end":1983,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89556,"byte_end":89622,"line_start":1984,"line_end":1984,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89627,"byte_end":89641,"line_start":1985,"line_end":1985,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89646,"byte_end":89649,"line_start":1986,"line_end":1986,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89654,"byte_end":89677,"line_start":1987,"line_end":1987,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90466,"byte_end":90479,"line_start":2005,"line_end":2005,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"pub fn with_producer<CB: ProducerCallback<Self::Item>>(Self, CB) -> CB::Output","parent":{"krate":0,"index":3386},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89754,"byte_end":89818,"line_start":1990,"line_end":1990,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89823,"byte_end":89879,"line_start":1991,"line_end":1991,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89884,"byte_end":89887,"line_start":1992,"line_end":1992,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89892,"byte_end":89956,"line_start":1993,"line_end":1993,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":89961,"byte_end":90024,"line_start":1994,"line_end":1994,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90029,"byte_end":90087,"line_start":1995,"line_end":1995,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90092,"byte_end":90158,"line_start":1996,"line_end":1996,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90163,"byte_end":90228,"line_start":1997,"line_end":1997,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90233,"byte_end":90299,"line_start":1998,"line_end":1998,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90304,"byte_end":90324,"line_start":1999,"line_end":1999,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90329,"byte_end":90332,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90337,"byte_end":90403,"line_start":2001,"line_end":2001,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90408,"byte_end":90422,"line_start":2002,"line_end":2002,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90427,"byte_end":90430,"line_start":2003,"line_end":2003,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90435,"byte_end":90458,"line_start":2004,"line_end":2004,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91629,"byte_end":91649,"line_start":2044,"line_end":2044,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":3448}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90552,"byte_end":90618,"line_start":2008,"line_end":2008,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90619,"byte_end":90667,"line_start":2009,"line_end":2009,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90668,"byte_end":90738,"line_start":2010,"line_end":2010,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90739,"byte_end":90768,"line_start":2011,"line_end":2011,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90769,"byte_end":90772,"line_start":2012,"line_end":2012,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90773,"byte_end":90860,"line_start":2013,"line_end":2013,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90861,"byte_end":90864,"line_start":2014,"line_end":2014,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90865,"byte_end":90918,"line_start":2015,"line_end":2015,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90919,"byte_end":90980,"line_start":2016,"line_end":2016,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90981,"byte_end":90984,"line_start":2017,"line_end":2017,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":90985,"byte_end":90999,"line_start":2018,"line_end":2018,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91000,"byte_end":91003,"line_start":2019,"line_end":2019,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91004,"byte_end":91058,"line_start":2020,"line_end":2020,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91059,"byte_end":91062,"line_start":2021,"line_end":2021,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91063,"byte_end":91070,"line_start":2022,"line_end":2022,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91071,"byte_end":91097,"line_start":2023,"line_end":2023,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91098,"byte_end":91115,"line_start":2024,"line_end":2024,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91116,"byte_end":91119,"line_start":2025,"line_end":2025,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91120,"byte_end":91142,"line_start":2026,"line_end":2026,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91143,"byte_end":91163,"line_start":2027,"line_end":2027,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91164,"byte_end":91169,"line_start":2028,"line_end":2028,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91170,"byte_end":91173,"line_start":2029,"line_end":2029,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91174,"byte_end":91231,"line_start":2030,"line_end":2030,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91232,"byte_end":91280,"line_start":2031,"line_end":2031,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91281,"byte_end":91332,"line_start":2032,"line_end":2032,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91333,"byte_end":91342,"line_start":2033,"line_end":2033,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91343,"byte_end":91395,"line_start":2034,"line_end":2034,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91396,"byte_end":91419,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91420,"byte_end":91481,"line_start":2036,"line_end":2036,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91482,"byte_end":91495,"line_start":2037,"line_end":2037,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91496,"byte_end":91505,"line_start":2038,"line_end":2038,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91506,"byte_end":91511,"line_start":2039,"line_end":2039,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91512,"byte_end":91515,"line_start":2040,"line_end":2040,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91516,"byte_end":91579,"line_start":2041,"line_end":2041,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91580,"byte_end":91610,"line_start":2042,"line_end":2042,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91611,"byte_end":91618,"line_start":2043,"line_end":2043,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92626,"byte_end":92639,"line_start":2062,"line_end":2062,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"pub fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":3446},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91677,"byte_end":91757,"line_start":2047,"line_end":2047,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91762,"byte_end":91765,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91770,"byte_end":91836,"line_start":2049,"line_end":2049,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91841,"byte_end":91906,"line_start":2050,"line_end":2050,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91911,"byte_end":91975,"line_start":2051,"line_end":2051,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":91980,"byte_end":92045,"line_start":2052,"line_end":2052,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92050,"byte_end":92098,"line_start":2053,"line_end":2053,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92103,"byte_end":92163,"line_start":2054,"line_end":2054,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92168,"byte_end":92233,"line_start":2055,"line_end":2055,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92238,"byte_end":92302,"line_start":2056,"line_end":2056,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92307,"byte_end":92310,"line_start":2057,"line_end":2057,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92315,"byte_end":92399,"line_start":2058,"line_end":2058,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92404,"byte_end":92466,"line_start":2059,"line_end":2059,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92471,"byte_end":92543,"line_start":2060,"line_end":2060,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92548,"byte_end":92618,"line_start":2061,"line_end":2061,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93526,"byte_end":93540,"line_start":2096,"line_end":2096,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":3452}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92708,"byte_end":92799,"line_start":2065,"line_end":2065,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92800,"byte_end":92803,"line_start":2066,"line_end":2066,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92804,"byte_end":92857,"line_start":2067,"line_end":2067,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92858,"byte_end":92861,"line_start":2068,"line_end":2068,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92862,"byte_end":92876,"line_start":2069,"line_end":2069,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92877,"byte_end":92880,"line_start":2070,"line_end":2070,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92881,"byte_end":92929,"line_start":2071,"line_end":2071,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92930,"byte_end":92933,"line_start":2072,"line_end":2072,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92934,"byte_end":92941,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92942,"byte_end":92968,"line_start":2074,"line_end":2074,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92969,"byte_end":92986,"line_start":2075,"line_end":2075,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92987,"byte_end":92990,"line_start":2076,"line_end":2076,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":92991,"byte_end":93013,"line_start":2077,"line_end":2077,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93014,"byte_end":93034,"line_start":2078,"line_end":2078,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93035,"byte_end":93040,"line_start":2079,"line_end":2079,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93041,"byte_end":93044,"line_start":2080,"line_end":2080,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93045,"byte_end":93096,"line_start":2081,"line_end":2081,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93097,"byte_end":93145,"line_start":2082,"line_end":2082,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93146,"byte_end":93197,"line_start":2083,"line_end":2083,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93198,"byte_end":93207,"line_start":2084,"line_end":2084,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93208,"byte_end":93260,"line_start":2085,"line_end":2085,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93261,"byte_end":93325,"line_start":2086,"line_end":2086,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93326,"byte_end":93335,"line_start":2087,"line_end":2087,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93336,"byte_end":93341,"line_start":2088,"line_end":2088,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93342,"byte_end":93345,"line_start":2089,"line_end":2089,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93346,"byte_end":93385,"line_start":2090,"line_end":2090,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93386,"byte_end":93416,"line_start":2091,"line_end":2091,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93417,"byte_end":93447,"line_start":2092,"line_end":2092,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93448,"byte_end":93476,"line_start":2093,"line_end":2093,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93477,"byte_end":93507,"line_start":2094,"line_end":2094,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93508,"byte_end":93515,"line_start":2095,"line_end":2095,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93967,"byte_end":93977,"line_start":2112,"line_end":2112,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"pub fn par_extend<I>(&mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":3450},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93568,"byte_end":93633,"line_start":2099,"line_end":2099,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93638,"byte_end":93680,"line_start":2100,"line_end":2100,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93685,"byte_end":93688,"line_start":2101,"line_end":2101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93693,"byte_end":93707,"line_start":2102,"line_end":2102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93712,"byte_end":93715,"line_start":2103,"line_end":2103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93720,"byte_end":93727,"line_start":2104,"line_end":2104,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93732,"byte_end":93758,"line_start":2105,"line_end":2105,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93763,"byte_end":93766,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93771,"byte_end":93796,"line_start":2107,"line_end":2107,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93801,"byte_end":93826,"line_start":2108,"line_end":2108,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93831,"byte_end":93889,"line_start":2109,"line_end":2109,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93894,"byte_end":93947,"line_start":2110,"line_end":2110,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":93952,"byte_end":93959,"line_start":2111,"line_end":2111,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":3454},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","parent":null,"children":[{"krate":0,"index":3455},{"krate":0,"index":3456},{"krate":0,"index":3457},{"krate":0,"index":3460},{"krate":0,"index":3461},{"krate":0,"index":3464},{"krate":0,"index":5122},{"krate":0,"index":5125},{"krate":0,"index":5128},{"krate":0,"index":3467},{"krate":0,"index":3472},{"krate":0,"index":3478},{"krate":0,"index":5131},{"krate":0,"index":5135},{"krate":0,"index":3485},{"krate":0,"index":3489},{"krate":0,"index":5147},{"krate":0,"index":5139},{"krate":0,"index":5154},{"krate":0,"index":5158},{"krate":0,"index":3495},{"krate":0,"index":5170},{"krate":0,"index":5162},{"krate":0,"index":3501},{"krate":0,"index":3504},{"krate":0,"index":3510}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [options][std::option]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":298880,"byte_end":298934,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":298935,"byte_end":298938,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":298939,"byte_end":299017,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299018,"byte_end":299056,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299057,"byte_end":299060,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299061,"byte_end":299124,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5122},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299727,"byte_end":299735,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5124}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299219,"byte_end":299295,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299296,"byte_end":299299,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299300,"byte_end":299382,"line_start":15,"line_end":15,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299383,"byte_end":299386,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299387,"byte_end":299450,"line_start":17,"line_end":17,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299451,"byte_end":299454,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299455,"byte_end":299524,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299525,"byte_end":299605,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299606,"byte_end":299691,"line_start":21,"line_end":21,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":5131},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301362,"byte_end":301366,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5134}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":300867,"byte_end":300949,"line_start":75,"line_end":75,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":300950,"byte_end":300953,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":300954,"byte_end":301036,"line_start":77,"line_end":77,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301037,"byte_end":301040,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301041,"byte_end":301099,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301100,"byte_end":301103,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301104,"byte_end":301173,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301174,"byte_end":301254,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301255,"byte_end":301333,"line_start":83,"line_end":83,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":5154},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302363,"byte_end":302370,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5157}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301845,"byte_end":301935,"line_start":110,"line_end":110,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301936,"byte_end":301939,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301940,"byte_end":302022,"line_start":112,"line_end":112,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302023,"byte_end":302026,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302027,"byte_end":302089,"line_start":114,"line_end":114,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302090,"byte_end":302093,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302094,"byte_end":302163,"line_start":116,"line_end":116,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302164,"byte_end":302244,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302245,"byte_end":302334,"line_start":118,"line_end":118,"column_start":1,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":3517},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":3518},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":3527},{"krate":0,"index":3530},{"krate":0,"index":3533},{"krate":0,"index":3536},{"krate":0,"index":3539},{"krate":0,"index":3542},{"krate":0,"index":3545}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"/ The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304107,"byte_end":304175,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304176,"byte_end":304245,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ have easy access to the various traits and methods you will need.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\prelude.rs","byte_start":304246,"byte_end":304315,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","parent":null,"children":[{"krate":0,"index":3549},{"krate":0,"index":3550},{"krate":0,"index":3551},{"krate":0,"index":5177},{"krate":0,"index":5180},{"krate":0,"index":5183},{"krate":0,"index":3554},{"krate":0,"index":3559},{"krate":0,"index":3562},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":5186},{"krate":0,"index":5191},{"krate":0,"index":5197},{"krate":0,"index":5202},{"krate":0,"index":5207},{"krate":0,"index":5213},{"krate":0,"index":5218},{"krate":0,"index":5223},{"krate":0,"index":5229},{"krate":0,"index":5234},{"krate":0,"index":5239},{"krate":0,"index":5245},{"krate":0,"index":5250},{"krate":0,"index":5255},{"krate":0,"index":5261},{"krate":0,"index":5266},{"krate":0,"index":5271},{"krate":0,"index":5277},{"krate":0,"index":5282},{"krate":0,"index":5287},{"krate":0,"index":5293},{"krate":0,"index":5298},{"krate":0,"index":5303},{"krate":0,"index":5309},{"krate":0,"index":5314},{"krate":0,"index":5316},{"krate":0,"index":5320},{"krate":0,"index":5325},{"krate":0,"index":5327},{"krate":0,"index":5331}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [ranges][std::range],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304664,"byte_end":304717,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/ the type for values created by `a..b` expressions","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304718,"byte_end":304771,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304772,"byte_end":304775,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304776,"byte_end":304854,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304855,"byte_end":304898,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/ ","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304899,"byte_end":304903,"line_start":6,"line_end":6,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304904,"byte_end":304911,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304912,"byte_end":304938,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304939,"byte_end":304943,"line_start":9,"line_end":9,"column_start":1,"column_end":5}},{"value":"/ let r = (0..100u64).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304944,"byte_end":304983,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/                    .sum();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":304984,"byte_end":305014,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/ ","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305015,"byte_end":305019,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305020,"byte_end":305069,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305070,"byte_end":305111,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305112,"byte_end":305119,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305120,"byte_end":305123,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305124,"byte_end":305194,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":5177},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305966,"byte_end":305970,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5179}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305254,"byte_end":305324,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305325,"byte_end":305328,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305329,"byte_end":305397,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64` or `i64`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305398,"byte_end":305446,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305447,"byte_end":305450,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305451,"byte_end":305458,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305459,"byte_end":305485,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305486,"byte_end":305489,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305490,"byte_end":305530,"line_start":31,"line_end":31,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305531,"byte_end":305569,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305570,"byte_end":305635,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305636,"byte_end":305678,"line_start":34,"line_end":34,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305679,"byte_end":305717,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305718,"byte_end":305721,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305722,"byte_end":305757,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305758,"byte_end":305823,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305824,"byte_end":305866,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305867,"byte_end":305896,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305897,"byte_end":305900,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305901,"byte_end":305922,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":305923,"byte_end":305930,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3569},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","parent":null,"children":[{"krate":0,"index":3570},{"krate":0,"index":3571},{"krate":0,"index":3572},{"krate":0,"index":3575},{"krate":0,"index":5336},{"krate":0,"index":5339},{"krate":0,"index":5342},{"krate":0,"index":3578},{"krate":0,"index":5352},{"krate":0,"index":5345},{"krate":0,"index":5358},{"krate":0,"index":5362},{"krate":0,"index":3584},{"krate":0,"index":3588},{"krate":0,"index":5374},{"krate":0,"index":5366},{"krate":0,"index":5381},{"krate":0,"index":5385},{"krate":0,"index":3595},{"krate":0,"index":5397},{"krate":0,"index":5389},{"krate":0,"index":3602}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [results][std::result]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310356,"byte_end":310410,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310411,"byte_end":310414,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310415,"byte_end":310493,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310494,"byte_end":310532,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310533,"byte_end":310536,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310537,"byte_end":310600,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5336},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310745,"byte_end":310753,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5338}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310674,"byte_end":310709,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5358},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311174,"byte_end":311178,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5361}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311084,"byte_end":311145,"line_start":35,"line_end":35,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":5381},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311763,"byte_end":311770,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5384}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311676,"byte_end":311734,"line_start":62,"line_end":62,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":3610},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","parent":null,"children":[{"krate":0,"index":3611},{"krate":0,"index":3705},{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":3797},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3807},{"krate":0,"index":3810},{"krate":0,"index":3811},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3817},{"krate":0,"index":3820},{"krate":0,"index":3827},{"krate":0,"index":3830},{"krate":0,"index":3854},{"krate":0,"index":3857},{"krate":0,"index":3863},{"krate":0,"index":3869},{"krate":0,"index":3875},{"krate":0,"index":5426},{"krate":0,"index":5430},{"krate":0,"index":3881},{"krate":0,"index":3885},{"krate":0,"index":3892},{"krate":0,"index":3900},{"krate":0,"index":3904},{"krate":0,"index":5434},{"krate":0,"index":5439},{"krate":0,"index":3911},{"krate":0,"index":3915},{"krate":0,"index":3922},{"krate":0,"index":3930},{"krate":0,"index":3935},{"krate":0,"index":5443},{"krate":0,"index":5448},{"krate":0,"index":3942},{"krate":0,"index":3946},{"krate":0,"index":3953},{"krate":0,"index":3961},{"krate":0,"index":3966},{"krate":0,"index":5452},{"krate":0,"index":5456},{"krate":0,"index":3973},{"krate":0,"index":3980},{"krate":0,"index":3988},{"krate":0,"index":3992},{"krate":0,"index":5460},{"krate":0,"index":5465},{"krate":0,"index":3999},{"krate":0,"index":4006},{"krate":0,"index":4014},{"krate":0,"index":4019},{"krate":0,"index":4026},{"krate":0,"index":4032},{"krate":0,"index":4037},{"krate":0,"index":4042},{"krate":0,"index":4049},{"krate":0,"index":4060},{"krate":0,"index":4066},{"krate":0,"index":4071},{"krate":0,"index":4078}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [slices][std::slice]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313616,"byte_end":313668,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313669,"byte_end":313672,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313673,"byte_end":313751,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313752,"byte_end":313790,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313791,"byte_end":313794,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":313795,"byte_end":313856,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":3820},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314177,"byte_end":314190,"line_start":25,"line_end":25,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T: Sync>","parent":null,"children":[{"krate":0,"index":3822},{"krate":0,"index":3823},{"krate":0,"index":3825},{"krate":0,"index":3826}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314131,"byte_end":314166,"line_start":24,"line_end":24,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314309,"byte_end":314326,"line_start":28,"line_end":28,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"pub fn as_parallel_slice(&Self) -> &[T]","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314206,"byte_end":314275,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314280,"byte_end":314301,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314759,"byte_end":314768,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"pub fn par_split<P>(&Self, P) -> Split<, T, P> where P: Fn(&T) -> bool +\nSync + Send","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314348,"byte_end":314421,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314426,"byte_end":314450,"line_start":31,"line_end":31,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314455,"byte_end":314458,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314463,"byte_end":314477,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314482,"byte_end":314485,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314490,"byte_end":314497,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314502,"byte_end":314528,"line_start":36,"line_end":36,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314533,"byte_end":314585,"line_start":37,"line_end":37,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314590,"byte_end":314621,"line_start":38,"line_end":38,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314626,"byte_end":314679,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314684,"byte_end":314699,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314704,"byte_end":314739,"line_start":41,"line_end":41,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314744,"byte_end":314751,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315297,"byte_end":315308,"line_start":62,"line_end":62,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"pub fn par_windows(&Self, usize) -> Windows<, T>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of\n length `size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":314976,"byte_end":315038,"line_start":52,"line_end":52,"column_start":5,"column_end":67}},{"value":"/ length `size`. The windows overlap.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315043,"byte_end":315082,"line_start":53,"line_end":53,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315087,"byte_end":315090,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315095,"byte_end":315109,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315114,"byte_end":315117,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315122,"byte_end":315129,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315134,"byte_end":315160,"line_start":58,"line_end":58,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315165,"byte_end":315226,"line_start":59,"line_end":59,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315231,"byte_end":315277,"line_start":60,"line_end":60,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315282,"byte_end":315289,"line_start":61,"line_end":61,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315820,"byte_end":315830,"line_start":79,"line_end":79,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"pub fn par_chunks(&Self, usize) -> Chunks<, T>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `size` elements of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315474,"byte_end":315537,"line_start":69,"line_end":69,"column_start":5,"column_end":68}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315542,"byte_end":315590,"line_start":70,"line_end":70,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315595,"byte_end":315598,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315603,"byte_end":315617,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315622,"byte_end":315625,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315630,"byte_end":315637,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315642,"byte_end":315668,"line_start":75,"line_end":75,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315673,"byte_end":315738,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315743,"byte_end":315800,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":315805,"byte_end":315812,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316228,"byte_end":316244,"line_start":97,"line_end":97,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T: Send>","parent":null,"children":[{"krate":0,"index":3832},{"krate":0,"index":3833},{"krate":0,"index":3835},{"krate":0,"index":3836},{"krate":0,"index":3838},{"krate":0,"index":3841},{"krate":0,"index":3845},{"krate":0,"index":3847},{"krate":0,"index":3850}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316174,"byte_end":316217,"line_start":96,"line_end":96,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3832},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316371,"byte_end":316392,"line_start":100,"line_end":100,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"pub fn as_parallel_slice_mut(&mut Self) -> &mut [T]","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316260,"byte_end":316333,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316338,"byte_end":316363,"line_start":99,"line_end":99,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3833},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316841,"byte_end":316854,"line_start":114,"line_end":114,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"pub fn par_split_mut<P>(&mut Self, P) -> SplitMut<, T, P> where P: Fn(&T) ->\nbool + Sync + Send","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316422,"byte_end":316489,"line_start":102,"line_end":102,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316494,"byte_end":316532,"line_start":103,"line_end":103,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316537,"byte_end":316540,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316545,"byte_end":316559,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316564,"byte_end":316567,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316572,"byte_end":316579,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316584,"byte_end":316610,"line_start":108,"line_end":108,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316615,"byte_end":316669,"line_start":109,"line_end":109,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316674,"byte_end":316710,"line_start":110,"line_end":110,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316715,"byte_end":316759,"line_start":111,"line_end":111,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316764,"byte_end":316821,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":316826,"byte_end":316833,"line_start":113,"line_end":113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3835},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317472,"byte_end":317486,"line_start":135,"line_end":135,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"pub fn par_chunks_mut(&mut Self, usize) -> ChunksMut<, T>","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `size` elements of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317076,"byte_end":317139,"line_start":123,"line_end":123,"column_start":5,"column_end":68}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317144,"byte_end":317208,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317213,"byte_end":317216,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317221,"byte_end":317235,"line_start":126,"line_end":126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317240,"byte_end":317243,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317248,"byte_end":317255,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317260,"byte_end":317286,"line_start":129,"line_end":129,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317291,"byte_end":317327,"line_start":130,"line_end":130,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317332,"byte_end":317359,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317364,"byte_end":317408,"line_start":132,"line_end":132,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317413,"byte_end":317452,"line_start":133,"line_end":133,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317457,"byte_end":317464,"line_start":134,"line_end":134,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319183,"byte_end":319191,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"pub fn par_sort(&mut Self) where T: Ord","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317726,"byte_end":317758,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317763,"byte_end":317766,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317771,"byte_end":317862,"line_start":145,"line_end":145,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317867,"byte_end":317870,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317875,"byte_end":317968,"line_start":147,"line_end":147,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":317973,"byte_end":318026,"line_start":148,"line_end":148,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318031,"byte_end":318088,"line_start":149,"line_end":149,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318093,"byte_end":318096,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318101,"byte_end":318129,"line_start":151,"line_end":151,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318134,"byte_end":318137,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318142,"byte_end":318205,"line_start":153,"line_end":153,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318210,"byte_end":318263,"line_start":154,"line_end":154,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318268,"byte_end":318360,"line_start":155,"line_end":155,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318365,"byte_end":318429,"line_start":156,"line_end":156,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318434,"byte_end":318437,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318442,"byte_end":318535,"line_start":158,"line_end":158,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318540,"byte_end":318590,"line_start":159,"line_end":159,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318595,"byte_end":318598,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318603,"byte_end":318697,"line_start":161,"line_end":161,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318702,"byte_end":318796,"line_start":162,"line_end":162,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318801,"byte_end":318897,"line_start":163,"line_end":163,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318902,"byte_end":318966,"line_start":164,"line_end":164,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318971,"byte_end":318974,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318979,"byte_end":318993,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":318998,"byte_end":319001,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319006,"byte_end":319013,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319018,"byte_end":319044,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319049,"byte_end":319052,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319057,"byte_end":319091,"line_start":171,"line_end":171,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319096,"byte_end":319099,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319104,"byte_end":319121,"line_start":173,"line_end":173,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319126,"byte_end":319163,"line_start":174,"line_end":174,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319168,"byte_end":319175,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320926,"byte_end":320937,"line_start":219,"line_end":219,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"pub fn par_sort_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering + Sync","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319315,"byte_end":319374,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319379,"byte_end":319382,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319387,"byte_end":319478,"line_start":185,"line_end":185,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319483,"byte_end":319486,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319491,"byte_end":319584,"line_start":187,"line_end":187,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319589,"byte_end":319642,"line_start":188,"line_end":188,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319647,"byte_end":319710,"line_start":189,"line_end":189,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319715,"byte_end":319718,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319723,"byte_end":319751,"line_start":191,"line_end":191,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319756,"byte_end":319759,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319764,"byte_end":319827,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319832,"byte_end":319885,"line_start":194,"line_end":194,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319890,"byte_end":319982,"line_start":195,"line_end":195,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":319987,"byte_end":320051,"line_start":196,"line_end":196,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320056,"byte_end":320059,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320064,"byte_end":320157,"line_start":198,"line_end":198,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320162,"byte_end":320212,"line_start":199,"line_end":199,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320217,"byte_end":320220,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320225,"byte_end":320319,"line_start":201,"line_end":201,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320324,"byte_end":320418,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320423,"byte_end":320519,"line_start":203,"line_end":203,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320524,"byte_end":320588,"line_start":204,"line_end":204,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320593,"byte_end":320596,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320601,"byte_end":320615,"line_start":206,"line_end":206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320620,"byte_end":320623,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320628,"byte_end":320635,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320640,"byte_end":320666,"line_start":209,"line_end":209,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320671,"byte_end":320674,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320679,"byte_end":320711,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320716,"byte_end":320751,"line_start":212,"line_end":212,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320756,"byte_end":320791,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320796,"byte_end":320799,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320804,"byte_end":320826,"line_start":215,"line_end":215,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320831,"byte_end":320866,"line_start":216,"line_end":216,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320871,"byte_end":320906,"line_start":217,"line_end":217,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":320911,"byte_end":320918,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3841},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322649,"byte_end":322664,"line_start":259,"line_end":259,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"pub fn par_sort_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) -> B + Sync","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321126,"byte_end":321189,"line_start":226,"line_end":226,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321194,"byte_end":321197,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321202,"byte_end":321293,"line_start":228,"line_end":228,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321298,"byte_end":321301,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321306,"byte_end":321399,"line_start":230,"line_end":230,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321404,"byte_end":321457,"line_start":231,"line_end":231,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321462,"byte_end":321533,"line_start":232,"line_end":232,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321538,"byte_end":321541,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321546,"byte_end":321574,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321579,"byte_end":321582,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321587,"byte_end":321650,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321655,"byte_end":321708,"line_start":237,"line_end":237,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321713,"byte_end":321805,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321810,"byte_end":321874,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321879,"byte_end":321882,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321887,"byte_end":321980,"line_start":241,"line_end":241,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":321985,"byte_end":322035,"line_start":242,"line_end":242,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322040,"byte_end":322043,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322048,"byte_end":322142,"line_start":244,"line_end":244,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322147,"byte_end":322241,"line_start":245,"line_end":245,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322246,"byte_end":322342,"line_start":246,"line_end":246,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322347,"byte_end":322411,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322416,"byte_end":322419,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322424,"byte_end":322438,"line_start":249,"line_end":249,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322443,"byte_end":322446,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322451,"byte_end":322458,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322463,"byte_end":322489,"line_start":252,"line_end":252,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322494,"byte_end":322497,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322502,"byte_end":322539,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322544,"byte_end":322547,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322552,"byte_end":322587,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322592,"byte_end":322629,"line_start":257,"line_end":257,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322634,"byte_end":322641,"line_start":258,"line_end":258,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3845},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324109,"byte_end":324126,"line_start":298,"line_end":298,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"pub fn par_sort_unstable(&mut Self) where T: Ord","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322838,"byte_end":322920,"line_start":267,"line_end":267,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322925,"byte_end":322928,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":322933,"byte_end":323028,"line_start":269,"line_end":269,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323033,"byte_end":323065,"line_start":270,"line_end":270,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323070,"byte_end":323073,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323078,"byte_end":323106,"line_start":272,"line_end":272,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323111,"byte_end":323114,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323119,"byte_end":323210,"line_start":274,"line_end":274,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323215,"byte_end":323302,"line_start":275,"line_end":275,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323307,"byte_end":323397,"line_start":276,"line_end":276,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323402,"byte_end":323436,"line_start":277,"line_end":277,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323441,"byte_end":323444,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323449,"byte_end":323541,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323546,"byte_end":323606,"line_start":280,"line_end":280,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323611,"byte_end":323614,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323619,"byte_end":323708,"line_start":282,"line_end":282,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323713,"byte_end":323806,"line_start":283,"line_end":283,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323811,"byte_end":323824,"line_start":284,"line_end":284,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323829,"byte_end":323832,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323837,"byte_end":323883,"line_start":286,"line_end":286,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323888,"byte_end":323891,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323896,"byte_end":323910,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323915,"byte_end":323918,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323923,"byte_end":323930,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323935,"byte_end":323961,"line_start":291,"line_end":291,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323966,"byte_end":323969,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":323974,"byte_end":324008,"line_start":293,"line_end":293,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324013,"byte_end":324016,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324021,"byte_end":324047,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324052,"byte_end":324089,"line_start":296,"line_end":296,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324094,"byte_end":324101,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3847},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325686,"byte_end":325706,"line_start":340,"line_end":340,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"pub fn par_sort_unstable_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering +\nSync","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but may not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but may not preserve the order of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324250,"byte_end":324343,"line_start":305,"line_end":305,"column_start":5,"column_end":98}},{"value":"/ equal elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324348,"byte_end":324367,"line_start":306,"line_end":306,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324372,"byte_end":324375,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324380,"byte_end":324475,"line_start":308,"line_end":308,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324480,"byte_end":324512,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324517,"byte_end":324520,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324525,"byte_end":324553,"line_start":311,"line_end":311,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324558,"byte_end":324561,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324566,"byte_end":324657,"line_start":313,"line_end":313,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324662,"byte_end":324749,"line_start":314,"line_end":314,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324754,"byte_end":324844,"line_start":315,"line_end":315,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324849,"byte_end":324883,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324888,"byte_end":324891,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324896,"byte_end":324988,"line_start":318,"line_end":318,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":324993,"byte_end":325053,"line_start":319,"line_end":319,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325058,"byte_end":325061,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325066,"byte_end":325155,"line_start":321,"line_end":321,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325160,"byte_end":325253,"line_start":322,"line_end":322,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325258,"byte_end":325271,"line_start":323,"line_end":323,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325276,"byte_end":325279,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325284,"byte_end":325330,"line_start":325,"line_end":325,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325335,"byte_end":325338,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325343,"byte_end":325357,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325362,"byte_end":325365,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325370,"byte_end":325377,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325382,"byte_end":325408,"line_start":330,"line_end":330,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325413,"byte_end":325416,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325421,"byte_end":325453,"line_start":332,"line_end":332,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325458,"byte_end":325502,"line_start":333,"line_end":333,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325507,"byte_end":325542,"line_start":334,"line_end":334,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325547,"byte_end":325550,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325555,"byte_end":325577,"line_start":336,"line_end":336,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325582,"byte_end":325626,"line_start":337,"line_end":337,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325631,"byte_end":325666,"line_start":338,"line_end":338,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325671,"byte_end":325678,"line_start":339,"line_end":339,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3850},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327226,"byte_end":327250,"line_start":379,"line_end":379,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"pub fn par_sort_unstable_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) ->\nB + Sync","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but may not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but may not preserve the order","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325895,"byte_end":325989,"line_start":347,"line_end":347,"column_start":5,"column_end":99}},{"value":"/ of equal elements.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":325994,"byte_end":326016,"line_start":348,"line_end":348,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326021,"byte_end":326024,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326029,"byte_end":326124,"line_start":350,"line_end":350,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326129,"byte_end":326161,"line_start":351,"line_end":351,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326166,"byte_end":326169,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326174,"byte_end":326202,"line_start":353,"line_end":353,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326207,"byte_end":326210,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326215,"byte_end":326306,"line_start":355,"line_end":355,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326311,"byte_end":326398,"line_start":356,"line_end":356,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326403,"byte_end":326493,"line_start":357,"line_end":357,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326498,"byte_end":326532,"line_start":358,"line_end":358,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326537,"byte_end":326540,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326545,"byte_end":326637,"line_start":360,"line_end":360,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326642,"byte_end":326702,"line_start":361,"line_end":361,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326707,"byte_end":326710,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326715,"byte_end":326804,"line_start":363,"line_end":363,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326809,"byte_end":326902,"line_start":364,"line_end":364,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326907,"byte_end":326920,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326925,"byte_end":326928,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326933,"byte_end":326979,"line_start":367,"line_end":367,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326984,"byte_end":326987,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":326992,"byte_end":327006,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327011,"byte_end":327014,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327019,"byte_end":327026,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327031,"byte_end":327057,"line_start":372,"line_end":372,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327062,"byte_end":327065,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327070,"byte_end":327107,"line_start":374,"line_end":374,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327112,"byte_end":327115,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327120,"byte_end":327164,"line_start":376,"line_end":376,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327169,"byte_end":327206,"line_start":377,"line_end":377,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":327211,"byte_end":327218,"line_start":378,"line_end":378,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5426},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328502,"byte_end":328506,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5429}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328420,"byte_end":328473,"line_start":433,"line_end":433,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":5434},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330023,"byte_end":330029,"line_start":498,"line_end":498,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5437},{"krate":0,"index":5438}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":329924,"byte_end":329994,"line_start":496,"line_end":496,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":5443},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":331966,"byte_end":331973,"line_start":574,"line_end":574,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":5446},{"krate":0,"index":5447}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":331870,"byte_end":331937,"line_start":572,"line_end":572,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5452},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334022,"byte_end":334029,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5455}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":333942,"byte_end":333993,"line_start":650,"line_end":650,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5460},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335476,"byte_end":335485,"line_start":709,"line_end":709,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":5463},{"krate":0,"index":5464}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335379,"byte_end":335447,"line_start":707,"line_end":707,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":4026},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337328,"byte_end":337333,"line_start":778,"line_end":778,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4030},{"krate":0,"index":4031}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337258,"byte_end":337316,"line_start":777,"line_end":777,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4060},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339200,"byte_end":339208,"line_start":850,"line_end":850,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":4064},{"krate":0,"index":4065}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339122,"byte_end":339188,"line_start":849,"line_end":849,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":4089},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","parent":null,"children":[{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4092},{"krate":0,"index":4093},{"krate":0,"index":4094},{"krate":0,"index":4097},{"krate":0,"index":4106},{"krate":0,"index":4108},{"krate":0,"index":4119},{"krate":0,"index":4122},{"krate":0,"index":4129},{"krate":0,"index":5472},{"krate":0,"index":5475},{"krate":0,"index":5478},{"krate":0,"index":4137},{"krate":0,"index":4140},{"krate":0,"index":4145},{"krate":0,"index":5481},{"krate":0,"index":5486},{"krate":0,"index":5490},{"krate":0,"index":4151},{"krate":0,"index":4155},{"krate":0,"index":4161},{"krate":0,"index":5494},{"krate":0,"index":5499},{"krate":0,"index":5503},{"krate":0,"index":4171},{"krate":0,"index":4177},{"krate":0,"index":4181},{"krate":0,"index":4186},{"krate":0,"index":4192},{"krate":0,"index":5507},{"krate":0,"index":5511},{"krate":0,"index":5514},{"krate":0,"index":4201},{"krate":0,"index":5517},{"krate":0,"index":5521},{"krate":0,"index":5524},{"krate":0,"index":4207}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [strings][std::str]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400573,"byte_end":400624,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400625,"byte_end":400628,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400629,"byte_end":400707,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400708,"byte_end":400746,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400747,"byte_end":400750,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400751,"byte_end":400823,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400824,"byte_end":400896,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400897,"byte_end":400972,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":400973,"byte_end":401050,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":401051,"byte_end":401054,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":401055,"byte_end":401134,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":401135,"byte_end":401220,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":401221,"byte_end":401224,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":401225,"byte_end":401282,"line_start":14,"line_end":14,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402239,"byte_end":402253,"line_start":48,"line_end":48,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":4098},{"krate":0,"index":4099},{"krate":0,"index":4100},{"krate":0,"index":4102},{"krate":0,"index":4104},{"krate":0,"index":4105}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402192,"byte_end":402228,"line_start":47,"line_end":47,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4098},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402370,"byte_end":402388,"line_start":51,"line_end":51,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"pub fn as_parallel_string(&Self) -> &str","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402260,"byte_end":402332,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402337,"byte_end":402362,"line_start":50,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4099},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402673,"byte_end":402682,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"pub fn par_chars(&Self) -> Chars","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402410,"byte_end":402474,"line_start":53,"line_end":53,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402479,"byte_end":402482,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402487,"byte_end":402501,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402506,"byte_end":402509,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402514,"byte_end":402521,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402526,"byte_end":402552,"line_start":58,"line_end":58,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402557,"byte_end":402617,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402622,"byte_end":402653,"line_start":60,"line_end":60,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402658,"byte_end":402665,"line_start":61,"line_end":61,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4100},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403333,"byte_end":403342,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"pub fn par_split<P: Pattern>(&Self, P) -> Split<, P>","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402763,"byte_end":402825,"line_start":66,"line_end":66,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402830,"byte_end":402888,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402893,"byte_end":402896,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402901,"byte_end":402972,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":402977,"byte_end":403054,"line_start":70,"line_end":70,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403059,"byte_end":403062,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403067,"byte_end":403081,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403086,"byte_end":403089,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403094,"byte_end":403101,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403106,"byte_end":403132,"line_start":75,"line_end":75,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403137,"byte_end":403179,"line_start":76,"line_end":76,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403184,"byte_end":403206,"line_start":77,"line_end":77,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403211,"byte_end":403263,"line_start":78,"line_end":78,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403268,"byte_end":403282,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403287,"byte_end":403313,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403318,"byte_end":403325,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4102},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404167,"byte_end":404187,"line_start":103,"line_end":103,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"pub fn par_split_terminator<P: Pattern>(&Self, P) -> SplitTerminator<, P>","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403458,"byte_end":403521,"line_start":86,"line_end":86,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403526,"byte_end":403595,"line_start":87,"line_end":87,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403600,"byte_end":403670,"line_start":88,"line_end":88,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403675,"byte_end":403717,"line_start":89,"line_end":89,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403722,"byte_end":403725,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403730,"byte_end":403801,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403806,"byte_end":403883,"line_start":92,"line_end":92,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403888,"byte_end":403891,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403896,"byte_end":403910,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403915,"byte_end":403918,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403923,"byte_end":403930,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403935,"byte_end":403961,"line_start":97,"line_end":97,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":403966,"byte_end":404005,"line_start":98,"line_end":98,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404010,"byte_end":404065,"line_start":99,"line_end":99,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404070,"byte_end":404089,"line_start":100,"line_end":100,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404094,"byte_end":404147,"line_start":101,"line_end":101,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404152,"byte_end":404159,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4104},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404854,"byte_end":404863,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"pub fn par_lines(&Self) -> Lines","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404325,"byte_end":404399,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404404,"byte_end":404474,"line_start":108,"line_end":108,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404479,"byte_end":404554,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404559,"byte_end":404582,"line_start":110,"line_end":110,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404587,"byte_end":404590,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404595,"byte_end":404609,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404614,"byte_end":404617,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404622,"byte_end":404629,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404634,"byte_end":404660,"line_start":115,"line_end":115,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404665,"byte_end":404713,"line_start":116,"line_end":116,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404718,"byte_end":404738,"line_start":117,"line_end":117,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404743,"byte_end":404768,"line_start":118,"line_end":118,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404773,"byte_end":404792,"line_start":119,"line_end":119,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404797,"byte_end":404834,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404839,"byte_end":404846,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4105},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405484,"byte_end":405504,"line_start":141,"line_end":141,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"pub fn par_split_whitespace(&Self) -> SplitWhitespace","parent":{"krate":0,"index":4097},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":404934,"byte_end":405006,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405011,"byte_end":405053,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405058,"byte_end":405061,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405066,"byte_end":405139,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405144,"byte_end":405209,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405214,"byte_end":405217,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405222,"byte_end":405236,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405241,"byte_end":405244,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405249,"byte_end":405256,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405261,"byte_end":405287,"line_start":135,"line_end":135,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405292,"byte_end":405338,"line_start":136,"line_end":136,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405343,"byte_end":405374,"line_start":137,"line_end":137,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405379,"byte_end":405418,"line_start":138,"line_end":138,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405423,"byte_end":405464,"line_start":139,"line_end":139,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":405469,"byte_end":405476,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4112},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406318,"byte_end":406325,"line_start":167,"line_end":167,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":5469},{"krate":0,"index":4113},{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4116}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406105,"byte_end":406176,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406181,"byte_end":406226,"line_start":164,"line_end":164,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406231,"byte_end":406234,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406239,"byte_end":406303,"line_start":166,"line_end":166,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406384,"byte_end":406391,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"pub fn find_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4114},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406434,"byte_end":406442,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"pub fn rfind_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4115},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406485,"byte_end":406497,"line_start":171,"line_end":171,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"pub fn is_suffix_of(&Self, &str) -> bool","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406531,"byte_end":406540,"line_start":172,"line_end":172,"column_start":12,"column_end":21},"name":"fold_with","qualname":"::str::private::Pattern::fold_with","value":"pub fn fold_with<'ch, F>(&Self, &'ch str, F, bool) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":4112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5472},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":408081,"byte_end":408086,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":5474}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":407992,"byte_end":408045,"line_start":236,"line_end":236,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":5481},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409152,"byte_end":409157,"line_start":282,"line_end":282,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":5484},{"krate":0,"index":5485}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409056,"byte_end":409116,"line_start":280,"line_end":280,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":5494},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":410866,"byte_end":410881,"line_start":345,"line_end":345,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":5497},{"krate":0,"index":5498}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":410759,"byte_end":410830,"line_start":343,"line_end":343,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5507},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412800,"byte_end":412805,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412720,"byte_end":412764,"line_start":411,"line_end":411,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5517},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":413451,"byte_end":413466,"line_start":437,"line_end":437,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":413354,"byte_end":413415,"line_start":435,"line_end":435,"column_start":1,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":4213},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","parent":null,"children":[{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":5527},{"krate":0,"index":5530},{"krate":0,"index":5533},{"krate":0,"index":4219},{"krate":0,"index":4224},{"krate":0,"index":4230},{"krate":0,"index":4237},{"krate":0,"index":4241},{"krate":0,"index":4248},{"krate":0,"index":4252},{"krate":0,"index":4256},{"krate":0,"index":4263},{"krate":0,"index":4268},{"krate":0,"index":4272}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"/ Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":413832,"byte_end":413894,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":413895,"byte_end":413898,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":413899,"byte_end":413977,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":413978,"byte_end":414016,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414017,"byte_end":414020,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414021,"byte_end":414078,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5527},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414211,"byte_end":414219,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5529}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414126,"byte_end":414175,"line_start":12,"line_end":12,"column_start":1,"column_end":50}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\split_producer.rs","byte_start":8163,"byte_end":8176,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\split_producer.rs","byte_start":9598,"byte_end":9611,"line_start":71,"line_end":71,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12704,"byte_end":12714,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":13155,"byte_end":13159,"line_start":39,"line_end":39,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14325,"byte_end":14329,"line_start":35,"line_end":35,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15809,"byte_end":15813,"line_start":35,"line_end":35,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":17043,"byte_end":17047,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18662,"byte_end":18666,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19733,"byte_end":19737,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":21103,"byte_end":21107,"line_start":36,"line_end":36,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":94492,"byte_end":94504,"line_start":19,"line_end":19,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":94707,"byte_end":94719,"line_start":28,"line_end":28,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":95310,"byte_end":95322,"line_start":54,"line_end":54,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":95692,"byte_end":95702,"line_start":74,"line_end":74,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":96177,"byte_end":96188,"line_start":99,"line_end":99,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":98710,"byte_end":98722,"line_start":67,"line_end":67,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":99309,"byte_end":99321,"line_start":86,"line_end":86,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":100317,"byte_end":100329,"line_start":118,"line_end":118,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":101875,"byte_end":101885,"line_start":160,"line_end":160,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":103655,"byte_end":103666,"line_start":213,"line_end":213,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104775,"byte_end":104780,"line_start":32,"line_end":32,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":105980,"byte_end":105985,"line_start":66,"line_end":66,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":107083,"byte_end":107092,"line_start":102,"line_end":102,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":107886,"byte_end":107895,"line_start":125,"line_end":125,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":108554,"byte_end":108567,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":108813,"byte_end":108826,"line_start":166,"line_end":166,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110357,"byte_end":110365,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110580,"byte_end":110588,"line_start":227,"line_end":227,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110889,"byte_end":110897,"line_start":242,"line_end":242,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":111023,"byte_end":111031,"line_start":248,"line_end":248,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":112042,"byte_end":112048,"line_start":31,"line_end":31,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":112375,"byte_end":112381,"line_start":47,"line_end":47,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":113083,"byte_end":113091,"line_start":76,"line_end":76,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":113647,"byte_end":113660,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":114774,"byte_end":114782,"line_start":150,"line_end":150,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":115541,"byte_end":115549,"line_start":177,"line_end":177,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":115709,"byte_end":115717,"line_start":186,"line_end":186,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":122715,"byte_end":122730,"line_start":25,"line_end":25,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":123083,"byte_end":123098,"line_start":36,"line_end":36,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":124079,"byte_end":124092,"line_start":66,"line_end":66,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":124978,"byte_end":124993,"line_start":95,"line_end":95,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\mod.rs","byte_start":118879,"byte_end":118886,"line_start":75,"line_end":75,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\mod.rs","byte_start":120541,"byte_end":120544,"line_start":119,"line_end":119,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131776,"byte_end":131785,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":132123,"byte_end":132132,"line_start":43,"line_end":43,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":132642,"byte_end":132650,"line_start":63,"line_end":63,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":133275,"byte_end":133292,"line_start":88,"line_end":88,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":135053,"byte_end":135059,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":135524,"byte_end":135530,"line_start":38,"line_end":38,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":136078,"byte_end":136092,"line_start":60,"line_end":60,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":136293,"byte_end":136307,"line_start":69,"line_end":69,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":137028,"byte_end":137042,"line_start":97,"line_end":97,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":137434,"byte_end":137446,"line_start":115,"line_end":115,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138589,"byte_end":138598,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139078,"byte_end":139087,"line_start":38,"line_end":38,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139660,"byte_end":139677,"line_start":61,"line_end":61,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139880,"byte_end":139897,"line_start":70,"line_end":70,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":140665,"byte_end":140682,"line_start":98,"line_end":98,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":141092,"byte_end":141107,"line_start":116,"line_end":116,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142276,"byte_end":142283,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142747,"byte_end":142754,"line_start":38,"line_end":38,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":143375,"byte_end":143390,"line_start":64,"line_end":64,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":143582,"byte_end":143597,"line_start":73,"line_end":73,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":144371,"byte_end":144386,"line_start":102,"line_end":102,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":144842,"byte_end":144855,"line_start":123,"line_end":123,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146724,"byte_end":146731,"line_start":28,"line_end":28,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":147693,"byte_end":147696,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":147959,"byte_end":147967,"line_start":33,"line_end":33,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":148317,"byte_end":148327,"line_start":45,"line_end":45,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":148630,"byte_end":148640,"line_start":57,"line_end":57,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149097,"byte_end":149104,"line_start":71,"line_end":71,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149644,"byte_end":149652,"line_start":87,"line_end":87,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149951,"byte_end":149958,"line_start":99,"line_end":99,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150280,"byte_end":150288,"line_start":111,"line_end":111,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150560,"byte_end":150566,"line_start":122,"line_end":122,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150822,"byte_end":150828,"line_start":131,"line_end":131,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151090,"byte_end":151096,"line_start":140,"line_end":140,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151354,"byte_end":151360,"line_start":149,"line_end":149,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151625,"byte_end":151631,"line_start":158,"line_end":158,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":152069,"byte_end":152072,"line_start":171,"line_end":171,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":164155,"byte_end":164163,"line_start":258,"line_end":258,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":165276,"byte_end":165290,"line_start":297,"line_end":297,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167767,"byte_end":167775,"line_start":361,"line_end":361,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":172260,"byte_end":172275,"line_start":18,"line_end":18,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":172670,"byte_end":172685,"line_start":38,"line_end":38,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":173107,"byte_end":173122,"line_start":60,"line_end":60,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":174197,"byte_end":174201,"line_start":32,"line_end":32,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":174413,"byte_end":174417,"line_start":40,"line_end":40,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":175046,"byte_end":175058,"line_start":66,"line_end":66,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":175840,"byte_end":175852,"line_start":94,"line_end":94,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":176310,"byte_end":176320,"line_start":115,"line_end":115,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177674,"byte_end":177682,"line_start":166,"line_end":166,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177932,"byte_end":177940,"line_start":175,"line_end":175,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":178518,"byte_end":178534,"line_start":200,"line_end":200,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":179321,"byte_end":179337,"line_start":228,"line_end":228,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180181,"byte_end":180195,"line_start":22,"line_end":22,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180237,"byte_end":180251,"line_start":24,"line_end":24,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180353,"byte_end":180367,"line_start":30,"line_end":30,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180905,"byte_end":180919,"line_start":55,"line_end":55,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":181179,"byte_end":181193,"line_start":69,"line_end":69,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":181437,"byte_end":181449,"line_start":82,"line_end":82,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182827,"byte_end":182831,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":183160,"byte_end":183164,"line_start":44,"line_end":44,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":183842,"byte_end":183850,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188710,"byte_end":188715,"line_start":126,"line_end":126,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188917,"byte_end":188922,"line_start":134,"line_end":134,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":189414,"byte_end":189427,"line_start":156,"line_end":156,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190806,"byte_end":190810,"line_start":27,"line_end":27,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":191139,"byte_end":191143,"line_start":43,"line_end":43,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":191803,"byte_end":191811,"line_start":67,"line_end":67,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192728,"byte_end":192731,"line_start":21,"line_end":21,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":193178,"byte_end":193181,"line_start":41,"line_end":41,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":193661,"byte_end":193664,"line_start":60,"line_end":60,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":194510,"byte_end":194518,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":195197,"byte_end":195208,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":196314,"byte_end":196325,"line_start":164,"line_end":164,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":196513,"byte_end":196524,"line_start":173,"line_end":173,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":197227,"byte_end":197238,"line_start":199,"line_end":199,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":197644,"byte_end":197653,"line_start":218,"line_end":218,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198696,"byte_end":198703,"line_start":21,"line_end":21,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":199246,"byte_end":199253,"line_start":43,"line_end":43,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":199781,"byte_end":199788,"line_start":63,"line_end":63,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":200774,"byte_end":200782,"line_start":95,"line_end":95,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":201571,"byte_end":201586,"line_start":125,"line_end":125,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":202885,"byte_end":202896,"line_start":181,"line_end":181,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203300,"byte_end":203311,"line_start":198,"line_end":198,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203625,"byte_end":203636,"line_start":209,"line_end":209,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203993,"byte_end":204008,"line_start":227,"line_end":227,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1698}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":204239,"byte_end":204254,"line_start":237,"line_end":237,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":205086,"byte_end":205101,"line_start":267,"line_end":267,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1719},{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":205582,"byte_end":205595,"line_start":288,"line_end":288,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":207219,"byte_end":207222,"line_start":29,"line_end":29,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":207606,"byte_end":207609,"line_start":46,"line_end":46,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":208358,"byte_end":208367,"line_start":73,"line_end":73,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":209076,"byte_end":209085,"line_start":94,"line_end":94,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":209796,"byte_end":209807,"line_start":120,"line_end":120,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":211469,"byte_end":211474,"line_start":30,"line_end":30,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":211866,"byte_end":211871,"line_start":47,"line_end":47,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":213289,"byte_end":213299,"line_start":32,"line_end":32,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":213676,"byte_end":213686,"line_start":49,"line_end":49,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":214639,"byte_end":214648,"line_start":86,"line_end":86,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1876},{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":215452,"byte_end":215461,"line_start":113,"line_end":113,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1891}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":216116,"byte_end":216134,"line_start":140,"line_end":140,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":216418,"byte_end":216436,"line_start":149,"line_end":149,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":219269,"byte_end":219282,"line_start":243,"line_end":243,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":220416,"byte_end":220429,"line_start":281,"line_end":281,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":220995,"byte_end":221008,"line_start":301,"line_end":301,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1934}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":222597,"byte_end":222615,"line_start":43,"line_end":43,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":222992,"byte_end":223010,"line_start":60,"line_end":60,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":224392,"byte_end":224403,"line_start":32,"line_end":32,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":224970,"byte_end":224981,"line_start":54,"line_end":54,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1983},{"krate":0,"index":1984}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226022,"byte_end":226030,"line_start":90,"line_end":90,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226581,"byte_end":226600,"line_start":116,"line_end":116,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226857,"byte_end":226876,"line_start":129,"line_end":129,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":229051,"byte_end":229066,"line_start":206,"line_end":206,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":229843,"byte_end":229858,"line_start":234,"line_end":234,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2030}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":230511,"byte_end":230526,"line_start":255,"line_end":255,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2033}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":230904,"byte_end":230923,"line_start":274,"line_end":274,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":231159,"byte_end":231178,"line_start":286,"line_end":286,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":232261,"byte_end":232280,"line_start":322,"line_end":322,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":232825,"byte_end":232842,"line_start":347,"line_end":347,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233997,"byte_end":234003,"line_start":21,"line_end":21,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":234468,"byte_end":234474,"line_start":41,"line_end":41,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":234937,"byte_end":234943,"line_start":59,"line_end":59,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2103},{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":235783,"byte_end":235791,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":236463,"byte_end":236477,"line_start":113,"line_end":113,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":237667,"byte_end":237681,"line_start":163,"line_end":163,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2146}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":237878,"byte_end":237892,"line_start":172,"line_end":172,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":238597,"byte_end":238611,"line_start":197,"line_end":197,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2163},{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":239007,"byte_end":239019,"line_start":215,"line_end":215,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":239700,"byte_end":239709,"line_start":247,"line_end":247,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":240612,"byte_end":240621,"line_start":283,"line_end":283,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":240727,"byte_end":240736,"line_start":289,"line_end":289,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2199}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241079,"byte_end":241091,"line_start":5,"line_end":5,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241175,"byte_end":241187,"line_start":11,"line_end":11,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241531,"byte_end":241543,"line_start":29,"line_end":29,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2224},{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241883,"byte_end":241895,"line_start":48,"line_end":48,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":242082,"byte_end":242093,"line_start":60,"line_end":60,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2233}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242865,"byte_end":242868,"line_start":25,"line_end":25,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":243197,"byte_end":243200,"line_start":41,"line_end":41,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":243905,"byte_end":243913,"line_start":66,"line_end":66,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2263}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":244412,"byte_end":244423,"line_start":88,"line_end":88,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245875,"byte_end":245881,"line_start":29,"line_end":29,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":246210,"byte_end":246216,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2299}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":246891,"byte_end":246899,"line_start":69,"line_end":69,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2308},{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":247518,"byte_end":247532,"line_start":94,"line_end":94,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":249053,"byte_end":249059,"line_start":156,"line_end":156,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":249388,"byte_end":249394,"line_start":172,"line_end":172,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2337},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":250069,"byte_end":250077,"line_start":196,"line_end":196,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":250696,"byte_end":250710,"line_start":221,"line_end":221,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":251922,"byte_end":251933,"line_start":24,"line_end":24,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":251955,"byte_end":251966,"line_start":26,"line_end":26,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252086,"byte_end":252097,"line_start":32,"line_end":32,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406},{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252542,"byte_end":252553,"line_start":52,"line_end":52,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2412}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252768,"byte_end":252779,"line_start":64,"line_end":64,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2415}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252952,"byte_end":252961,"line_start":77,"line_end":77,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2426},{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":253889,"byte_end":253904,"line_start":24,"line_end":24,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":253926,"byte_end":253941,"line_start":26,"line_end":26,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2455}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254069,"byte_end":254084,"line_start":32,"line_end":32,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254565,"byte_end":254580,"line_start":52,"line_end":52,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2469}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254811,"byte_end":254826,"line_start":64,"line_end":64,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2472}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":255011,"byte_end":255024,"line_start":77,"line_end":77,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":2484}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":256228,"byte_end":256234,"line_start":27,"line_end":27,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":256682,"byte_end":256688,"line_start":45,"line_end":45,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2508}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":257338,"byte_end":257346,"line_start":69,"line_end":69,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":257893,"byte_end":257907,"line_start":91,"line_end":91,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":258769,"byte_end":258783,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":258901,"byte_end":258915,"line_start":136,"line_end":136,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2545},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":259500,"byte_end":259514,"line_start":158,"line_end":158,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2556}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":259840,"byte_end":259852,"line_start":176,"line_end":176,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260800,"byte_end":260807,"line_start":22,"line_end":22,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2587}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":261279,"byte_end":261286,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2594},{"krate":0,"index":2595},{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":261746,"byte_end":261753,"line_start":60,"line_end":60,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":262598,"byte_end":262606,"line_start":89,"line_end":89,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":263271,"byte_end":263286,"line_start":115,"line_end":115,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":264424,"byte_end":264439,"line_start":163,"line_end":163,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":264640,"byte_end":264655,"line_start":172,"line_end":172,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2657}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":265374,"byte_end":265389,"line_start":199,"line_end":199,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2663},{"krate":0,"index":2664}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":265777,"byte_end":265790,"line_start":217,"line_end":217,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":267034,"byte_end":267043,"line_start":27,"line_end":27,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2698},{"krate":0,"index":2699}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":267674,"byte_end":267691,"line_start":54,"line_end":54,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":268423,"byte_end":268440,"line_start":81,"line_end":81,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2720},{"krate":0,"index":2721}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":268816,"byte_end":268831,"line_start":99,"line_end":99,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":270864,"byte_end":270874,"line_start":54,"line_end":54,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2797}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271189,"byte_end":271199,"line_start":65,"line_end":65,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2803}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271530,"byte_end":271538,"line_start":77,"line_end":77,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2809}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271864,"byte_end":271872,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2816}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272208,"byte_end":272216,"line_start":102,"line_end":102,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2821}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272503,"byte_end":272511,"line_start":113,"line_end":113,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2827}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272816,"byte_end":272823,"line_start":125,"line_end":125,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":273299,"byte_end":273306,"line_start":139,"line_end":139,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":273710,"byte_end":273717,"line_start":153,"line_end":153,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":274072,"byte_end":274079,"line_start":165,"line_end":165,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":274443,"byte_end":274453,"line_start":178,"line_end":178,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":275056,"byte_end":275066,"line_start":200,"line_end":200,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":275373,"byte_end":275379,"line_start":212,"line_end":212,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276319,"byte_end":276325,"line_start":240,"line_end":240,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2877}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276604,"byte_end":276610,"line_start":249,"line_end":249,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2881}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276896,"byte_end":276902,"line_start":258,"line_end":258,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":277203,"byte_end":277209,"line_start":267,"line_end":267,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278118,"byte_end":278126,"line_start":298,"line_end":298,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278431,"byte_end":278439,"line_start":309,"line_end":309,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2904}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278871,"byte_end":278874,"line_start":324,"line_end":324,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2910}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":281887,"byte_end":281892,"line_start":86,"line_end":86,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":282821,"byte_end":282830,"line_start":121,"line_end":121,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":283935,"byte_end":283947,"line_start":161,"line_end":161,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":284595,"byte_end":284601,"line_start":188,"line_end":188,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3003}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":286035,"byte_end":286041,"line_start":237,"line_end":237,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3021}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":286989,"byte_end":287002,"line_start":276,"line_end":276,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":288214,"byte_end":288227,"line_start":319,"line_end":319,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3048},{"krate":0,"index":3049}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":288907,"byte_end":288918,"line_start":348,"line_end":348,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3066},{"krate":0,"index":3067}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":289684,"byte_end":289696,"line_start":381,"line_end":381,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3078}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290725,"byte_end":290731,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3092},{"krate":0,"index":3093}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291580,"byte_end":291586,"line_start":55,"line_end":55,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3097},{"krate":0,"index":3098}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292009,"byte_end":292023,"line_start":73,"line_end":73,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3107}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292965,"byte_end":292972,"line_start":111,"line_end":111,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3116}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":293284,"byte_end":293291,"line_start":127,"line_end":127,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3119},{"krate":0,"index":3121},{"krate":0,"index":3123}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":293860,"byte_end":293875,"line_start":154,"line_end":154,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3133}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":294523,"byte_end":294527,"line_start":177,"line_end":177,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":294905,"byte_end":294909,"line_start":196,"line_end":196,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":295038,"byte_end":295042,"line_start":203,"line_end":203,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295845,"byte_end":295850,"line_start":34,"line_end":34,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3182}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295940,"byte_end":295945,"line_start":40,"line_end":40,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3185}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296077,"byte_end":296082,"line_start":46,"line_end":46,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3188},{"krate":0,"index":3189},{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296363,"byte_end":296368,"line_start":60,"line_end":60,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3194},{"krate":0,"index":3196},{"krate":0,"index":3197}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296838,"byte_end":296851,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3205},{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3208},{"krate":0,"index":3209}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":298151,"byte_end":298155,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":298436,"byte_end":298440,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3231},{"krate":0,"index":3233},{"krate":0,"index":3234}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29930,"byte_end":29931,"line_start":239,"line_end":239,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3255},{"krate":0,"index":3256},{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31439,"byte_end":31440,"line_start":286,"line_end":286,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71077,"byte_end":71078,"line_start":1426,"line_end":1426,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299809,"byte_end":299815,"line_start":27,"line_end":27,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299988,"byte_end":299996,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3477}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":300286,"byte_end":300294,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301446,"byte_end":301450,"line_start":89,"line_end":89,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3488}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302868,"byte_end":302882,"line_start":144,"line_end":144,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3506},{"krate":0,"index":3507},{"krate":0,"index":3508},{"krate":0,"index":3509}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":303499,"byte_end":303505,"line_start":168,"line_end":168,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3514}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":306033,"byte_end":306038,"line_start":49,"line_end":49,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3556},{"krate":0,"index":3557},{"krate":0,"index":3558}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":306314,"byte_end":306326,"line_start":64,"line_end":64,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3566}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310842,"byte_end":310848,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3581},{"krate":0,"index":3582},{"krate":0,"index":3583}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311266,"byte_end":311270,"line_start":41,"line_end":41,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3587}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":312469,"byte_end":312475,"line_start":88,"line_end":88,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":341651,"byte_end":341661,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3642}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":344582,"byte_end":344588,"line_start":101,"line_end":101,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3651}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":344837,"byte_end":344850,"line_start":113,"line_end":113,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3658}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":348626,"byte_end":348635,"line_start":216,"line_end":216,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3669}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":360064,"byte_end":360069,"line_start":514,"line_end":514,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3693}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369297,"byte_end":369308,"line_start":22,"line_end":22,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3724}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369538,"byte_end":369544,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3730}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369751,"byte_end":369761,"line_start":47,"line_end":47,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3737}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328590,"byte_end":328594,"line_start":439,"line_end":439,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3884}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328721,"byte_end":328725,"line_start":445,"line_end":445,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3888},{"krate":0,"index":3889},{"krate":0,"index":3891}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":329046,"byte_end":329050,"line_start":459,"line_end":459,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3895},{"krate":0,"index":3897},{"krate":0,"index":3898}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":329551,"byte_end":329563,"line_start":481,"line_end":481,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330136,"byte_end":330142,"line_start":503,"line_end":503,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3914}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330271,"byte_end":330277,"line_start":509,"line_end":509,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3921}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330600,"byte_end":330606,"line_start":523,"line_end":523,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3925},{"krate":0,"index":3927},{"krate":0,"index":3928}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":331281,"byte_end":331295,"line_start":549,"line_end":549,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332081,"byte_end":332088,"line_start":579,"line_end":579,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3945}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332218,"byte_end":332225,"line_start":585,"line_end":585,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3952}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332548,"byte_end":332555,"line_start":599,"line_end":599,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3956},{"krate":0,"index":3958},{"krate":0,"index":3959}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":333281,"byte_end":333296,"line_start":626,"line_end":626,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3969},{"krate":0,"index":3970},{"krate":0,"index":3971},{"krate":0,"index":3972}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334136,"byte_end":334143,"line_start":656,"line_end":656,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3976},{"krate":0,"index":3977},{"krate":0,"index":3979}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334468,"byte_end":334475,"line_start":670,"line_end":670,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3983},{"krate":0,"index":3985},{"krate":0,"index":3986}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334986,"byte_end":335001,"line_start":692,"line_end":692,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335615,"byte_end":335624,"line_start":714,"line_end":714,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4005}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335951,"byte_end":335960,"line_start":728,"line_end":728,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4009},{"krate":0,"index":4011},{"krate":0,"index":4012}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":336645,"byte_end":336662,"line_start":754,"line_end":754,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4022},{"krate":0,"index":4023},{"krate":0,"index":4024},{"krate":0,"index":4025}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337435,"byte_end":337440,"line_start":783,"line_end":783,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4036}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337591,"byte_end":337596,"line_start":789,"line_end":789,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4041}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337814,"byte_end":337819,"line_start":797,"line_end":797,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4046},{"krate":0,"index":4047}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339314,"byte_end":339322,"line_start":855,"line_end":855,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339543,"byte_end":339551,"line_start":863,"line_end":863,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4075},{"krate":0,"index":4076}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":407353,"byte_end":407355,"line_start":207,"line_end":207,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5471},{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":408201,"byte_end":408206,"line_start":246,"line_end":246,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4142},{"krate":0,"index":4143}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":408461,"byte_end":408474,"line_start":256,"line_end":256,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4147},{"krate":0,"index":4148},{"krate":0,"index":4149}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409241,"byte_end":409246,"line_start":287,"line_end":287,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4154}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409447,"byte_end":409452,"line_start":296,"line_end":296,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4158},{"krate":0,"index":4159}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411101,"byte_end":411116,"line_start":355,"line_end":355,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4180}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411322,"byte_end":411345,"line_start":364,"line_end":364,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4185}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411653,"byte_end":411668,"line_start":373,"line_end":373,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4189},{"krate":0,"index":4190}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412011,"byte_end":412034,"line_start":384,"line_end":384,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4199}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412854,"byte_end":412859,"line_start":415,"line_end":415,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4203},{"krate":0,"index":4204}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":413515,"byte_end":413530,"line_start":439,"line_end":439,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4209},{"krate":0,"index":4210}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414290,"byte_end":414293,"line_start":18,"line_end":18,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414466,"byte_end":414474,"line_start":27,"line_end":27,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4229}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414766,"byte_end":414774,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4232},{"krate":0,"index":4234},{"krate":0,"index":4235}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":415894,"byte_end":415905,"line_start":77,"line_end":77,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":416548,"byte_end":416559,"line_start":95,"line_end":95,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4251}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":416907,"byte_end":416917,"line_start":108,"line_end":108,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4262}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417224,"byte_end":417234,"line_start":121,"line_end":121,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4266}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417424,"byte_end":417434,"line_start":127,"line_end":127,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4271}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417540,"byte_end":417550,"line_start":133,"line_end":133,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4275}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":417912,"byte_end":417918,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4289},{"krate":0,"index":4290},{"krate":0,"index":4292}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":418438,"byte_end":418444,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4296},{"krate":0,"index":4298},{"krate":0,"index":4299}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":419234,"byte_end":419240,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4305}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3841,"byte_end":3852,"line_start":96,"line_end":96,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":54}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12118,"byte_end":12129,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12139,"byte_end":12148,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":74}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12158,"byte_end":12167,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":88}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12177,"byte_end":12185,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12195,"byte_end":12203,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12213,"byte_end":12224,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":142}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\mod.rs","byte_start":12234,"byte_end":12243,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":155}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3862,"byte_end":3866,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":183}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":26046,"byte_end":26054,"line_start":105,"line_end":105,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1019}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3876,"byte_end":3882,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3454}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3892,"byte_end":3899,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3517}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3909,"byte_end":3914,"line_start":100,"line_end":100,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3548}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3924,"byte_end":3930,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3569}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3940,"byte_end":3945,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3610}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3955,"byte_end":3958,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4089}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\lib.rs","byte_start":3968,"byte_end":3971,"line_start":104,"line_end":104,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4213}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\split_producer.rs","byte_start":7744,"byte_end":7749,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\split_producer.rs","byte_start":8163,"byte_end":8176,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\split_producer.rs","byte_start":9598,"byte_end":9611,"line_start":71,"line_end":71,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":21},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":12704,"byte_end":12714,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\binary_heap.rs","byte_start":13155,"byte_end":13159,"line_start":39,"line_end":39,"column_start":35,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4363},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_map.rs","byte_start":14325,"byte_end":14329,"line_start":35,"line_end":35,"column_start":44,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\btree_set.rs","byte_start":15809,"byte_end":15813,"line_start":35,"line_end":35,"column_start":40,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4495},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_map.rs","byte_start":17043,"byte_end":17047,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4544},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\hash_set.rs","byte_start":18662,"byte_end":18666,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":4623},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\linked_list.rs","byte_start":19733,"byte_end":19737,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":4671},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\collections\\vec_deque.rs","byte_start":21103,"byte_end":21107,"line_start":36,"line_end":36,"column_start":29,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4749},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":94492,"byte_end":94504,"line_start":19,"line_end":19,"column_start":13,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":94707,"byte_end":94719,"line_start":28,"line_end":28,"column_start":36,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":218},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":95310,"byte_end":95322,"line_start":54,"line_end":54,"column_start":45,"column_end":57},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":218},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":95692,"byte_end":95702,"line_start":74,"line_end":74,"column_start":30,"column_end":40},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":243},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find.rs","byte_start":96177,"byte_end":96188,"line_start":99,"line_end":99,"column_start":32,"column_end":43},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":258},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":98710,"byte_end":98722,"line_start":67,"line_end":67,"column_start":13,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":99309,"byte_end":99321,"line_start":86,"line_end":86,"column_start":32,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":100317,"byte_end":100329,"line_start":118,"line_end":118,"column_start":41,"column_end":53},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":101875,"byte_end":101885,"line_start":160,"line_end":160,"column_start":51,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":312},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\find_first_last\\mod.rs","byte_start":103655,"byte_end":103666,"line_start":213,"line_end":213,"column_start":32,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":329},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":104775,"byte_end":104780,"line_start":32,"line_end":32,"column_start":33,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":105980,"byte_end":105985,"line_start":66,"line_end":66,"column_start":40,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":107083,"byte_end":107092,"line_start":102,"line_end":102,"column_start":51,"column_end":60},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":368},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":107886,"byte_end":107895,"line_start":125,"line_end":125,"column_start":51,"column_end":60},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":380},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":108554,"byte_end":108567,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":108813,"byte_end":108826,"line_start":166,"line_end":166,"column_start":25,"column_end":38},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":392},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110357,"byte_end":110365,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110580,"byte_end":110588,"line_start":227,"line_end":227,"column_start":25,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":110889,"byte_end":110897,"line_start":242,"line_end":242,"column_start":34,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chain.rs","byte_start":111023,"byte_end":111031,"line_start":248,"line_end":248,"column_start":36,"column_end":44},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":112042,"byte_end":112048,"line_start":31,"line_end":31,"column_start":30,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4816},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":112375,"byte_end":112381,"line_start":47,"line_end":47,"column_start":37,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4816},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":113083,"byte_end":113091,"line_start":76,"line_end":76,"column_start":45,"column_end":53},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":461},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":113647,"byte_end":113660,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":472},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":114774,"byte_end":114782,"line_start":150,"line_end":150,"column_start":22,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":115541,"byte_end":115549,"line_start":177,"line_end":177,"column_start":31,"column_end":39},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\chunks.rs","byte_start":115709,"byte_end":115717,"line_start":186,"line_end":186,"column_start":33,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":122715,"byte_end":122730,"line_start":25,"line_end":25,"column_start":24,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":123083,"byte_end":123098,"line_start":36,"line_end":36,"column_start":40,"column_end":55},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":547},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":124079,"byte_end":124092,"line_start":66,"line_end":66,"column_start":38,"column_end":51},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":552},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\consumer.rs","byte_start":124978,"byte_end":124993,"line_start":95,"line_end":95,"column_start":49,"column_end":64},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":547},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\mod.rs","byte_start":118879,"byte_end":118886,"line_start":75,"line_end":75,"column_start":24,"column_end":31},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\collect\\mod.rs","byte_start":120541,"byte_end":120544,"line_start":119,"line_end":119,"column_start":31,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":131776,"byte_end":131785,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":4826},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":132123,"byte_end":132132,"line_start":43,"line_end":43,"column_start":37,"column_end":46},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":4826},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":132642,"byte_end":132650,"line_start":63,"line_end":63,"column_start":45,"column_end":53},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":645},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\enumerate.rs","byte_start":133275,"byte_end":133292,"line_start":88,"line_end":88,"column_start":22,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":654},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":135053,"byte_end":135059,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":4835},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":135524,"byte_end":135530,"line_start":38,"line_end":38,"column_start":33,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4835},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":136078,"byte_end":136092,"line_start":60,"line_end":60,"column_start":16,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":136293,"byte_end":136307,"line_start":69,"line_end":69,"column_start":39,"column_end":53},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":692},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":137028,"byte_end":137042,"line_start":97,"line_end":97,"column_start":48,"column_end":62},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":692},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter.rs","byte_start":137434,"byte_end":137446,"line_start":115,"line_end":115,"column_start":33,"column_end":45},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":721},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":138589,"byte_end":138598,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4844},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139078,"byte_end":139087,"line_start":38,"line_end":38,"column_start":36,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4844},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139660,"byte_end":139677,"line_start":61,"line_end":61,"column_start":20,"column_end":37},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":139880,"byte_end":139897,"line_start":70,"line_end":70,"column_start":38,"column_end":55},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":763},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":140665,"byte_end":140682,"line_start":98,"line_end":98,"column_start":47,"column_end":64},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":763},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\filter_map.rs","byte_start":141092,"byte_end":141107,"line_start":116,"line_end":116,"column_start":36,"column_end":51},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":794},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142276,"byte_end":142283,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4853},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":142747,"byte_end":142754,"line_start":38,"line_end":38,"column_start":37,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4853},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":143375,"byte_end":143390,"line_start":64,"line_end":64,"column_start":16,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":837},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":143582,"byte_end":143597,"line_start":73,"line_end":73,"column_start":38,"column_end":53},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":837},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":144371,"byte_end":144386,"line_start":102,"line_end":102,"column_start":47,"column_end":62},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":837},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flat_map.rs","byte_start":144842,"byte_end":144855,"line_start":123,"line_end":123,"column_start":36,"column_end":49},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":868},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\flatten.rs","byte_start":146724,"byte_end":146731,"line_start":28,"line_end":28,"column_start":34,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4862},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":147693,"byte_end":147696,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":95}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":147959,"byte_end":147967,"line_start":33,"line_end":33,"column_start":37,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":148317,"byte_end":148327,"line_start":45,"line_end":45,"column_start":37,"column_end":47},"kind":{"Impl":{"id":97}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":148630,"byte_end":148640,"line_start":57,"line_end":57,"column_start":37,"column_end":47},"kind":{"Impl":{"id":98}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149097,"byte_end":149104,"line_start":71,"line_end":71,"column_start":48,"column_end":55},"kind":{"Impl":{"id":99}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149644,"byte_end":149652,"line_start":87,"line_end":87,"column_start":45,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":149951,"byte_end":149958,"line_start":99,"line_end":99,"column_start":40,"column_end":47},"kind":{"Impl":{"id":101}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150280,"byte_end":150288,"line_start":111,"line_end":111,"column_start":37,"column_end":45},"kind":{"Impl":{"id":102}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150560,"byte_end":150566,"line_start":122,"line_end":122,"column_start":37,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":150822,"byte_end":150828,"line_start":131,"line_end":131,"column_start":45,"column_end":51},"kind":{"Impl":{"id":104}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151090,"byte_end":151096,"line_start":140,"line_end":140,"column_start":44,"column_end":50},"kind":{"Impl":{"id":105}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151354,"byte_end":151360,"line_start":149,"line_end":149,"column_start":39,"column_end":45},"kind":{"Impl":{"id":106}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":151625,"byte_end":151631,"line_start":158,"line_end":158,"column_start":49,"column_end":55},"kind":{"Impl":{"id":107}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\from_par_iter.rs","byte_start":152069,"byte_end":152072,"line_start":171,"line_end":171,"column_start":52,"column_end":55},"kind":{"Impl":{"id":108}},"from":{"krate":5,"index":546},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155710,"byte_end":155714,"line_start":58,"line_end":58,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":155717,"byte_end":155722,"line_start":58,"line_end":58,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158719,"byte_end":158723,"line_start":126,"line_end":126,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":158726,"byte_end":158731,"line_start":126,"line_end":126,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":160039,"byte_end":160044,"line_start":157,"line_end":157,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":162054,"byte_end":162062,"line_start":210,"line_end":210,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":1046},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163167,"byte_end":163171,"line_start":233,"line_end":233,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":163174,"byte_end":163179,"line_start":233,"line_end":233,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":164155,"byte_end":164163,"line_start":258,"line_end":258,"column_start":6,"column_end":14},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":165276,"byte_end":165290,"line_start":297,"line_end":297,"column_start":6,"column_end":20},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\plumbing\\mod.rs","byte_start":167767,"byte_end":167775,"line_start":361,"line_end":361,"column_start":40,"column_end":48},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1083},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":172260,"byte_end":172275,"line_start":18,"line_end":18,"column_start":32,"column_end":47},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1119},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":172670,"byte_end":172685,"line_start":38,"line_end":38,"column_start":30,"column_end":45},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1119},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\for_each.rs","byte_start":173107,"byte_end":173122,"line_start":60,"line_end":60,"column_start":41,"column_end":56},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1119},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":174197,"byte_end":174201,"line_start":32,"line_end":32,"column_start":52,"column_end":56},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":4882},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":174413,"byte_end":174417,"line_start":40,"line_end":40,"column_start":40,"column_end":44},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":4882},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":175046,"byte_end":175058,"line_start":66,"line_end":66,"column_start":42,"column_end":54},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1178},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":175840,"byte_end":175852,"line_start":94,"line_end":94,"column_start":51,"column_end":63},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1178},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":176310,"byte_end":176320,"line_start":115,"line_end":115,"column_start":37,"column_end":47},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1208},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177674,"byte_end":177682,"line_start":166,"line_end":166,"column_start":58,"column_end":66},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4894},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":177932,"byte_end":177940,"line_start":175,"line_end":175,"column_start":36,"column_end":44},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4894},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":178518,"byte_end":178534,"line_start":200,"line_end":200,"column_start":38,"column_end":54},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1242},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\fold.rs","byte_start":179321,"byte_end":179337,"line_start":228,"line_end":228,"column_start":47,"column_end":63},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1242},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180181,"byte_end":180195,"line_start":22,"line_end":22,"column_start":26,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1287},"to":{"krate":2,"index":3014}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180237,"byte_end":180251,"line_start":24,"line_end":24,"column_start":27,"column_end":41},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1287},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180353,"byte_end":180367,"line_start":30,"line_end":30,"column_start":36,"column_end":50},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1287},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":180905,"byte_end":180919,"line_start":55,"line_end":55,"column_start":45,"column_end":59},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1287},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":181179,"byte_end":181193,"line_start":69,"line_end":69,"column_start":35,"column_end":49},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1287},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\reduce.rs","byte_start":181437,"byte_end":181449,"line_start":82,"line_end":82,"column_start":30,"column_end":42},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1326},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":182827,"byte_end":182831,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4906},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":183160,"byte_end":183164,"line_start":44,"line_end":44,"column_start":37,"column_end":41},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4906},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\skip.rs","byte_start":183842,"byte_end":183850,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1366},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188710,"byte_end":188715,"line_start":126,"line_end":126,"column_start":29,"column_end":34},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4916},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":188917,"byte_end":188922,"line_start":134,"line_end":134,"column_start":33,"column_end":38},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4916},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\splitter.rs","byte_start":189414,"byte_end":189427,"line_start":156,"line_end":156,"column_start":38,"column_end":51},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1402},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":190806,"byte_end":190810,"line_start":27,"line_end":27,"column_start":30,"column_end":34},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4925},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":191139,"byte_end":191143,"line_start":43,"line_end":43,"column_start":37,"column_end":41},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4925},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\take.rs","byte_start":191803,"byte_end":191811,"line_start":67,"line_end":67,"column_start":45,"column_end":53},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1445},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":192728,"byte_end":192731,"line_start":21,"line_end":21,"column_start":48,"column_end":51},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4935},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":193178,"byte_end":193181,"line_start":41,"line_end":41,"column_start":36,"column_end":39},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4935},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":193661,"byte_end":193664,"line_start":60,"line_end":60,"column_start":43,"column_end":46},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4935},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":194510,"byte_end":194518,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1495},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":195197,"byte_end":195208,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1508},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":196314,"byte_end":196325,"line_start":164,"line_end":164,"column_start":16,"column_end":27},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":196513,"byte_end":196524,"line_start":173,"line_end":173,"column_start":38,"column_end":49},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":197227,"byte_end":197238,"line_start":199,"line_end":199,"column_start":47,"column_end":58},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map.rs","byte_start":197644,"byte_end":197653,"line_start":218,"line_end":218,"column_start":36,"column_end":45},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1558},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":198696,"byte_end":198703,"line_start":21,"line_end":21,"column_start":58,"column_end":65},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4944},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":199246,"byte_end":199253,"line_start":43,"line_end":43,"column_start":39,"column_end":46},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4944},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":199781,"byte_end":199788,"line_start":63,"line_end":63,"column_start":46,"column_end":53},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4944},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":200774,"byte_end":200782,"line_start":95,"line_end":95,"column_start":54,"column_end":62},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":201571,"byte_end":201586,"line_start":125,"line_end":125,"column_start":35,"column_end":50},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1631},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":202885,"byte_end":202896,"line_start":181,"line_end":181,"column_start":35,"column_end":46},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1653},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203300,"byte_end":203311,"line_start":198,"line_end":198,"column_start":46,"column_end":57},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1653},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203625,"byte_end":203636,"line_start":209,"line_end":209,"column_start":44,"column_end":55},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1653},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":203993,"byte_end":204008,"line_start":227,"line_end":227,"column_start":19,"column_end":34},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":204239,"byte_end":204254,"line_start":237,"line_end":237,"column_start":41,"column_end":56},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1685},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":205086,"byte_end":205101,"line_start":267,"line_end":267,"column_start":50,"column_end":65},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1685},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\map_with.rs","byte_start":205582,"byte_end":205595,"line_start":288,"line_end":288,"column_start":39,"column_end":52},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1721},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":207219,"byte_end":207222,"line_start":29,"line_end":29,"column_start":33,"column_end":36},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4956},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":207606,"byte_end":207609,"line_start":46,"line_end":46,"column_start":40,"column_end":43},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4956},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":208358,"byte_end":208367,"line_start":73,"line_end":73,"column_start":54,"column_end":63},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1773},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":209076,"byte_end":209085,"line_start":94,"line_end":94,"column_start":54,"column_end":63},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1785},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip.rs","byte_start":209796,"byte_end":209807,"line_start":120,"line_end":120,"column_start":45,"column_end":56},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1797},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":211469,"byte_end":211474,"line_start":30,"line_end":30,"column_start":33,"column_end":38},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4969},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\zip_eq.rs","byte_start":211866,"byte_end":211871,"line_start":47,"line_end":47,"column_start":40,"column_end":45},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4969},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":213289,"byte_end":213299,"line_start":32,"line_end":32,"column_start":33,"column_end":43},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4981},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":213676,"byte_end":213686,"line_start":49,"line_end":49,"column_start":40,"column_end":50},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4981},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":214639,"byte_end":214648,"line_start":86,"line_end":86,"column_start":51,"column_end":60},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1865},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":215452,"byte_end":215461,"line_start":113,"line_end":113,"column_start":51,"column_end":60},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1879},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":216116,"byte_end":216134,"line_start":140,"line_end":140,"column_start":12,"column_end":30},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":216418,"byte_end":216436,"line_start":149,"line_end":149,"column_start":25,"column_end":43},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":219269,"byte_end":219282,"line_start":243,"line_end":243,"column_start":25,"column_end":38},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":220416,"byte_end":220429,"line_start":281,"line_end":281,"column_start":36,"column_end":49},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave.rs","byte_start":220995,"byte_end":221008,"line_start":301,"line_end":301,"column_start":34,"column_end":47},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":222597,"byte_end":222615,"line_start":43,"line_end":43,"column_start":33,"column_end":51},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4994},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\interleave_shortest.rs","byte_start":222992,"byte_end":223010,"line_start":60,"line_end":60,"column_start":40,"column_end":58},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4994},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":224392,"byte_end":224403,"line_start":32,"line_end":32,"column_start":30,"column_end":41},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":5006},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":224970,"byte_end":224981,"line_start":54,"line_end":54,"column_start":37,"column_end":48},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":5006},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226022,"byte_end":226030,"line_start":90,"line_end":90,"column_start":45,"column_end":53},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1986},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226581,"byte_end":226600,"line_start":116,"line_end":116,"column_start":9,"column_end":28},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":226857,"byte_end":226876,"line_start":129,"line_end":129,"column_start":22,"column_end":41},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1998},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":229051,"byte_end":229066,"line_start":206,"line_end":206,"column_start":22,"column_end":37},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2017},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":229843,"byte_end":229858,"line_start":234,"line_end":234,"column_start":33,"column_end":48},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2017},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":230511,"byte_end":230526,"line_start":255,"line_end":255,"column_start":31,"column_end":46},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2017},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":230904,"byte_end":230923,"line_start":274,"line_end":274,"column_start":12,"column_end":31},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":231159,"byte_end":231178,"line_start":286,"line_end":286,"column_start":28,"column_end":47},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2034},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":232261,"byte_end":232280,"line_start":322,"line_end":322,"column_start":37,"column_end":56},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2034},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\intersperse.rs","byte_start":232825,"byte_end":232842,"line_start":347,"line_end":347,"column_start":26,"column_end":43},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2058},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":233997,"byte_end":234003,"line_start":21,"line_end":21,"column_start":48,"column_end":54},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5016},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":234468,"byte_end":234474,"line_start":41,"line_end":41,"column_start":33,"column_end":39},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5016},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":234937,"byte_end":234943,"line_start":59,"line_end":59,"column_start":40,"column_end":46},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5016},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":235783,"byte_end":235791,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2106},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":236463,"byte_end":236477,"line_start":113,"line_end":113,"column_start":29,"column_end":43},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2118},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":237667,"byte_end":237681,"line_start":163,"line_end":163,"column_start":16,"column_end":30},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":237878,"byte_end":237892,"line_start":172,"line_end":172,"column_start":35,"column_end":49},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2136},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":238597,"byte_end":238611,"line_start":197,"line_end":197,"column_start":44,"column_end":58},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2136},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":239007,"byte_end":239019,"line_start":215,"line_end":215,"column_start":33,"column_end":45},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2165},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":239700,"byte_end":239709,"line_start":247,"line_end":247,"column_start":25,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":5025},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":240612,"byte_end":240621,"line_start":283,"line_end":283,"column_start":34,"column_end":43},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5025},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\update.rs","byte_start":240727,"byte_end":240736,"line_start":289,"line_end":289,"column_start":36,"column_end":45},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5025},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241079,"byte_end":241091,"line_start":5,"line_end":5,"column_start":6,"column_end":18},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241175,"byte_end":241187,"line_start":11,"line_end":11,"column_start":25,"column_end":37},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2205},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241531,"byte_end":241543,"line_start":29,"line_end":29,"column_start":23,"column_end":35},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2205},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":241883,"byte_end":241895,"line_start":48,"line_end":48,"column_start":34,"column_end":46},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2205},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\noop.rs","byte_start":242082,"byte_end":242093,"line_start":60,"line_end":60,"column_start":22,"column_end":33},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2230},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":242865,"byte_end":242868,"line_start":25,"line_end":25,"column_start":30,"column_end":33},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":5038},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":243197,"byte_end":243200,"line_start":41,"line_end":41,"column_start":37,"column_end":40},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":5038},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":243905,"byte_end":243913,"line_start":66,"line_end":66,"column_start":45,"column_end":53},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2255},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\rev.rs","byte_start":244412,"byte_end":244423,"line_start":88,"line_end":88,"column_start":22,"column_end":33},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2265},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":245875,"byte_end":245881,"line_start":29,"line_end":29,"column_start":30,"column_end":36},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":5047},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":246210,"byte_end":246216,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":5047},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":246891,"byte_end":246899,"line_start":69,"line_end":69,"column_start":45,"column_end":53},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2301},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":247518,"byte_end":247532,"line_start":94,"line_end":94,"column_start":22,"column_end":36},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2311},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":249053,"byte_end":249059,"line_start":156,"line_end":156,"column_start":30,"column_end":36},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":5057},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":249388,"byte_end":249394,"line_start":172,"line_end":172,"column_start":37,"column_end":43},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5057},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":250069,"byte_end":250077,"line_start":196,"line_end":196,"column_start":45,"column_end":53},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2340},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\len.rs","byte_start":250696,"byte_end":250710,"line_start":221,"line_end":221,"column_start":22,"column_end":36},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2350},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":251922,"byte_end":251933,"line_start":24,"line_end":24,"column_start":31,"column_end":42},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2391},"to":{"krate":2,"index":3004}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":251955,"byte_end":251966,"line_start":26,"line_end":26,"column_start":15,"column_end":26},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252086,"byte_end":252097,"line_start":32,"line_end":32,"column_start":28,"column_end":39},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2391},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252542,"byte_end":252553,"line_start":52,"line_end":52,"column_start":37,"column_end":48},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2391},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252768,"byte_end":252779,"line_start":64,"line_end":64,"column_start":24,"column_end":35},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2391},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\sum.rs","byte_start":252952,"byte_end":252961,"line_start":77,"line_end":77,"column_start":26,"column_end":35},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2416},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":253889,"byte_end":253904,"line_start":24,"line_end":24,"column_start":31,"column_end":46},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2448},"to":{"krate":2,"index":3004}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":253926,"byte_end":253941,"line_start":26,"line_end":26,"column_start":15,"column_end":30},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254069,"byte_end":254084,"line_start":32,"line_end":32,"column_start":28,"column_end":43},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2448},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254565,"byte_end":254580,"line_start":52,"line_end":52,"column_start":37,"column_end":52},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2448},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":254811,"byte_end":254826,"line_start":64,"line_end":64,"column_start":24,"column_end":39},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2448},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\product.rs","byte_start":255011,"byte_end":255024,"line_start":77,"line_end":77,"column_start":26,"column_end":39},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2473},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":256228,"byte_end":256234,"line_start":27,"line_end":27,"column_start":37,"column_end":43},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":5067},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":256682,"byte_end":256688,"line_start":45,"line_end":45,"column_start":44,"column_end":50},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":5067},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":257338,"byte_end":257346,"line_start":69,"line_end":69,"column_start":53,"column_end":61},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2510},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":257893,"byte_end":257907,"line_start":91,"line_end":91,"column_start":29,"column_end":43},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2520},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":258769,"byte_end":258783,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":258901,"byte_end":258915,"line_start":136,"line_end":136,"column_start":36,"column_end":50},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2535},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":259500,"byte_end":259514,"line_start":158,"line_end":158,"column_start":45,"column_end":59},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2535},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\cloned.rs","byte_start":259840,"byte_end":259852,"line_start":176,"line_end":176,"column_start":34,"column_end":46},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2557},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":260800,"byte_end":260807,"line_start":22,"line_end":22,"column_start":48,"column_end":55},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5076},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":261279,"byte_end":261286,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":5076},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":261746,"byte_end":261753,"line_start":60,"line_end":60,"column_start":40,"column_end":47},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":5076},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":262598,"byte_end":262606,"line_start":89,"line_end":89,"column_start":48,"column_end":56},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2606},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":263271,"byte_end":263286,"line_start":115,"line_end":115,"column_start":29,"column_end":44},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2618},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":264424,"byte_end":264439,"line_start":163,"line_end":163,"column_start":16,"column_end":31},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":264640,"byte_end":264655,"line_start":172,"line_end":172,"column_start":35,"column_end":50},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2636},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":265374,"byte_end":265389,"line_start":199,"line_end":199,"column_start":44,"column_end":59},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2636},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\inspect.rs","byte_start":265777,"byte_end":265790,"line_start":217,"line_end":217,"column_start":33,"column_end":46},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2665},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":267034,"byte_end":267043,"line_start":27,"line_end":27,"column_start":33,"column_end":42},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":5085},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":267674,"byte_end":267691,"line_start":54,"line_end":54,"column_start":40,"column_end":57},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2701},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":268423,"byte_end":268440,"line_start":81,"line_end":81,"column_start":49,"column_end":66},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2701},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\while_some.rs","byte_start":268816,"byte_end":268831,"line_start":99,"line_end":99,"column_start":38,"column_end":53},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2722},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":270864,"byte_end":270874,"line_start":54,"line_end":54,"column_start":31,"column_end":41},"kind":{"Impl":{"id":252}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271189,"byte_end":271199,"line_start":65,"line_end":65,"column_start":39,"column_end":49},"kind":{"Impl":{"id":253}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271530,"byte_end":271538,"line_start":77,"line_end":77,"column_start":39,"column_end":47},"kind":{"Impl":{"id":254}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":271864,"byte_end":271872,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":255}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272208,"byte_end":272216,"line_start":102,"line_end":102,"column_start":31,"column_end":39},"kind":{"Impl":{"id":256}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272503,"byte_end":272511,"line_start":113,"line_end":113,"column_start":39,"column_end":47},"kind":{"Impl":{"id":257}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":272816,"byte_end":272823,"line_start":125,"line_end":125,"column_start":42,"column_end":49},"kind":{"Impl":{"id":258}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":273299,"byte_end":273306,"line_start":139,"line_end":139,"column_start":54,"column_end":61},"kind":{"Impl":{"id":259}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":273710,"byte_end":273717,"line_start":153,"line_end":153,"column_start":34,"column_end":41},"kind":{"Impl":{"id":260}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":274072,"byte_end":274079,"line_start":165,"line_end":165,"column_start":42,"column_end":49},"kind":{"Impl":{"id":261}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":274443,"byte_end":274453,"line_start":178,"line_end":178,"column_start":31,"column_end":41},"kind":{"Impl":{"id":262}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":275056,"byte_end":275066,"line_start":200,"line_end":200,"column_start":39,"column_end":49},"kind":{"Impl":{"id":263}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":275373,"byte_end":275379,"line_start":212,"line_end":212,"column_start":31,"column_end":37},"kind":{"Impl":{"id":264}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276319,"byte_end":276325,"line_start":240,"line_end":240,"column_start":39,"column_end":45},"kind":{"Impl":{"id":265}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276604,"byte_end":276610,"line_start":249,"line_end":249,"column_start":38,"column_end":44},"kind":{"Impl":{"id":266}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":276896,"byte_end":276902,"line_start":258,"line_end":258,"column_start":33,"column_end":39},"kind":{"Impl":{"id":267}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":277203,"byte_end":277209,"line_start":267,"line_end":267,"column_start":43,"column_end":49},"kind":{"Impl":{"id":268}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278118,"byte_end":278126,"line_start":298,"line_end":298,"column_start":31,"column_end":39},"kind":{"Impl":{"id":269}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278431,"byte_end":278439,"line_start":309,"line_end":309,"column_start":39,"column_end":47},"kind":{"Impl":{"id":270}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\extend.rs","byte_start":278871,"byte_end":278874,"line_start":324,"line_end":324,"column_start":39,"column_end":42},"kind":{"Impl":{"id":271}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":3450}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279350,"byte_end":279354,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":2915}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":279357,"byte_end":279361,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":2915}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":281887,"byte_end":281892,"line_start":86,"line_end":86,"column_start":44,"column_end":49},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2940},"to":{"krate":0,"index":2915}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":282821,"byte_end":282830,"line_start":121,"line_end":121,"column_start":27,"column_end":36},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2956},"to":{"krate":0,"index":2915}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":283935,"byte_end":283947,"line_start":161,"line_end":161,"column_start":33,"column_end":45},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2974},"to":{"krate":0,"index":2915}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":284595,"byte_end":284601,"line_start":188,"line_end":188,"column_start":45,"column_end":51},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2987},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":286035,"byte_end":286041,"line_start":237,"line_end":237,"column_start":42,"column_end":48},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3004},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":286989,"byte_end":287002,"line_start":276,"line_end":276,"column_start":41,"column_end":54},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":3022},"to":{"krate":0,"index":1046}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":288214,"byte_end":288227,"line_start":319,"line_end":319,"column_start":50,"column_end":63},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":3022},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":288907,"byte_end":288918,"line_start":348,"line_end":348,"column_start":39,"column_end":50},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":3050},"to":{"krate":0,"index":1054}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\unzip.rs","byte_start":289684,"byte_end":289696,"line_start":381,"line_end":381,"column_start":40,"column_end":52},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":3068},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":290725,"byte_end":290731,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":291580,"byte_end":291586,"line_start":55,"line_end":55,"column_start":30,"column_end":36},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5094},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292009,"byte_end":292023,"line_start":73,"line_end":73,"column_start":45,"column_end":59},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":3100},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":292965,"byte_end":292972,"line_start":111,"line_end":111,"column_start":30,"column_end":37},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5103},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":293284,"byte_end":293291,"line_start":127,"line_end":127,"column_start":37,"column_end":44},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5103},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":293860,"byte_end":293875,"line_start":154,"line_end":154,"column_start":36,"column_end":51},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":3124},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":294523,"byte_end":294527,"line_start":177,"line_end":177,"column_start":29,"column_end":33},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":3134},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":294905,"byte_end":294909,"line_start":196,"line_end":196,"column_start":40,"column_end":44},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":3134},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\repeat.rs","byte_start":295038,"byte_end":295042,"line_start":203,"line_end":203,"column_start":38,"column_end":42},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":3134},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295845,"byte_end":295850,"line_start":34,"line_end":34,"column_start":25,"column_end":30},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":295940,"byte_end":295945,"line_start":40,"line_end":40,"column_start":30,"column_end":35},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296077,"byte_end":296082,"line_start":46,"line_end":46,"column_start":36,"column_end":41},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":3177},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296363,"byte_end":296368,"line_start":60,"line_end":60,"column_start":43,"column_end":48},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3177},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\empty.rs","byte_start":296838,"byte_end":296851,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":3199},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":298151,"byte_end":298155,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":5113},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\once.rs","byte_start":298436,"byte_end":298440,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":5113},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":29930,"byte_end":29931,"line_start":239,"line_end":239,"column_start":67,"column_end":68},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3254},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":31439,"byte_end":31440,"line_start":286,"line_end":286,"column_start":70,"column_end":71},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":3265},"to":{"krate":0,"index":3258}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32328,"byte_end":32333,"line_start":311,"line_end":311,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":32336,"byte_end":32340,"line_start":311,"line_end":311,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71077,"byte_end":71078,"line_start":1426,"line_end":1426,"column_start":52,"column_end":53},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":3382},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\iter\\mod.rs","byte_start":71429,"byte_end":71445,"line_start":1440,"line_end":1440,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":3269},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299809,"byte_end":299815,"line_start":27,"line_end":27,"column_start":40,"column_end":46},"kind":{"Impl":{"id":300}},"from":{"krate":2,"index":43359},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":299988,"byte_end":299996,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5122},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":300286,"byte_end":300294,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5122},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":301446,"byte_end":301450,"line_start":89,"line_end":89,"column_start":29,"column_end":33},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5131},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":302868,"byte_end":302882,"line_start":144,"line_end":144,"column_start":28,"column_end":42},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3501},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\option.rs","byte_start":303499,"byte_end":303505,"line_start":168,"line_end":168,"column_start":52,"column_end":58},"kind":{"Impl":{"id":309}},"from":{"krate":2,"index":43359},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":306033,"byte_end":306038,"line_start":49,"line_end":49,"column_start":34,"column_end":39},"kind":{"Impl":{"id":310}},"from":{"krate":2,"index":41918},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\range.rs","byte_start":306314,"byte_end":306326,"line_start":64,"line_end":64,"column_start":26,"column_end":38},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3559},"to":{"krate":2,"index":7427}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":310842,"byte_end":310848,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":312}},"from":{"krate":2,"index":43485},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":311266,"byte_end":311270,"line_start":41,"line_end":41,"column_start":29,"column_end":33},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5358},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\result.rs","byte_start":312469,"byte_end":312475,"line_start":88,"line_end":88,"column_start":58,"column_end":64},"kind":{"Impl":{"id":320}},"from":{"krate":2,"index":43485},"to":{"krate":0,"index":3446}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":341651,"byte_end":341661,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":3635},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":344582,"byte_end":344588,"line_start":101,"line_end":101,"column_start":22,"column_end":28},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":3646},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":344837,"byte_end":344850,"line_start":113,"line_end":113,"column_start":22,"column_end":35},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":3652},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":348626,"byte_end":348635,"line_start":216,"line_end":216,"column_start":22,"column_end":31},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":3662},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mergesort.rs","byte_start":360064,"byte_end":360069,"line_start":514,"line_end":514,"column_start":22,"column_end":27},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":3684},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369297,"byte_end":369308,"line_start":22,"line_end":22,"column_start":18,"column_end":29},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":3718},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369538,"byte_end":369544,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":3725},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\quicksort.rs","byte_start":369751,"byte_end":369761,"line_start":47,"line_end":47,"column_start":18,"column_end":28},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328590,"byte_end":328594,"line_start":439,"line_end":439,"column_start":32,"column_end":36},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":5426},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":328721,"byte_end":328725,"line_start":445,"line_end":445,"column_start":51,"column_end":55},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":5426},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":329046,"byte_end":329050,"line_start":459,"line_end":459,"column_start":58,"column_end":62},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":5426},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":329551,"byte_end":329563,"line_start":481,"line_end":481,"column_start":43,"column_end":55},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":3900},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330136,"byte_end":330142,"line_start":503,"line_end":503,"column_start":32,"column_end":38},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":5434},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330271,"byte_end":330277,"line_start":509,"line_end":509,"column_start":51,"column_end":57},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":5434},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":330600,"byte_end":330606,"line_start":523,"line_end":523,"column_start":58,"column_end":64},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":5434},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":331281,"byte_end":331295,"line_start":549,"line_end":549,"column_start":43,"column_end":57},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3930},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332081,"byte_end":332088,"line_start":579,"line_end":579,"column_start":32,"column_end":39},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":5443},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332218,"byte_end":332225,"line_start":585,"line_end":585,"column_start":51,"column_end":58},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":5443},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":332548,"byte_end":332555,"line_start":599,"line_end":599,"column_start":58,"column_end":65},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":5443},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":333281,"byte_end":333296,"line_start":626,"line_end":626,"column_start":43,"column_end":58},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3961},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334136,"byte_end":334143,"line_start":656,"line_end":656,"column_start":51,"column_end":58},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":5452},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334468,"byte_end":334475,"line_start":670,"line_end":670,"column_start":58,"column_end":65},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":5452},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":334986,"byte_end":335001,"line_start":692,"line_end":692,"column_start":43,"column_end":58},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3988},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335615,"byte_end":335624,"line_start":714,"line_end":714,"column_start":51,"column_end":60},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":5460},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":335951,"byte_end":335960,"line_start":728,"line_end":728,"column_start":58,"column_end":67},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":5460},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":336645,"byte_end":336662,"line_start":754,"line_end":754,"column_start":43,"column_end":60},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":4014},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337435,"byte_end":337440,"line_start":783,"line_end":783,"column_start":36,"column_end":41},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4026},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337591,"byte_end":337596,"line_start":789,"line_end":789,"column_start":36,"column_end":41},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":4026},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":337814,"byte_end":337819,"line_start":797,"line_end":797,"column_start":40,"column_end":45},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":4026},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339314,"byte_end":339322,"line_start":855,"line_end":855,"column_start":36,"column_end":44},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":4060},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\slice\\mod.rs","byte_start":339543,"byte_end":339551,"line_start":863,"line_end":863,"column_start":40,"column_end":48},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4060},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406327,"byte_end":406332,"line_start":167,"line_end":167,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":4112}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406335,"byte_end":406339,"line_start":167,"line_end":167,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":4112}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":406342,"byte_end":406346,"line_start":167,"line_end":167,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":4112}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":407353,"byte_end":407355,"line_start":207,"line_end":207,"column_start":54,"column_end":56},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":4112}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":408201,"byte_end":408206,"line_start":246,"line_end":246,"column_start":32,"column_end":37},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":5472},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":408461,"byte_end":408474,"line_start":256,"line_end":256,"column_start":33,"column_end":46},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":4137},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409241,"byte_end":409246,"line_start":287,"line_end":287,"column_start":23,"column_end":28},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":5481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":409447,"byte_end":409452,"line_start":296,"line_end":296,"column_start":44,"column_end":49},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":5481},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411101,"byte_end":411116,"line_start":355,"line_end":355,"column_start":23,"column_end":38},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":5494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411322,"byte_end":411345,"line_start":364,"line_end":364,"column_start":36,"column_end":59},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":411653,"byte_end":411668,"line_start":373,"line_end":373,"column_start":44,"column_end":59},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":5494},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412011,"byte_end":412034,"line_start":384,"line_end":384,"column_start":58,"column_end":81},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":4171},"to":{"krate":0,"index":1069}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":412854,"byte_end":412859,"line_start":415,"line_end":415,"column_start":32,"column_end":37},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":5507},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\str.rs","byte_start":413515,"byte_end":413530,"line_start":439,"line_end":439,"column_start":32,"column_end":47},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":5517},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414290,"byte_end":414293,"line_start":18,"line_end":18,"column_start":40,"column_end":43},"kind":{"Impl":{"id":365}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":3243}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414466,"byte_end":414474,"line_start":27,"line_end":27,"column_start":36,"column_end":44},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":5527},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":414766,"byte_end":414774,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":5527},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":415894,"byte_end":415905,"line_start":77,"line_end":77,"column_start":43,"column_end":54},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4237},"to":{"krate":0,"index":1037}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":416548,"byte_end":416559,"line_start":95,"line_end":95,"column_start":39,"column_end":50},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4237},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":416907,"byte_end":416917,"line_start":108,"line_end":108,"column_start":36,"column_end":46},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417224,"byte_end":417234,"line_start":121,"line_end":121,"column_start":47,"column_end":57},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417424,"byte_end":417434,"line_start":127,"line_end":127,"column_start":45,"column_end":55},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\vec.rs","byte_start":417540,"byte_end":417550,"line_start":133,"line_end":133,"column_start":32,"column_end":42},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":417912,"byte_end":417918,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":374}},"from":{"krate":28,"index":139},"to":{"krate":0,"index":3269}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":418438,"byte_end":418444,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"kind":{"Impl":{"id":375}},"from":{"krate":28,"index":139},"to":{"krate":0,"index":3386}},{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.0.1\\src\\par_either.rs","byte_start":419234,"byte_end":419240,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"kind":{"Impl":{"id":376}},"from":{"krate":28,"index":139},"to":{"krate":0,"index":3450}}]}