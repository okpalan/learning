{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3","program":"C:\\Users\\Researchers\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","adler32","C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=249928717568ed35","-C","extra-filename=-249928717568ed35","--out-dir","c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Researchers\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Researchers\\Workspace\\learning\\The-Complete-Rust-Programming-Reference-Guide\\Chapter02\\imgtool\\target\\rls\\debug\\deps\\libadler32-249928717568ed35.rmeta"},"prelude":{"crate_id":{"name":"adler32","disambiguator":[12456388306570247724,0]},"crate_root":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src","external_crates":[{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}}],"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":0,"byte_end":9451,"line_start":1,"line_end":301,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":0,"byte_end":9451,"line_start":1,"line_end":301,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":24}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[{"value":"/ A minimal implementation of Adler32 for Rust.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This provides the simple method adler32(), that exhausts a Read and","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":54,"byte_end":125,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ computes the Adler32 hash, as well as the RollingAdler32 struct, that can","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":126,"byte_end":203,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ build a hash byte-by-byte, allowing to 'forget' past bytes in a rolling","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":204,"byte_end":279,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ fashion.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":280,"byte_end":292,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":293,"byte_end":296,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The adler32 code has been translated (as accurately as I could manage) from","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":297,"byte_end":376,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ the zlib implementation.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":377,"byte_end":405,"line_start":9,"line_end":9,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2931,"byte_end":2945,"line_start":87,"line_end":87,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[{"value":"/ A rolling version of the Adler32 hash, which can 'forget' past bytes.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2640,"byte_end":2713,"line_start":82,"line_end":82,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2714,"byte_end":2717,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Calling remove() will update the hash to the value it would have if that","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2718,"byte_end":2794,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ past byte had never been fed to the algorithm. This allows you to get the","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2795,"byte_end":2872,"line_start":85,"line_end":85,"column_start":1,"column_end":78}},{"value":"/ hash of a rolling window very efficiently.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2873,"byte_end":2919,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3064,"byte_end":3067,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"pub fn new() -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty Adler32 context (with hash 1).\n","sig":null,"attributes":[{"value":"/ Creates an empty Adler32 context (with hash 1).","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3001,"byte_end":3052,"line_start":93,"line_end":93,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3201,"byte_end":3211,"line_start":99,"line_end":99,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"pub fn from_value(u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an Adler32 context with the given initial value.\n","sig":null,"attributes":[{"value":"/ Creates an Adler32 context with the given initial value.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3129,"byte_end":3189,"line_start":98,"line_end":98,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3446,"byte_end":3457,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"pub fn from_buffer(&[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Convenience function initializing a context from the hash of a buffer.\n","sig":null,"attributes":[{"value":"/ Convenience function initializing a context from the hash of a buffer.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3360,"byte_end":3434,"line_start":105,"line_end":105,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3640,"byte_end":3644,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"pub fn hash(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current hash.\n","sig":null,"attributes":[{"value":"/ Returns the current hash.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3599,"byte_end":3628,"line_start":112,"line_end":112,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3792,"byte_end":3798,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"pub fn remove(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Removes the given `byte` that was fed to the algorithm `size` bytes ago.\n","sig":null,"attributes":[{"value":"/ Removes the given `byte` that was fed to the algorithm `size` bytes ago.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":3704,"byte_end":3780,"line_start":117,"line_end":117,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":4172,"byte_end":4178,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"pub fn update(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Feeds a new `byte` to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a new `byte` to the algorithm to update the hash.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":4101,"byte_end":4160,"line_start":126,"line_end":126,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":4405,"byte_end":4418,"line_start":134,"line_end":134,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"pub fn update_buffer(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Feeds a vector of bytes to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a vector of bytes to the algorithm to update the hash.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":4329,"byte_end":4393,"line_start":133,"line_end":133,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":5971,"byte_end":5978,"line_start":188,"line_end":188,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"pub fn adler32<R: io::Read>(R) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[{"value":"/ Consume a Read object and returns the Adler32 hash.","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":5908,"byte_end":5963,"line_start":187,"line_end":187,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2980,"byte_end":2994,"line_start":92,"line_end":92,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Researchers\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.0.3\\src\\lib.rs","byte_start":2980,"byte_end":2994,"line_start":92,"line_end":92,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":4294967295,"index":4294967295}}]}